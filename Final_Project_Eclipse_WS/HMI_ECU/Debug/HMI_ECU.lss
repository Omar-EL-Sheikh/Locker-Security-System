
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  00002dbc  00002e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800152  00800152  00002f42  2**0
                  ALLOC
  3 .stab         00002c1c  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000140d  00000000  00000000  00005b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000070ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000721d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aeed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 35       	cpi	r26, 0x52	; 82
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e5       	ldi	r26, 0x52	; 82
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 35       	cpi	r26, 0x5D	; 93
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e3       	ldi	r26, 0x30	; 48
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/**************************************************************************
 *								Main Program Execution
 *************************************************************************/

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	sei(); /* Enabling Global Interrupt */
     b4e:	78 94       	sei
	Drivers_Init(); /* Initializing all required Drivers */
     b50:	0e 94 b4 05 	call	0xb68	; 0xb68 <Drivers_Init>
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <main+0x14>

	/* Asking user to create password and confirm until a confirmation occurs  */
	while (!g_passwordConfirm){
		createPassword();
     b56:	0e 94 94 06 	call	0xd28	; 0xd28 <createPassword>
int main(void){
	sei(); /* Enabling Global Interrupt */
	Drivers_Init(); /* Initializing all required Drivers */

	/* Asking user to create password and confirm until a confirmation occurs  */
	while (!g_passwordConfirm){
     b5a:	80 91 52 01 	lds	r24, 0x0152
     b5e:	88 23       	and	r24, r24
     b60:	d1 f3       	breq	.-12     	; 0xb56 <main+0x10>
		createPassword();
	}

	/* Program Flow */
	while(1){
		mainOptions(); /* Displaying and processing main options all the time */
     b62:	0e 94 0b 0a 	call	0x1416	; 0x1416 <mainOptions>
     b66:	fd cf       	rjmp	.-6      	; 0xb62 <main+0x1c>

00000b68 <Drivers_Init>:

/*
 * Description:
 * Function to initialize all required Drivers
 */
void Drivers_Init(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	2c 97       	sbiw	r28, 0x0c	; 12
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
	/* Variable to store UART Configurations */
	UART_ConfigType UART_Configs = {BITS_8, NO_PARITY, BIT_1, BAUD_RATE_9600};
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	99 87       	std	Y+9, r25	; 0x09
     b82:	88 87       	std	Y+8, r24	; 0x08
     b84:	e8 e3       	ldi	r30, 0x38	; 56
     b86:	f1 e0       	ldi	r31, 0x01	; 1
     b88:	fb 87       	std	Y+11, r31	; 0x0b
     b8a:	ea 87       	std	Y+10, r30	; 0x0a
     b8c:	f7 e0       	ldi	r31, 0x07	; 7
     b8e:	fc 87       	std	Y+12, r31	; 0x0c
     b90:	ea 85       	ldd	r30, Y+10	; 0x0a
     b92:	fb 85       	ldd	r31, Y+11	; 0x0b
     b94:	00 80       	ld	r0, Z
     b96:	8a 85       	ldd	r24, Y+10	; 0x0a
     b98:	9b 85       	ldd	r25, Y+11	; 0x0b
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	9b 87       	std	Y+11, r25	; 0x0b
     b9e:	8a 87       	std	Y+10, r24	; 0x0a
     ba0:	e8 85       	ldd	r30, Y+8	; 0x08
     ba2:	f9 85       	ldd	r31, Y+9	; 0x09
     ba4:	00 82       	st	Z, r0
     ba6:	88 85       	ldd	r24, Y+8	; 0x08
     ba8:	99 85       	ldd	r25, Y+9	; 0x09
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	99 87       	std	Y+9, r25	; 0x09
     bae:	88 87       	std	Y+8, r24	; 0x08
     bb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb2:	91 50       	subi	r25, 0x01	; 1
     bb4:	9c 87       	std	Y+12, r25	; 0x0c
     bb6:	ec 85       	ldd	r30, Y+12	; 0x0c
     bb8:	ee 23       	and	r30, r30
     bba:	51 f7       	brne	.-44     	; 0xb90 <Drivers_Init+0x28>
	UART_init(&UART_Configs);
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_init>
	LCD_init();
     bc4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_init>
}
     bc8:	2c 96       	adiw	r28, 0x0c	; 12
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <getPassword>:

/*
 * Description:
 * Function to take password from user by keypad
 */
void getPassword(void){
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	60 97       	sbiw	r28, 0x10	; 16
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
	uint8 temp = 0;
     bee:	18 8a       	std	Y+16, r1	; 0x10
	uint8 counter = 0;
     bf0:	1f 86       	std	Y+15, r1	; 0x0f
     bf2:	89 c0       	rjmp	.+274    	; 0xd06 <getPassword+0x12c>

	/* Receiving exactly 5-digits password from user before user presses Enter */
	while (temp != PASSWORD_ENTER_KEY || counter < PASSWORD_SIZE){
		temp = KEYPAD_getPressedKey();
     bf4:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <KEYPAD_getPressedKey>
     bf8:	88 8b       	std	Y+16, r24	; 0x10

		/* Accepting only digits from 0 to 9 */
		if (temp <= 9 && counter < PASSWORD_SIZE){
     bfa:	88 89       	ldd	r24, Y+16	; 0x10
     bfc:	8a 30       	cpi	r24, 0x0A	; 10
     bfe:	88 f4       	brcc	.+34     	; 0xc22 <getPassword+0x48>
     c00:	8f 85       	ldd	r24, Y+15	; 0x0f
     c02:	85 30       	cpi	r24, 0x05	; 5
     c04:	70 f4       	brcc	.+28     	; 0xc22 <getPassword+0x48>
			g_password[counter] = temp;
     c06:	8f 85       	ldd	r24, Y+15	; 0x0f
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	fc 01       	movw	r30, r24
     c0e:	ea 5a       	subi	r30, 0xAA	; 170
     c10:	fe 4f       	sbci	r31, 0xFE	; 254
     c12:	88 89       	ldd	r24, Y+16	; 0x10
     c14:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
     c16:	8a e2       	ldi	r24, 0x2A	; 42
     c18:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_displayCharacter>
			counter++;
     c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1e:	8f 5f       	subi	r24, 0xFF	; 255
     c20:	8f 87       	std	Y+15, r24	; 0x0f
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	aa ef       	ldi	r26, 0xFA	; 250
     c28:	b3 e4       	ldi	r27, 0x43	; 67
     c2a:	8b 87       	std	Y+11, r24	; 0x0b
     c2c:	9c 87       	std	Y+12, r25	; 0x0c
     c2e:	ad 87       	std	Y+13, r26	; 0x0d
     c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c32:	6b 85       	ldd	r22, Y+11	; 0x0b
     c34:	7c 85       	ldd	r23, Y+12	; 0x0c
     c36:	8d 85       	ldd	r24, Y+13	; 0x0d
     c38:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	4a ef       	ldi	r20, 0xFA	; 250
     c40:	54 e4       	ldi	r21, 0x44	; 68
     c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	8f 83       	std	Y+7, r24	; 0x07
     c4c:	98 87       	std	Y+8, r25	; 0x08
     c4e:	a9 87       	std	Y+9, r26	; 0x09
     c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c52:	6f 81       	ldd	r22, Y+7	; 0x07
     c54:	78 85       	ldd	r23, Y+8	; 0x08
     c56:	89 85       	ldd	r24, Y+9	; 0x09
     c58:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e8       	ldi	r20, 0x80	; 128
     c60:	5f e3       	ldi	r21, 0x3F	; 63
     c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c66:	88 23       	and	r24, r24
     c68:	2c f4       	brge	.+10     	; 0xc74 <getPassword+0x9a>
		__ticks = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	3f c0       	rjmp	.+126    	; 0xcf2 <getPassword+0x118>
	else if (__tmp > 65535)
     c74:	6f 81       	ldd	r22, Y+7	; 0x07
     c76:	78 85       	ldd	r23, Y+8	; 0x08
     c78:	89 85       	ldd	r24, Y+9	; 0x09
     c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	3f ef       	ldi	r19, 0xFF	; 255
     c80:	4f e7       	ldi	r20, 0x7F	; 127
     c82:	57 e4       	ldi	r21, 0x47	; 71
     c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c88:	18 16       	cp	r1, r24
     c8a:	4c f5       	brge	.+82     	; 0xcde <getPassword+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c90:	8d 85       	ldd	r24, Y+13	; 0x0d
     c92:	9e 85       	ldd	r25, Y+14	; 0x0e
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e2       	ldi	r20, 0x20	; 32
     c9a:	51 e4       	ldi	r21, 0x41	; 65
     c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	bc 01       	movw	r22, r24
     ca6:	cd 01       	movw	r24, r26
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	9e 83       	std	Y+6, r25	; 0x06
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <getPassword+0xfa>
     cb6:	88 ec       	ldi	r24, 0xC8	; 200
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	9c 83       	std	Y+4, r25	; 0x04
     cbc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <getPassword+0xe8>
     cc6:	9c 83       	std	Y+4, r25	; 0x04
     cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cca:	8d 81       	ldd	r24, Y+5	; 0x05
     ccc:	9e 81       	ldd	r25, Y+6	; 0x06
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	9e 83       	std	Y+6, r25	; 0x06
     cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd4:	8d 81       	ldd	r24, Y+5	; 0x05
     cd6:	9e 81       	ldd	r25, Y+6	; 0x06
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	69 f7       	brne	.-38     	; 0xcb6 <getPassword+0xdc>
     cdc:	14 c0       	rjmp	.+40     	; 0xd06 <getPassword+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	9e 83       	std	Y+6, r25	; 0x06
     cf0:	8d 83       	std	Y+5, r24	; 0x05
     cf2:	8d 81       	ldd	r24, Y+5	; 0x05
     cf4:	9e 81       	ldd	r25, Y+6	; 0x06
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <getPassword+0x124>
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	89 83       	std	Y+1, r24	; 0x01
void getPassword(void){
	uint8 temp = 0;
	uint8 counter = 0;

	/* Receiving exactly 5-digits password from user before user presses Enter */
	while (temp != PASSWORD_ENTER_KEY || counter < PASSWORD_SIZE){
     d06:	88 89       	ldd	r24, Y+16	; 0x10
     d08:	8d 30       	cpi	r24, 0x0D	; 13
     d0a:	09 f0       	breq	.+2      	; 0xd0e <getPassword+0x134>
     d0c:	73 cf       	rjmp	.-282    	; 0xbf4 <getPassword+0x1a>
     d0e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d10:	85 30       	cpi	r24, 0x05	; 5
     d12:	08 f4       	brcc	.+2      	; 0xd16 <getPassword+0x13c>
     d14:	6f cf       	rjmp	.-290    	; 0xbf4 <getPassword+0x1a>
			counter++;
		}

		_delay_ms(500);
	}
}
     d16:	60 96       	adiw	r28, 0x10	; 16
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <createPassword>:

/*
 * Description:
 * Function to create or change system password
 */
void createPassword (void){
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
	g_passwordConfirm = PASSWORD_UNCONFIRMED;
     d30:	10 92 52 01 	sts	0x0152, r1

	LCD_clearScreen();
     d34:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
	LCD_displayString("Please Enter");
     d38:	80 e6       	ldi	r24, 0x60	; 96
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
	LCD_moveCursor(1,0);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>
	LCD_displayString("New Password: ");
     d48:	8d e6       	ldi	r24, 0x6D	; 109
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
	LCD_moveCursor(2,0);
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>

	getPassword(); /* Receiving password from user */
     d58:	0e 94 ed 05 	call	0xbda	; 0xbda <getPassword>
	sendPassword(); /* Sending password to Control ECU */
     d5c:	0e 94 d0 06 	call	0xda0	; 0xda0 <sendPassword>

	LCD_clearScreen();
     d60:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>
	LCD_displayString("Please Re-enter");
     d6c:	8c e7       	ldi	r24, 0x7C	; 124
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
	LCD_moveCursor(1,0);
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>
	LCD_displayString("Password: ");
     d7c:	8c e8       	ldi	r24, 0x8C	; 140
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>

	getPassword(); /* Receiving password again from user for confirmation */
     d84:	0e 94 ed 05 	call	0xbda	; 0xbda <getPassword>
	sendPassword(); /* Sending password again to be confirmed */
     d88:	0e 94 d0 06 	call	0xda0	; 0xda0 <sendPassword>

	/* Sending an indicator that the HMI ECU is ready to receive confirmation from Control ECU */
	UART_sendByte(HMI_READY_TO_RECEIVE);
     d8c:	8b eb       	ldi	r24, 0xBB	; 187
     d8e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_sendByte>
	/* Receiving confirmation from Control ECU */
	g_passwordConfirm = UART_recieveByte();
     d92:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <UART_recieveByte>
     d96:	80 93 52 01 	sts	0x0152, r24
}
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <sendPassword>:

/*
 * Description:
 * Function to send system password to Control ECU by UART
 */
void sendPassword(void){
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	0f 92       	push	r0
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	uint8 counter;

	/* Waiting for Control ECU to be ready to receive data */
	while (UART_recieveByte() != CONTROL_READY_TO_RECEIVE);
     daa:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <UART_recieveByte>
     dae:	8a 3a       	cpi	r24, 0xAA	; 170
     db0:	e1 f7       	brne	.-8      	; 0xdaa <sendPassword+0xa>

	/* Sending password by UART */
	for (counter = 0; counter < PASSWORD_SIZE; counter++){
     db2:	19 82       	std	Y+1, r1	; 0x01
     db4:	0c c0       	rjmp	.+24     	; 0xdce <sendPassword+0x2e>
		UART_sendByte(g_password[counter]);
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	fc 01       	movw	r30, r24
     dbe:	ea 5a       	subi	r30, 0xAA	; 170
     dc0:	fe 4f       	sbci	r31, 0xFE	; 254
     dc2:	80 81       	ld	r24, Z
     dc4:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_sendByte>

	/* Waiting for Control ECU to be ready to receive data */
	while (UART_recieveByte() != CONTROL_READY_TO_RECEIVE);

	/* Sending password by UART */
	for (counter = 0; counter < PASSWORD_SIZE; counter++){
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	85 30       	cpi	r24, 0x05	; 5
     dd2:	88 f3       	brcs	.-30     	; 0xdb6 <sendPassword+0x16>
		UART_sendByte(g_password[counter]);
	}

}
     dd4:	0f 90       	pop	r0
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <lockSystem>:

/*
 * Description:
 * Function to lock the system for 1 minute
 */
void lockSystem(void){
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	2f 97       	sbiw	r28, 0x0f	; 15
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
	sint8 counter;

	LCD_clearScreen();
     df0:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
	LCD_displayString("System is Locked");
     df4:	87 e9       	ldi	r24, 0x97	; 151
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
	LCD_moveCursor(1,0);
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>
	LCD_displayString("Unlocking in ");
     e04:	88 ea       	ldi	r24, 0xA8	; 168
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>

	/* Freezing the system for 60 seconds */
	for (counter = 59; counter >= 0; counter--){
     e0c:	8b e3       	ldi	r24, 0x3B	; 59
     e0e:	8f 87       	std	Y+15, r24	; 0x0f
     e10:	85 c0       	rjmp	.+266    	; 0xf1c <lockSystem+0x140>
		LCD_moveCursor(1,14);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	6e e0       	ldi	r22, 0x0E	; 14
     e16:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>
		LCD_intgerToString(counter);
     e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1c:	99 27       	eor	r25, r25
     e1e:	87 fd       	sbrc	r24, 7
     e20:	90 95       	com	r25
     e22:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_intgerToString>
		if(counter < 10){
     e26:	8f 85       	ldd	r24, Y+15	; 0x0f
     e28:	8a 30       	cpi	r24, 0x0A	; 10
     e2a:	1c f4       	brge	.+6      	; 0xe32 <lockSystem+0x56>
			LCD_displayCharacter(' ');
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_displayCharacter>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	aa e7       	ldi	r26, 0x7A	; 122
     e38:	b4 e4       	ldi	r27, 0x44	; 68
     e3a:	8b 87       	std	Y+11, r24	; 0x0b
     e3c:	9c 87       	std	Y+12, r25	; 0x0c
     e3e:	ad 87       	std	Y+13, r26	; 0x0d
     e40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e42:	6b 85       	ldd	r22, Y+11	; 0x0b
     e44:	7c 85       	ldd	r23, Y+12	; 0x0c
     e46:	8d 85       	ldd	r24, Y+13	; 0x0d
     e48:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	4a ef       	ldi	r20, 0xFA	; 250
     e50:	54 e4       	ldi	r21, 0x44	; 68
     e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	8f 83       	std	Y+7, r24	; 0x07
     e5c:	98 87       	std	Y+8, r25	; 0x08
     e5e:	a9 87       	std	Y+9, r26	; 0x09
     e60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e76:	88 23       	and	r24, r24
     e78:	2c f4       	brge	.+10     	; 0xe84 <lockSystem+0xa8>
		__ticks = 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9e 83       	std	Y+6, r25	; 0x06
     e80:	8d 83       	std	Y+5, r24	; 0x05
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <lockSystem+0x126>
	else if (__tmp > 65535)
     e84:	6f 81       	ldd	r22, Y+7	; 0x07
     e86:	78 85       	ldd	r23, Y+8	; 0x08
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	3f ef       	ldi	r19, 0xFF	; 255
     e90:	4f e7       	ldi	r20, 0x7F	; 127
     e92:	57 e4       	ldi	r21, 0x47	; 71
     e94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e98:	18 16       	cp	r1, r24
     e9a:	4c f5       	brge	.+82     	; 0xeee <lockSystem+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e2       	ldi	r20, 0x20	; 32
     eaa:	51 e4       	ldi	r21, 0x41	; 65
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	9e 83       	std	Y+6, r25	; 0x06
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	0f c0       	rjmp	.+30     	; 0xee4 <lockSystem+0x108>
     ec6:	88 ec       	ldi	r24, 0xC8	; 200
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <lockSystem+0xf6>
     ed6:	9c 83       	std	Y+4, r25	; 0x04
     ed8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	69 f7       	brne	.-38     	; 0xec6 <lockSystem+0xea>
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <lockSystem+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eee:	6f 81       	ldd	r22, Y+7	; 0x07
     ef0:	78 85       	ldd	r23, Y+8	; 0x08
     ef2:	89 85       	ldd	r24, Y+9	; 0x09
     ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <lockSystem+0x132>
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("System is Locked");
	LCD_moveCursor(1,0);
	LCD_displayString("Unlocking in ");

	/* Freezing the system for 60 seconds */
	for (counter = 59; counter >= 0; counter--){
     f16:	8f 85       	ldd	r24, Y+15	; 0x0f
     f18:	81 50       	subi	r24, 0x01	; 1
     f1a:	8f 87       	std	Y+15, r24	; 0x0f
     f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f1e:	88 23       	and	r24, r24
     f20:	0c f0       	brlt	.+2      	; 0xf24 <lockSystem+0x148>
     f22:	77 cf       	rjmp	.-274    	; 0xe12 <lockSystem+0x36>
		if(counter < 10){
			LCD_displayCharacter(' ');
		}
		_delay_ms(1000);
	}
}
     f24:	2f 96       	adiw	r28, 0x0f	; 15
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <processUnlockDoor>:

/*
 * Description:
 * Call-back function to process interrupt by the timer for unlocking door
 */
void processUnlockDoor(void){
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	g_unlockDoorInt++;
     f3e:	80 91 55 01 	lds	r24, 0x0155
     f42:	8f 5f       	subi	r24, 0xFF	; 255
     f44:	80 93 55 01 	sts	0x0155, r24
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <unlockDoorMessage>:


/* Description:
 * Function to unlock door for 15 seconds
 */
void unlockDoorMessage(void){
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	2b 97       	sbiw	r28, 0x0b	; 11
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
	g_unlockDoorInt = 0;
     f62:	10 92 55 01 	sts	0x0155, r1

	/* Configurations for Timer1 to generate an interrupt every 7.5 seconds */
	Timer1_ConfigType Timer1_UnlockDoorConfigs = {0, 58594, F_CPU_1024, COMPARE_MODE};
     f66:	ce 01       	movw	r24, r28
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	98 87       	std	Y+8, r25	; 0x08
     f6c:	8f 83       	std	Y+7, r24	; 0x07
     f6e:	ef e3       	ldi	r30, 0x3F	; 63
     f70:	f1 e0       	ldi	r31, 0x01	; 1
     f72:	fa 87       	std	Y+10, r31	; 0x0a
     f74:	e9 87       	std	Y+9, r30	; 0x09
     f76:	f6 e0       	ldi	r31, 0x06	; 6
     f78:	fb 87       	std	Y+11, r31	; 0x0b
     f7a:	e9 85       	ldd	r30, Y+9	; 0x09
     f7c:	fa 85       	ldd	r31, Y+10	; 0x0a
     f7e:	00 80       	ld	r0, Z
     f80:	89 85       	ldd	r24, Y+9	; 0x09
     f82:	9a 85       	ldd	r25, Y+10	; 0x0a
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	9a 87       	std	Y+10, r25	; 0x0a
     f88:	89 87       	std	Y+9, r24	; 0x09
     f8a:	ef 81       	ldd	r30, Y+7	; 0x07
     f8c:	f8 85       	ldd	r31, Y+8	; 0x08
     f8e:	00 82       	st	Z, r0
     f90:	8f 81       	ldd	r24, Y+7	; 0x07
     f92:	98 85       	ldd	r25, Y+8	; 0x08
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	98 87       	std	Y+8, r25	; 0x08
     f98:	8f 83       	std	Y+7, r24	; 0x07
     f9a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f9c:	91 50       	subi	r25, 0x01	; 1
     f9e:	9b 87       	std	Y+11, r25	; 0x0b
     fa0:	eb 85       	ldd	r30, Y+11	; 0x0b
     fa2:	ee 23       	and	r30, r30
     fa4:	51 f7       	brne	.-44     	; 0xf7a <unlockDoorMessage+0x2c>

	/* Sending the specified call back function to unlock door to Timer1 ISR */
	Timer1_setCallBack(processUnlockDoor);
     fa6:	8b e9       	ldi	r24, 0x9B	; 155
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	0e 94 8b 14 	call	0x2916	; 0x2916 <Timer1_setCallBack>

	/* Initializing Timer1  */
	Timer1_init(&Timer1_UnlockDoorConfigs);
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	0e 94 44 14 	call	0x2888	; 0x2888 <Timer1_init>

	LCD_clearScreen();
     fb6:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
	LCD_displayString("Unlocking...");
     fba:	86 eb       	ldi	r24, 0xB6	; 182
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>

	/* Wait until Timer1 counts 15 seconds*/
	while (g_unlockDoorInt != 2){}
     fc2:	80 91 55 01 	lds	r24, 0x0155
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <unlockDoorMessage+0x74>

	/* Stopping the Timer */
	Timer1_deInit();
     fca:	0e 94 9d 14 	call	0x293a	; 0x293a <Timer1_deInit>
}
     fce:	2b 96       	adiw	r28, 0x0b	; 11
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <processHoldDoor>:

/*
 * Description:
 * Function to process interrupt by timer in case of holding door
 */
void processHoldDoor(void){
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
	g_holdDoorInt++;
     fe8:	80 91 5c 01 	lds	r24, 0x015C
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	80 93 5c 01 	sts	0x015C, r24
}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <holdDoorMessage>:

/*
 * Description:
 * Function to hold the door for 3 seconds
 */
void holdDoorMessage(void){
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	2b 97       	sbiw	r28, 0x0b	; 11
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
	g_holdDoorInt = 0;
    100c:	10 92 5c 01 	sts	0x015C, r1

	/* Configurations for Timer1 to generate an interrupt every 3 seconds */
	Timer1_ConfigType Timer1_HoldDoorConfigs = {0, 23438, F_CPU_1024, COMPARE_MODE};
    1010:	ce 01       	movw	r24, r28
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	98 87       	std	Y+8, r25	; 0x08
    1016:	8f 83       	std	Y+7, r24	; 0x07
    1018:	e5 e4       	ldi	r30, 0x45	; 69
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	fa 87       	std	Y+10, r31	; 0x0a
    101e:	e9 87       	std	Y+9, r30	; 0x09
    1020:	f6 e0       	ldi	r31, 0x06	; 6
    1022:	fb 87       	std	Y+11, r31	; 0x0b
    1024:	e9 85       	ldd	r30, Y+9	; 0x09
    1026:	fa 85       	ldd	r31, Y+10	; 0x0a
    1028:	00 80       	ld	r0, Z
    102a:	89 85       	ldd	r24, Y+9	; 0x09
    102c:	9a 85       	ldd	r25, Y+10	; 0x0a
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	9a 87       	std	Y+10, r25	; 0x0a
    1032:	89 87       	std	Y+9, r24	; 0x09
    1034:	ef 81       	ldd	r30, Y+7	; 0x07
    1036:	f8 85       	ldd	r31, Y+8	; 0x08
    1038:	00 82       	st	Z, r0
    103a:	8f 81       	ldd	r24, Y+7	; 0x07
    103c:	98 85       	ldd	r25, Y+8	; 0x08
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	98 87       	std	Y+8, r25	; 0x08
    1042:	8f 83       	std	Y+7, r24	; 0x07
    1044:	9b 85       	ldd	r25, Y+11	; 0x0b
    1046:	91 50       	subi	r25, 0x01	; 1
    1048:	9b 87       	std	Y+11, r25	; 0x0b
    104a:	eb 85       	ldd	r30, Y+11	; 0x0b
    104c:	ee 23       	and	r30, r30
    104e:	51 f7       	brne	.-44     	; 0x1024 <holdDoorMessage+0x2c>

	/* Sending the specified call back function to door door to Timer1 ISR */
	Timer1_setCallBack(processHoldDoor);
    1050:	80 ef       	ldi	r24, 0xF0	; 240
    1052:	97 e0       	ldi	r25, 0x07	; 7
    1054:	0e 94 8b 14 	call	0x2916	; 0x2916 <Timer1_setCallBack>

	/* Timer1 Initializing */
	Timer1_init(&Timer1_HoldDoorConfigs);
    1058:	ce 01       	movw	r24, r28
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	0e 94 44 14 	call	0x2888	; 0x2888 <Timer1_init>

	LCD_clearScreen();
    1060:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
	LCD_displayString("Door is Open !");
    1064:	83 ec       	ldi	r24, 0xC3	; 195
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>

	/* Wait until Timer1 counts 3 seconds */
	while (g_holdDoorInt != 1){}
    106c:	80 91 5c 01 	lds	r24, 0x015C
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	e1 f7       	brne	.-8      	; 0x106c <holdDoorMessage+0x74>

	/* Stopping the Timer */
	Timer1_deInit();
    1074:	0e 94 9d 14 	call	0x293a	; 0x293a <Timer1_deInit>
}
    1078:	2b 96       	adiw	r28, 0x0b	; 11
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <processlockDoor>:

/*
 * Description:
 * Call-back function to process interrupt by the timer for locking door
 */
void processlockDoor(void){
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	g_lockDoorInt++;
    1092:	80 91 5b 01 	lds	r24, 0x015B
    1096:	8f 5f       	subi	r24, 0xFF	; 255
    1098:	80 93 5b 01 	sts	0x015B, r24
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <lockDoorMessage>:


/* Description:
 * Function to unlock door for 15 seconds
 */
void lockDoorMessage(void){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	2b 97       	sbiw	r28, 0x0b	; 11
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
	g_lockDoorInt = 0;
    10b6:	10 92 5b 01 	sts	0x015B, r1

	/* Configurations for Timer1 to generate an interrupt every 7.5 seconds */
	Timer1_ConfigType Timer1_lockDoorConfigs = {0, 58594, F_CPU_1024, COMPARE_MODE};
    10ba:	ce 01       	movw	r24, r28
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	98 87       	std	Y+8, r25	; 0x08
    10c0:	8f 83       	std	Y+7, r24	; 0x07
    10c2:	eb e4       	ldi	r30, 0x4B	; 75
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	fa 87       	std	Y+10, r31	; 0x0a
    10c8:	e9 87       	std	Y+9, r30	; 0x09
    10ca:	f6 e0       	ldi	r31, 0x06	; 6
    10cc:	fb 87       	std	Y+11, r31	; 0x0b
    10ce:	e9 85       	ldd	r30, Y+9	; 0x09
    10d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    10d2:	00 80       	ld	r0, Z
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	9a 87       	std	Y+10, r25	; 0x0a
    10dc:	89 87       	std	Y+9, r24	; 0x09
    10de:	ef 81       	ldd	r30, Y+7	; 0x07
    10e0:	f8 85       	ldd	r31, Y+8	; 0x08
    10e2:	00 82       	st	Z, r0
    10e4:	8f 81       	ldd	r24, Y+7	; 0x07
    10e6:	98 85       	ldd	r25, Y+8	; 0x08
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	98 87       	std	Y+8, r25	; 0x08
    10ec:	8f 83       	std	Y+7, r24	; 0x07
    10ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f0:	91 50       	subi	r25, 0x01	; 1
    10f2:	9b 87       	std	Y+11, r25	; 0x0b
    10f4:	eb 85       	ldd	r30, Y+11	; 0x0b
    10f6:	ee 23       	and	r30, r30
    10f8:	51 f7       	brne	.-44     	; 0x10ce <lockDoorMessage+0x2c>

	/* Sending the specified call back function to lock door to Timer1 ISR */
	Timer1_setCallBack(processlockDoor);
    10fa:	85 e4       	ldi	r24, 0x45	; 69
    10fc:	98 e0       	ldi	r25, 0x08	; 8
    10fe:	0e 94 8b 14 	call	0x2916	; 0x2916 <Timer1_setCallBack>

	/* Timer1 Initializing */
	Timer1_init(&Timer1_lockDoorConfigs);
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	0e 94 44 14 	call	0x2888	; 0x2888 <Timer1_init>

	LCD_clearScreen();
    110a:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
	LCD_displayString("Locking...");
    110e:	82 ed       	ldi	r24, 0xD2	; 210
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>

	/* Wait until Timer1 counts 15 seconds*/
	while (g_lockDoorInt != 2){}
    1116:	80 91 5b 01 	lds	r24, 0x015B
    111a:	82 30       	cpi	r24, 0x02	; 2
    111c:	e1 f7       	brne	.-8      	; 0x1116 <lockDoorMessage+0x74>

	/* Stopping the Timer */
	Timer1_deInit();
    111e:	0e 94 9d 14 	call	0x293a	; 0x293a <Timer1_deInit>
}
    1122:	2b 96       	adiw	r28, 0x0b	; 11
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <verifyPassword>:

/* Description:
 * Function to verify password from user
 */
void verifyPassword(void){
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	2f 97       	sbiw	r28, 0x0f	; 15
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
	g_passwordConfirm = PASSWORD_UNCONFIRMED;
    1148:	10 92 52 01 	sts	0x0152, r1
	uint8 passwordErrorCount = 0;
    114c:	1f 86       	std	Y+15, r1	; 0x0f
    114e:	9f c0       	rjmp	.+318    	; 0x128e <verifyPassword+0x15a>

	while(!g_passwordConfirm){

		/* Locking the system if user entered 3 unmatched password */
		if (passwordErrorCount == 3){
    1150:	8f 85       	ldd	r24, Y+15	; 0x0f
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	19 f4       	brne	.+6      	; 0x115c <verifyPassword+0x28>
			lockSystem();
    1156:	0e 94 ee 06 	call	0xddc	; 0xddc <lockSystem>
    115a:	9e c0       	rjmp	.+316    	; 0x1298 <verifyPassword+0x164>
			return;
		}

		LCD_clearScreen();
    115c:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
		LCD_displayString("Please Enter");
    1160:	80 e6       	ldi	r24, 0x60	; 96
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
		LCD_moveCursor(1,0);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>
		LCD_displayString("Password: ");
    1170:	8c e8       	ldi	r24, 0x8C	; 140
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>

		/* Receiving password from user to open the door */
		getPassword();
    1178:	0e 94 ed 05 	call	0xbda	; 0xbda <getPassword>
		sendPassword();
    117c:	0e 94 d0 06 	call	0xda0	; 0xda0 <sendPassword>

		/* Sending an indicator that the HMI ECU is ready to receive confirmation from Control ECU */
		UART_sendByte(HMI_READY_TO_RECEIVE);
    1180:	8b eb       	ldi	r24, 0xBB	; 187
    1182:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_sendByte>
		/* Receiving confirmation from Control ECU */
		g_passwordConfirm = UART_recieveByte();
    1186:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <UART_recieveByte>
    118a:	80 93 52 01 	sts	0x0152, r24

		/* Displaying an error message if the password is wrong */
		if (!g_passwordConfirm){
    118e:	80 91 52 01 	lds	r24, 0x0152
    1192:	88 23       	and	r24, r24
    1194:	09 f0       	breq	.+2      	; 0x1198 <verifyPassword+0x64>
    1196:	7b c0       	rjmp	.+246    	; 0x128e <verifyPassword+0x15a>
			passwordErrorCount++;
    1198:	8f 85       	ldd	r24, Y+15	; 0x0f
    119a:	8f 5f       	subi	r24, 0xFF	; 255
    119c:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_clearScreen();
    119e:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
			LCD_displayString("Wrong Password !");
    11a2:	8d ed       	ldi	r24, 0xDD	; 221
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	aa e7       	ldi	r26, 0x7A	; 122
    11b0:	b4 e4       	ldi	r27, 0x44	; 68
    11b2:	8b 87       	std	Y+11, r24	; 0x0b
    11b4:	9c 87       	std	Y+12, r25	; 0x0c
    11b6:	ad 87       	std	Y+13, r26	; 0x0d
    11b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    11bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11be:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4a ef       	ldi	r20, 0xFA	; 250
    11c8:	54 e4       	ldi	r21, 0x44	; 68
    11ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	8f 83       	std	Y+7, r24	; 0x07
    11d4:	98 87       	std	Y+8, r25	; 0x08
    11d6:	a9 87       	std	Y+9, r26	; 0x09
    11d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11da:	6f 81       	ldd	r22, Y+7	; 0x07
    11dc:	78 85       	ldd	r23, Y+8	; 0x08
    11de:	89 85       	ldd	r24, Y+9	; 0x09
    11e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	2c f4       	brge	.+10     	; 0x11fc <verifyPassword+0xc8>
		__ticks = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	3f c0       	rjmp	.+126    	; 0x127a <verifyPassword+0x146>
	else if (__tmp > 65535)
    11fc:	6f 81       	ldd	r22, Y+7	; 0x07
    11fe:	78 85       	ldd	r23, Y+8	; 0x08
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	3f ef       	ldi	r19, 0xFF	; 255
    1208:	4f e7       	ldi	r20, 0x7F	; 127
    120a:	57 e4       	ldi	r21, 0x47	; 71
    120c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1210:	18 16       	cp	r1, r24
    1212:	4c f5       	brge	.+82     	; 0x1266 <verifyPassword+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1214:	6b 85       	ldd	r22, Y+11	; 0x0b
    1216:	7c 85       	ldd	r23, Y+12	; 0x0c
    1218:	8d 85       	ldd	r24, Y+13	; 0x0d
    121a:	9e 85       	ldd	r25, Y+14	; 0x0e
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e2       	ldi	r20, 0x20	; 32
    1222:	51 e4       	ldi	r21, 0x41	; 65
    1224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	0f c0       	rjmp	.+30     	; 0x125c <verifyPassword+0x128>
    123e:	88 ec       	ldi	r24, 0xC8	; 200
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	8b 83       	std	Y+3, r24	; 0x03
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <verifyPassword+0x116>
    124e:	9c 83       	std	Y+4, r25	; 0x04
    1250:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	9e 83       	std	Y+6, r25	; 0x06
    125a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	69 f7       	brne	.-38     	; 0x123e <verifyPassword+0x10a>
    1264:	14 c0       	rjmp	.+40     	; 0x128e <verifyPassword+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1266:	6f 81       	ldd	r22, Y+7	; 0x07
    1268:	78 85       	ldd	r23, Y+8	; 0x08
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <verifyPassword+0x152>
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01
 */
void verifyPassword(void){
	g_passwordConfirm = PASSWORD_UNCONFIRMED;
	uint8 passwordErrorCount = 0;

	while(!g_passwordConfirm){
    128e:	80 91 52 01 	lds	r24, 0x0152
    1292:	88 23       	and	r24, r24
    1294:	09 f4       	brne	.+2      	; 0x1298 <verifyPassword+0x164>
    1296:	5c cf       	rjmp	.-328    	; 0x1150 <verifyPassword+0x1c>
			LCD_clearScreen();
			LCD_displayString("Wrong Password !");
			_delay_ms(1000);
		}
	}
}
    1298:	2f 96       	adiw	r28, 0x0f	; 15
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <openDoor>:

/*
 * Description:
 * Function to process data in case of user choose to open door
 */
void openDoor(void){
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62

	/* Verifying password before processing */
	verifyPassword();
    12b2:	0e 94 9a 08 	call	0x1134	; 0x1134 <verifyPassword>

	if (g_passwordConfirm){
    12b6:	80 91 52 01 	lds	r24, 0x0152
    12ba:	88 23       	and	r24, r24
    12bc:	31 f0       	breq	.+12     	; 0x12ca <openDoor+0x20>
		unlockDoorMessage();
    12be:	0e 94 a7 07 	call	0xf4e	; 0xf4e <unlockDoorMessage>
		holdDoorMessage();
    12c2:	0e 94 fc 07 	call	0xff8	; 0xff8 <holdDoorMessage>
		lockDoorMessage();
    12c6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <lockDoorMessage>
	}
}
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <changePassword>:

/*
 * Description:
 * Function to take new password from user and send to Control ECU to change system password
 */
void changePassword(void){
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	2e 97       	sbiw	r28, 0x0e	; 14
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61

	/* Verifying password before processing */
	verifyPassword();
    12e4:	0e 94 9a 08 	call	0x1134	; 0x1134 <verifyPassword>

	/* Receiving new password and new password confirmation */
	if (g_passwordConfirm){
    12e8:	80 91 52 01 	lds	r24, 0x0152
    12ec:	88 23       	and	r24, r24
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <changePassword+0x22>
    12f0:	89 c0       	rjmp	.+274    	; 0x1404 <changePassword+0x134>
		g_passwordConfirm = PASSWORD_UNCONFIRMED;
    12f2:	10 92 52 01 	sts	0x0152, r1
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <changePassword+0x2c>

		while (!g_passwordConfirm){
			createPassword();
    12f8:	0e 94 94 06 	call	0xd28	; 0xd28 <createPassword>

	/* Receiving new password and new password confirmation */
	if (g_passwordConfirm){
		g_passwordConfirm = PASSWORD_UNCONFIRMED;

		while (!g_passwordConfirm){
    12fc:	80 91 52 01 	lds	r24, 0x0152
    1300:	88 23       	and	r24, r24
    1302:	d1 f3       	breq	.-12     	; 0x12f8 <changePassword+0x28>
			createPassword();
		}

		LCD_clearScreen();
    1304:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
		LCD_displayString("Password Changed");
    1308:	8e ee       	ldi	r24, 0xEE	; 238
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>
		LCD_displayString("Successfully !");
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	aa e7       	ldi	r26, 0x7A	; 122
    1326:	b4 e4       	ldi	r27, 0x44	; 68
    1328:	8b 87       	std	Y+11, r24	; 0x0b
    132a:	9c 87       	std	Y+12, r25	; 0x0c
    132c:	ad 87       	std	Y+13, r26	; 0x0d
    132e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1330:	6b 85       	ldd	r22, Y+11	; 0x0b
    1332:	7c 85       	ldd	r23, Y+12	; 0x0c
    1334:	8d 85       	ldd	r24, Y+13	; 0x0d
    1336:	9e 85       	ldd	r25, Y+14	; 0x0e
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4a ef       	ldi	r20, 0xFA	; 250
    133e:	54 e4       	ldi	r21, 0x44	; 68
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	8f 83       	std	Y+7, r24	; 0x07
    134a:	98 87       	std	Y+8, r25	; 0x08
    134c:	a9 87       	std	Y+9, r26	; 0x09
    134e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1350:	6f 81       	ldd	r22, Y+7	; 0x07
    1352:	78 85       	ldd	r23, Y+8	; 0x08
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	9a 85       	ldd	r25, Y+10	; 0x0a
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1364:	88 23       	and	r24, r24
    1366:	2c f4       	brge	.+10     	; 0x1372 <changePassword+0xa2>
		__ticks = 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9e 83       	std	Y+6, r25	; 0x06
    136e:	8d 83       	std	Y+5, r24	; 0x05
    1370:	3f c0       	rjmp	.+126    	; 0x13f0 <changePassword+0x120>
	else if (__tmp > 65535)
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	4f e7       	ldi	r20, 0x7F	; 127
    1380:	57 e4       	ldi	r21, 0x47	; 71
    1382:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1386:	18 16       	cp	r1, r24
    1388:	4c f5       	brge	.+82     	; 0x13dc <changePassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138a:	6b 85       	ldd	r22, Y+11	; 0x0b
    138c:	7c 85       	ldd	r23, Y+12	; 0x0c
    138e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1390:	9e 85       	ldd	r25, Y+14	; 0x0e
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e2       	ldi	r20, 0x20	; 32
    1398:	51 e4       	ldi	r21, 0x41	; 65
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <changePassword+0x102>
    13b4:	88 ec       	ldi	r24, 0xC8	; 200
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	8b 83       	std	Y+3, r24	; 0x03
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <changePassword+0xf0>
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	69 f7       	brne	.-38     	; 0x13b4 <changePassword+0xe4>
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <changePassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13dc:	6f 81       	ldd	r22, Y+7	; 0x07
    13de:	78 85       	ldd	r23, Y+8	; 0x08
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <changePassword+0x12c>
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}
}
    1404:	2e 96       	adiw	r28, 0x0e	; 14
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <mainOptions>:
/*
 * Description:
 * Function to display main system options
 * Take an option from user
 * Send the option to Control ECU  */
void mainOptions(void){
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	61 97       	sbiw	r28, 0x11	; 17
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
	uint8 option = '\0';
    142a:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    142c:	0e 94 3a 14 	call	0x2874	; 0x2874 <LCD_clearScreen>
	LCD_displayString(" + : Open Door ");
    1430:	8e e0       	ldi	r24, 0x0E	; 14
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
	LCD_moveCursor(1,0);
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>
	LCD_displayString(" - : Change Pass ");
    1440:	8e e1       	ldi	r24, 0x1E	; 30
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
    1448:	75 c0       	rjmp	.+234    	; 0x1534 <mainOptions+0x11e>

	/* Taking input from Keypad until user enters a valid button*/
	while (option != '+' && option != '-'){
		option = KEYPAD_getPressedKey();
    144a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <KEYPAD_getPressedKey>
    144e:	8f 87       	std	Y+15, r24	; 0x0f
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	aa ef       	ldi	r26, 0xFA	; 250
    1456:	b3 e4       	ldi	r27, 0x43	; 67
    1458:	8b 87       	std	Y+11, r24	; 0x0b
    145a:	9c 87       	std	Y+12, r25	; 0x0c
    145c:	ad 87       	std	Y+13, r26	; 0x0d
    145e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1460:	6b 85       	ldd	r22, Y+11	; 0x0b
    1462:	7c 85       	ldd	r23, Y+12	; 0x0c
    1464:	8d 85       	ldd	r24, Y+13	; 0x0d
    1466:	9e 85       	ldd	r25, Y+14	; 0x0e
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	4a ef       	ldi	r20, 0xFA	; 250
    146e:	54 e4       	ldi	r21, 0x44	; 68
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	8f 83       	std	Y+7, r24	; 0x07
    147a:	98 87       	std	Y+8, r25	; 0x08
    147c:	a9 87       	std	Y+9, r26	; 0x09
    147e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	2c f4       	brge	.+10     	; 0x14a2 <mainOptions+0x8c>
		__ticks = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 83       	std	Y+5, r24	; 0x05
    14a0:	3f c0       	rjmp	.+126    	; 0x1520 <mainOptions+0x10a>
	else if (__tmp > 65535)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	4c f5       	brge	.+82     	; 0x150c <mainOptions+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    14bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14be:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e2       	ldi	r20, 0x20	; 32
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <mainOptions+0xec>
    14e4:	88 ec       	ldi	r24, 0xC8	; 200
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <mainOptions+0xda>
    14f4:	9c 83       	std	Y+4, r25	; 0x04
    14f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	69 f7       	brne	.-38     	; 0x14e4 <mainOptions+0xce>
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <mainOptions+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <mainOptions+0x116>
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString(" + : Open Door ");
	LCD_moveCursor(1,0);
	LCD_displayString(" - : Change Pass ");

	/* Taking input from Keypad until user enters a valid button*/
	while (option != '+' && option != '-'){
    1534:	8f 85       	ldd	r24, Y+15	; 0x0f
    1536:	8b 32       	cpi	r24, 0x2B	; 43
    1538:	21 f0       	breq	.+8      	; 0x1542 <mainOptions+0x12c>
    153a:	8f 85       	ldd	r24, Y+15	; 0x0f
    153c:	8d 32       	cpi	r24, 0x2D	; 45
    153e:	09 f0       	breq	.+2      	; 0x1542 <mainOptions+0x12c>
    1540:	84 cf       	rjmp	.-248    	; 0x144a <mainOptions+0x34>
		option = KEYPAD_getPressedKey();
		_delay_ms(500);
	}

	/* Waiting for Control ECU to be ready to receive data */
	while (UART_recieveByte() != CONTROL_READY_TO_RECEIVE);
    1542:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <UART_recieveByte>
    1546:	8a 3a       	cpi	r24, 0xAA	; 170
    1548:	e1 f7       	brne	.-8      	; 0x1542 <mainOptions+0x12c>
	/* Sending Option to Control ECU */
	UART_sendByte(option);
    154a:	8f 85       	ldd	r24, Y+15	; 0x0f
    154c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_sendByte>

	switch (option){
    1550:	8f 85       	ldd	r24, Y+15	; 0x0f
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	39 8b       	std	Y+17, r19	; 0x11
    1558:	28 8b       	std	Y+16, r18	; 0x10
    155a:	88 89       	ldd	r24, Y+16	; 0x10
    155c:	99 89       	ldd	r25, Y+17	; 0x11
    155e:	8b 32       	cpi	r24, 0x2B	; 43
    1560:	91 05       	cpc	r25, r1
    1562:	31 f0       	breq	.+12     	; 0x1570 <mainOptions+0x15a>
    1564:	28 89       	ldd	r18, Y+16	; 0x10
    1566:	39 89       	ldd	r19, Y+17	; 0x11
    1568:	2d 32       	cpi	r18, 0x2D	; 45
    156a:	31 05       	cpc	r19, r1
    156c:	21 f0       	breq	.+8      	; 0x1576 <mainOptions+0x160>
    156e:	05 c0       	rjmp	.+10     	; 0x157a <mainOptions+0x164>
	case '+' :
		openDoor();
    1570:	0e 94 55 09 	call	0x12aa	; 0x12aa <openDoor>
    1574:	02 c0       	rjmp	.+4      	; 0x157a <mainOptions+0x164>
		break;

	case '-' :
		changePassword();
    1576:	0e 94 68 09 	call	0x12d0	; 0x12d0 <changePassword>
		break;
	}
}
    157a:	61 96       	adiw	r28, 0x11	; 17
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <GPIO_setupPinDirection+0x6>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <GPIO_setupPinDirection+0x8>
    1594:	0f 92       	push	r0
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	6a 83       	std	Y+2, r22	; 0x02
    159e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	88 30       	cpi	r24, 0x08	; 8
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <GPIO_setupPinDirection+0x1c>
    15a6:	d5 c0       	rjmp	.+426    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <GPIO_setupPinDirection+0x24>
    15ae:	d1 c0       	rjmp	.+418    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3d 83       	std	Y+5, r19	; 0x05
    15b8:	2c 83       	std	Y+4, r18	; 0x04
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <GPIO_setupPinDirection+0x3a>
    15c4:	43 c0       	rjmp	.+134    	; 0x164c <GPIO_setupPinDirection+0xc0>
    15c6:	2c 81       	ldd	r18, Y+4	; 0x04
    15c8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	2c f4       	brge	.+10     	; 0x15da <GPIO_setupPinDirection+0x4e>
    15d0:	8c 81       	ldd	r24, Y+4	; 0x04
    15d2:	9d 81       	ldd	r25, Y+5	; 0x05
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	71 f0       	breq	.+28     	; 0x15f4 <GPIO_setupPinDirection+0x68>
    15d8:	bc c0       	rjmp	.+376    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
    15da:	2c 81       	ldd	r18, Y+4	; 0x04
    15dc:	3d 81       	ldd	r19, Y+5	; 0x05
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <GPIO_setupPinDirection+0x5a>
    15e4:	5f c0       	rjmp	.+190    	; 0x16a4 <GPIO_setupPinDirection+0x118>
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <GPIO_setupPinDirection+0x66>
    15f0:	85 c0       	rjmp	.+266    	; 0x16fc <GPIO_setupPinDirection+0x170>
    15f2:	af c0       	rjmp	.+350    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	a1 f4       	brne	.+40     	; 0x1622 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15fa:	aa e3       	ldi	r26, 0x3A	; 58
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ea e3       	ldi	r30, 0x3A	; 58
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <GPIO_setupPinDirection+0x8c>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <GPIO_setupPinDirection+0x88>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	98 c0       	rjmp	.+304    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1622:	aa e3       	ldi	r26, 0x3A	; 58
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ea e3       	ldi	r30, 0x3A	; 58
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <GPIO_setupPinDirection+0xb4>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <GPIO_setupPinDirection+0xb0>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	83 c0       	rjmp	.+262    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	a1 f4       	brne	.+40     	; 0x167a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1652:	a7 e3       	ldi	r26, 0x37	; 55
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e7 e3       	ldi	r30, 0x37	; 55
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_setupPinDirection+0xe4>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_setupPinDirection+0xe0>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	6c c0       	rjmp	.+216    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    167a:	a7 e3       	ldi	r26, 0x37	; 55
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e7 e3       	ldi	r30, 0x37	; 55
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_setupPinDirection+0x10c>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <GPIO_setupPinDirection+0x108>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	57 c0       	rjmp	.+174    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	a1 f4       	brne	.+40     	; 0x16d2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16aa:	a4 e3       	ldi	r26, 0x34	; 52
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e4 e3       	ldi	r30, 0x34	; 52
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_setupPinDirection+0x13c>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_setupPinDirection+0x138>
    16cc:	84 2b       	or	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	40 c0       	rjmp	.+128    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16d2:	a4 e3       	ldi	r26, 0x34	; 52
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e4 e3       	ldi	r30, 0x34	; 52
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <GPIO_setupPinDirection+0x164>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <GPIO_setupPinDirection+0x160>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	2b c0       	rjmp	.+86     	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	a1 f4       	brne	.+40     	; 0x172a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1702:	a1 e3       	ldi	r26, 0x31	; 49
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e1 e3       	ldi	r30, 0x31	; 49
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_setupPinDirection+0x194>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_setupPinDirection+0x190>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    172a:	a1 e3       	ldi	r26, 0x31	; 49
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e1 e3       	ldi	r30, 0x31	; 49
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <GPIO_setupPinDirection+0x1bc>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <GPIO_setupPinDirection+0x1b8>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	00 d0       	rcall	.+0      	; 0x1768 <GPIO_writePin+0x6>
    1768:	00 d0       	rcall	.+0      	; 0x176a <GPIO_writePin+0x8>
    176a:	0f 92       	push	r0
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	6a 83       	std	Y+2, r22	; 0x02
    1774:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	08 f0       	brcs	.+2      	; 0x177e <GPIO_writePin+0x1c>
    177c:	d5 c0       	rjmp	.+426    	; 0x1928 <GPIO_writePin+0x1c6>
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	08 f0       	brcs	.+2      	; 0x1786 <GPIO_writePin+0x24>
    1784:	d1 c0       	rjmp	.+418    	; 0x1928 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3d 83       	std	Y+5, r19	; 0x05
    178e:	2c 83       	std	Y+4, r18	; 0x04
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <GPIO_writePin+0x3a>
    179a:	43 c0       	rjmp	.+134    	; 0x1822 <GPIO_writePin+0xc0>
    179c:	2c 81       	ldd	r18, Y+4	; 0x04
    179e:	3d 81       	ldd	r19, Y+5	; 0x05
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <GPIO_writePin+0x4e>
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	9d 81       	ldd	r25, Y+5	; 0x05
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	71 f0       	breq	.+28     	; 0x17ca <GPIO_writePin+0x68>
    17ae:	bc c0       	rjmp	.+376    	; 0x1928 <GPIO_writePin+0x1c6>
    17b0:	2c 81       	ldd	r18, Y+4	; 0x04
    17b2:	3d 81       	ldd	r19, Y+5	; 0x05
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <GPIO_writePin+0x5a>
    17ba:	5f c0       	rjmp	.+190    	; 0x187a <GPIO_writePin+0x118>
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	91 05       	cpc	r25, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <GPIO_writePin+0x66>
    17c6:	85 c0       	rjmp	.+266    	; 0x18d2 <GPIO_writePin+0x170>
    17c8:	af c0       	rjmp	.+350    	; 0x1928 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	a1 f4       	brne	.+40     	; 0x17f8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17d0:	ab e3       	ldi	r26, 0x3B	; 59
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	eb e3       	ldi	r30, 0x3B	; 59
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <GPIO_writePin+0x8c>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <GPIO_writePin+0x88>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	98 c0       	rjmp	.+304    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17f8:	ab e3       	ldi	r26, 0x3B	; 59
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	eb e3       	ldi	r30, 0x3B	; 59
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <GPIO_writePin+0xb4>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <GPIO_writePin+0xb0>
    181a:	80 95       	com	r24
    181c:	84 23       	and	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	83 c0       	rjmp	.+262    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	a1 f4       	brne	.+40     	; 0x1850 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1828:	a8 e3       	ldi	r26, 0x38	; 56
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e8 e3       	ldi	r30, 0x38	; 56
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GPIO_writePin+0xe4>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <GPIO_writePin+0xe0>
    184a:	84 2b       	or	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	6c c0       	rjmp	.+216    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1850:	a8 e3       	ldi	r26, 0x38	; 56
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e8 e3       	ldi	r30, 0x38	; 56
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GPIO_writePin+0x10c>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <GPIO_writePin+0x108>
    1872:	80 95       	com	r24
    1874:	84 23       	and	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	57 c0       	rjmp	.+174    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1880:	a5 e3       	ldi	r26, 0x35	; 53
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e5 e3       	ldi	r30, 0x35	; 53
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_writePin+0x13c>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_writePin+0x138>
    18a2:	84 2b       	or	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	40 c0       	rjmp	.+128    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18a8:	a5 e3       	ldi	r26, 0x35	; 53
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e5 e3       	ldi	r30, 0x35	; 53
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_writePin+0x164>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_writePin+0x160>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	2b c0       	rjmp	.+86     	; 0x1928 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	a1 f4       	brne	.+40     	; 0x1900 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18d8:	a2 e3       	ldi	r26, 0x32	; 50
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e2 e3       	ldi	r30, 0x32	; 50
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_writePin+0x194>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_writePin+0x190>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1900:	a2 e3       	ldi	r26, 0x32	; 50
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e2 e3       	ldi	r30, 0x32	; 50
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_writePin+0x1bc>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_writePin+0x1b8>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <GPIO_readPin+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <GPIO_readPin+0x8>
    1940:	0f 92       	push	r0
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	8a 83       	std	Y+2, r24	; 0x02
    1948:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    194a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	88 30       	cpi	r24, 0x08	; 8
    1950:	08 f0       	brcs	.+2      	; 0x1954 <GPIO_readPin+0x1c>
    1952:	84 c0       	rjmp	.+264    	; 0x1a5c <GPIO_readPin+0x124>
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	84 30       	cpi	r24, 0x04	; 4
    1958:	08 f0       	brcs	.+2      	; 0x195c <GPIO_readPin+0x24>
    195a:	80 c0       	rjmp	.+256    	; 0x1a5c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3d 83       	std	Y+5, r19	; 0x05
    1964:	2c 83       	std	Y+4, r18	; 0x04
    1966:	4c 81       	ldd	r20, Y+4	; 0x04
    1968:	5d 81       	ldd	r21, Y+5	; 0x05
    196a:	41 30       	cpi	r20, 0x01	; 1
    196c:	51 05       	cpc	r21, r1
    196e:	79 f1       	breq	.+94     	; 0x19ce <GPIO_readPin+0x96>
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	82 30       	cpi	r24, 0x02	; 2
    1976:	91 05       	cpc	r25, r1
    1978:	34 f4       	brge	.+12     	; 0x1986 <GPIO_readPin+0x4e>
    197a:	2c 81       	ldd	r18, Y+4	; 0x04
    197c:	3d 81       	ldd	r19, Y+5	; 0x05
    197e:	21 15       	cp	r18, r1
    1980:	31 05       	cpc	r19, r1
    1982:	69 f0       	breq	.+26     	; 0x199e <GPIO_readPin+0x66>
    1984:	6b c0       	rjmp	.+214    	; 0x1a5c <GPIO_readPin+0x124>
    1986:	4c 81       	ldd	r20, Y+4	; 0x04
    1988:	5d 81       	ldd	r21, Y+5	; 0x05
    198a:	42 30       	cpi	r20, 0x02	; 2
    198c:	51 05       	cpc	r21, r1
    198e:	b9 f1       	breq	.+110    	; 0x19fe <GPIO_readPin+0xc6>
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	91 05       	cpc	r25, r1
    1998:	09 f4       	brne	.+2      	; 0x199c <GPIO_readPin+0x64>
    199a:	49 c0       	rjmp	.+146    	; 0x1a2e <GPIO_readPin+0xf6>
    199c:	5f c0       	rjmp	.+190    	; 0x1a5c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    199e:	e9 e3       	ldi	r30, 0x39	; 57
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a9 01       	movw	r20, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <GPIO_readPin+0x7e>
    19b2:	55 95       	asr	r21
    19b4:	47 95       	ror	r20
    19b6:	8a 95       	dec	r24
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <GPIO_readPin+0x7a>
    19ba:	ca 01       	movw	r24, r20
    19bc:	81 70       	andi	r24, 0x01	; 1
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	88 23       	and	r24, r24
    19c2:	19 f0       	breq	.+6      	; 0x19ca <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	49 c0       	rjmp	.+146    	; 0x1a5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	47 c0       	rjmp	.+142    	; 0x1a5c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19ce:	e6 e3       	ldi	r30, 0x36	; 54
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a9 01       	movw	r20, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <GPIO_readPin+0xae>
    19e2:	55 95       	asr	r21
    19e4:	47 95       	ror	r20
    19e6:	8a 95       	dec	r24
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <GPIO_readPin+0xaa>
    19ea:	ca 01       	movw	r24, r20
    19ec:	81 70       	andi	r24, 0x01	; 1
    19ee:	90 70       	andi	r25, 0x00	; 0
    19f0:	88 23       	and	r24, r24
    19f2:	19 f0       	breq	.+6      	; 0x19fa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	31 c0       	rjmp	.+98     	; 0x1a5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19fa:	19 82       	std	Y+1, r1	; 0x01
    19fc:	2f c0       	rjmp	.+94     	; 0x1a5c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19fe:	e3 e3       	ldi	r30, 0x33	; 51
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a9 01       	movw	r20, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <GPIO_readPin+0xde>
    1a12:	55 95       	asr	r21
    1a14:	47 95       	ror	r20
    1a16:	8a 95       	dec	r24
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <GPIO_readPin+0xda>
    1a1a:	ca 01       	movw	r24, r20
    1a1c:	81 70       	andi	r24, 0x01	; 1
    1a1e:	90 70       	andi	r25, 0x00	; 0
    1a20:	88 23       	and	r24, r24
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	19 c0       	rjmp	.+50     	; 0x1a5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a2a:	19 82       	std	Y+1, r1	; 0x01
    1a2c:	17 c0       	rjmp	.+46     	; 0x1a5c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a2e:	e0 e3       	ldi	r30, 0x30	; 48
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a9 01       	movw	r20, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <GPIO_readPin+0x10e>
    1a42:	55 95       	asr	r21
    1a44:	47 95       	ror	r20
    1a46:	8a 95       	dec	r24
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <GPIO_readPin+0x10a>
    1a4a:	ca 01       	movw	r24, r20
    1a4c:	81 70       	andi	r24, 0x01	; 1
    1a4e:	90 70       	andi	r25, 0x00	; 0
    1a50:	88 23       	and	r24, r24
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a5a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <GPIO_setupPortDirection+0x6>
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <GPIO_setupPortDirection+0x8>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	90 f5       	brcc	.+100    	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	3c 83       	std	Y+4, r19	; 0x04
    1a8c:	2b 83       	std	Y+3, r18	; 0x03
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	91 05       	cpc	r25, r1
    1a96:	d1 f0       	breq	.+52     	; 0x1acc <GPIO_setupPortDirection+0x5e>
    1a98:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9c:	22 30       	cpi	r18, 0x02	; 2
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <GPIO_setupPortDirection+0x3e>
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	61 f0       	breq	.+24     	; 0x1ac2 <GPIO_setupPortDirection+0x54>
    1aaa:	1e c0       	rjmp	.+60     	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
    1aac:	2b 81       	ldd	r18, Y+3	; 0x03
    1aae:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <GPIO_setupPortDirection+0x68>
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	91 05       	cpc	r25, r1
    1abe:	81 f0       	breq	.+32     	; 0x1ae0 <GPIO_setupPortDirection+0x72>
    1ac0:	13 c0       	rjmp	.+38     	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ac2:	ea e3       	ldi	r30, 0x3A	; 58
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	80 83       	st	Z, r24
    1aca:	0e c0       	rjmp	.+28     	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1acc:	e7 e3       	ldi	r30, 0x37	; 55
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24
    1ad4:	09 c0       	rjmp	.+18     	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ad6:	e4 e3       	ldi	r30, 0x34	; 52
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	80 83       	st	Z, r24
    1ade:	04 c0       	rjmp	.+8      	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ae0:	e1 e3       	ldi	r30, 0x31	; 49
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <GPIO_writePort+0x6>
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <GPIO_writePort+0x8>
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	84 30       	cpi	r24, 0x04	; 4
    1b0a:	90 f5       	brcc	.+100    	; 0x1b70 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	3c 83       	std	Y+4, r19	; 0x04
    1b14:	2b 83       	std	Y+3, r18	; 0x03
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	d1 f0       	breq	.+52     	; 0x1b54 <GPIO_writePort+0x5e>
    1b20:	2b 81       	ldd	r18, Y+3	; 0x03
    1b22:	3c 81       	ldd	r19, Y+4	; 0x04
    1b24:	22 30       	cpi	r18, 0x02	; 2
    1b26:	31 05       	cpc	r19, r1
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <GPIO_writePort+0x3e>
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	61 f0       	breq	.+24     	; 0x1b4a <GPIO_writePort+0x54>
    1b32:	1e c0       	rjmp	.+60     	; 0x1b70 <GPIO_writePort+0x7a>
    1b34:	2b 81       	ldd	r18, Y+3	; 0x03
    1b36:	3c 81       	ldd	r19, Y+4	; 0x04
    1b38:	22 30       	cpi	r18, 0x02	; 2
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	81 f0       	breq	.+32     	; 0x1b5e <GPIO_writePort+0x68>
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	83 30       	cpi	r24, 0x03	; 3
    1b44:	91 05       	cpc	r25, r1
    1b46:	81 f0       	breq	.+32     	; 0x1b68 <GPIO_writePort+0x72>
    1b48:	13 c0       	rjmp	.+38     	; 0x1b70 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b4a:	eb e3       	ldi	r30, 0x3B	; 59
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	80 83       	st	Z, r24
    1b52:	0e c0       	rjmp	.+28     	; 0x1b70 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b54:	e8 e3       	ldi	r30, 0x38	; 56
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
    1b5c:	09 c0       	rjmp	.+18     	; 0x1b70 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b5e:	e5 e3       	ldi	r30, 0x35	; 53
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	80 83       	st	Z, r24
    1b66:	04 c0       	rjmp	.+8      	; 0x1b70 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b68:	e2 e3       	ldi	r30, 0x32	; 50
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <GPIO_readPort+0x6>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <GPIO_readPort+0x8>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b8c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	84 30       	cpi	r24, 0x04	; 4
    1b92:	90 f5       	brcc	.+100    	; 0x1bf8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	3c 83       	std	Y+4, r19	; 0x04
    1b9c:	2b 83       	std	Y+3, r18	; 0x03
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	d1 f0       	breq	.+52     	; 0x1bdc <GPIO_readPort+0x5e>
    1ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    1baa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	2c f4       	brge	.+10     	; 0x1bbc <GPIO_readPort+0x3e>
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	61 f0       	breq	.+24     	; 0x1bd2 <GPIO_readPort+0x54>
    1bba:	1e c0       	rjmp	.+60     	; 0x1bf8 <GPIO_readPort+0x7a>
    1bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	81 f0       	breq	.+32     	; 0x1be6 <GPIO_readPort+0x68>
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	91 05       	cpc	r25, r1
    1bce:	81 f0       	breq	.+32     	; 0x1bf0 <GPIO_readPort+0x72>
    1bd0:	13 c0       	rjmp	.+38     	; 0x1bf8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bd2:	e9 e3       	ldi	r30, 0x39	; 57
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	0e c0       	rjmp	.+28     	; 0x1bf8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bdc:	e6 e3       	ldi	r30, 0x36	; 54
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1be6:	e3 e3       	ldi	r30, 0x33	; 51
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1bf0:	e0 e3       	ldi	r30, 0x30	; 48
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <KEYPAD_getPressedKey+0x6>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	64 e0       	ldi	r22, 0x04	; 4
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	65 e0       	ldi	r22, 0x05	; 5
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	66 e0       	ldi	r22, 0x06	; 6
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	67 e0       	ldi	r22, 0x07	; 7
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	62 e0       	ldi	r22, 0x02	; 2
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	63 e0       	ldi	r22, 0x03	; 3
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c62:	19 82       	std	Y+1, r1	; 0x01
    1c64:	3b c0       	rjmp	.+118    	; 0x1cdc <KEYPAD_getPressedKey+0xd4>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	98 2f       	mov	r25, r24
    1c6a:	9c 5f       	subi	r25, 0xFC	; 252
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	69 2f       	mov	r22, r25
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	98 2f       	mov	r25, r24
    1c7a:	9c 5f       	subi	r25, 0xFC	; 252
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	69 2f       	mov	r22, r25
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c86:	1a 82       	std	Y+2, r1	; 0x02
    1c88:	1b c0       	rjmp	.+54     	; 0x1cc0 <KEYPAD_getPressedKey+0xb8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	6a 81       	ldd	r22, Y+2	; 0x02
    1c8e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <GPIO_readPin>
    1c92:	88 23       	and	r24, r24
    1c94:	91 f4       	brne	.+36     	; 0x1cba <KEYPAD_getPressedKey+0xb2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	89 0f       	add	r24, r25
    1caa:	8f 5f       	subi	r24, 0xFF	; 255
    1cac:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	84 30       	cpi	r24, 0x04	; 4
    1cc4:	10 f3       	brcs	.-60     	; 0x1c8a <KEYPAD_getPressedKey+0x82>
							return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	98 2f       	mov	r25, r24
    1cca:	9c 5f       	subi	r25, 0xFC	; 252
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	69 2f       	mov	r22, r25
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	8f 5f       	subi	r24, 0xFF	; 255
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	84 30       	cpi	r24, 0x04	; 4
    1ce0:	10 f2       	brcs	.-124    	; 0x1c66 <KEYPAD_getPressedKey+0x5e>
    1ce2:	bf cf       	rjmp	.-130    	; 0x1c62 <KEYPAD_getPressedKey+0x5a>

00001ce4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <KEYPAD_4x4_adjustKeyNumber+0x6>
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <KEYPAD_4x4_adjustKeyNumber+0x8>
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1cf2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	3c 83       	std	Y+4, r19	; 0x04
    1cfc:	2b 83       	std	Y+3, r18	; 0x03
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	88 30       	cpi	r24, 0x08	; 8
    1d04:	91 05       	cpc	r25, r1
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d08:	70 c0       	rjmp	.+224    	; 0x1dea <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0e:	29 30       	cpi	r18, 0x09	; 9
    1d10:	31 05       	cpc	r19, r1
    1d12:	5c f5       	brge	.+86     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	84 30       	cpi	r24, 0x04	; 4
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d1e:	59 c0       	rjmp	.+178    	; 0x1dd2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d20:	2b 81       	ldd	r18, Y+3	; 0x03
    1d22:	3c 81       	ldd	r19, Y+4	; 0x04
    1d24:	25 30       	cpi	r18, 0x05	; 5
    1d26:	31 05       	cpc	r19, r1
    1d28:	9c f4       	brge	.+38     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	82 30       	cpi	r24, 0x02	; 2
    1d30:	91 05       	cpc	r25, r1
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d34:	48 c0       	rjmp	.+144    	; 0x1dc6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d36:	2b 81       	ldd	r18, Y+3	; 0x03
    1d38:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3a:	23 30       	cpi	r18, 0x03	; 3
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	0c f0       	brlt	.+2      	; 0x1d42 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d40:	45 c0       	rjmp	.+138    	; 0x1dcc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	91 05       	cpc	r25, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d4c:	39 c0       	rjmp	.+114    	; 0x1dc0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d4e:	67 c0       	rjmp	.+206    	; 0x1e1e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d50:	2b 81       	ldd	r18, Y+3	; 0x03
    1d52:	3c 81       	ldd	r19, Y+4	; 0x04
    1d54:	26 30       	cpi	r18, 0x06	; 6
    1d56:	31 05       	cpc	r19, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d5a:	41 c0       	rjmp	.+130    	; 0x1dde <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	87 30       	cpi	r24, 0x07	; 7
    1d62:	91 05       	cpc	r25, r1
    1d64:	0c f0       	brlt	.+2      	; 0x1d68 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d66:	3e c0       	rjmp	.+124    	; 0x1de4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d68:	37 c0       	rjmp	.+110    	; 0x1dd8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6e:	2c 30       	cpi	r18, 0x0C	; 12
    1d70:	31 05       	cpc	r19, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d74:	46 c0       	rjmp	.+140    	; 0x1e02 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	8d 30       	cpi	r24, 0x0D	; 13
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	5c f4       	brge	.+22     	; 0x1d96 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d80:	2b 81       	ldd	r18, Y+3	; 0x03
    1d82:	3c 81       	ldd	r19, Y+4	; 0x04
    1d84:	2a 30       	cpi	r18, 0x0A	; 10
    1d86:	31 05       	cpc	r19, r1
    1d88:	b1 f1       	breq	.+108    	; 0x1df6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	8b 30       	cpi	r24, 0x0B	; 11
    1d90:	91 05       	cpc	r25, r1
    1d92:	a4 f5       	brge	.+104    	; 0x1dfc <KEYPAD_4x4_adjustKeyNumber+0x118>
    1d94:	2d c0       	rjmp	.+90     	; 0x1df0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1d96:	2b 81       	ldd	r18, Y+3	; 0x03
    1d98:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9a:	2e 30       	cpi	r18, 0x0E	; 14
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	b9 f1       	breq	.+110    	; 0x1e0e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	8e 30       	cpi	r24, 0x0E	; 14
    1da6:	91 05       	cpc	r25, r1
    1da8:	7c f1       	brlt	.+94     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1daa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dac:	3c 81       	ldd	r19, Y+4	; 0x04
    1dae:	2f 30       	cpi	r18, 0x0F	; 15
    1db0:	31 05       	cpc	r19, r1
    1db2:	79 f1       	breq	.+94     	; 0x1e12 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	80 31       	cpi	r24, 0x10	; 16
    1dba:	91 05       	cpc	r25, r1
    1dbc:	69 f1       	breq	.+90     	; 0x1e18 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1dbe:	2f c0       	rjmp	.+94     	; 0x1e1e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1dc0:	87 e0       	ldi	r24, 0x07	; 7
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	2e c0       	rjmp	.+92     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1dc6:	88 e0       	ldi	r24, 0x08	; 8
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	2b c0       	rjmp	.+86     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1dcc:	89 e0       	ldi	r24, 0x09	; 9
    1dce:	89 83       	std	Y+1, r24	; 0x01
    1dd0:	28 c0       	rjmp	.+80     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1dd2:	85 e2       	ldi	r24, 0x25	; 37
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	25 c0       	rjmp	.+74     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1dd8:	84 e0       	ldi	r24, 0x04	; 4
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	22 c0       	rjmp	.+68     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1dde:	85 e0       	ldi	r24, 0x05	; 5
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	1f c0       	rjmp	.+62     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1de4:	86 e0       	ldi	r24, 0x06	; 6
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	1c c0       	rjmp	.+56     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1dea:	8a e2       	ldi	r24, 0x2A	; 42
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	19 c0       	rjmp	.+50     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	16 c0       	rjmp	.+44     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	13 c0       	rjmp	.+38     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	10 c0       	rjmp	.+32     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e02:	8d e2       	ldi	r24, 0x2D	; 45
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	0d c0       	rjmp	.+26     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e08:	8d e0       	ldi	r24, 0x0D	; 13
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	0a c0       	rjmp	.+20     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e0e:	19 82       	std	Y+1, r1	; 0x01
    1e10:	08 c0       	rjmp	.+16     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e12:	8d e3       	ldi	r24, 0x3D	; 61
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	05 c0       	rjmp	.+10     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e18:	8b e2       	ldi	r24, 0x2B	; 43
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	2e 97       	sbiw	r28, 0x0e	; 14
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a0 ea       	ldi	r26, 0xA0	; 160
    1e60:	b1 e4       	ldi	r27, 0x41	; 65
    1e62:	8b 87       	std	Y+11, r24	; 0x0b
    1e64:	9c 87       	std	Y+12, r25	; 0x0c
    1e66:	ad 87       	std	Y+13, r26	; 0x0d
    1e68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4a ef       	ldi	r20, 0xFA	; 250
    1e78:	54 e4       	ldi	r21, 0x44	; 68
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	8f 83       	std	Y+7, r24	; 0x07
    1e84:	98 87       	std	Y+8, r25	; 0x08
    1e86:	a9 87       	std	Y+9, r26	; 0x09
    1e88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e8       	ldi	r20, 0x80	; 128
    1e98:	5f e3       	ldi	r21, 0x3F	; 63
    1e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9e:	88 23       	and	r24, r24
    1ea0:	2c f4       	brge	.+10     	; 0x1eac <LCD_init+0x7a>
		__ticks = 1;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
    1eaa:	3f c0       	rjmp	.+126    	; 0x1f2a <LCD_init+0xf8>
	else if (__tmp > 65535)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	3f ef       	ldi	r19, 0xFF	; 255
    1eb8:	4f e7       	ldi	r20, 0x7F	; 127
    1eba:	57 e4       	ldi	r21, 0x47	; 71
    1ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec0:	18 16       	cp	r1, r24
    1ec2:	4c f5       	brge	.+82     	; 0x1f16 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e2       	ldi	r20, 0x20	; 32
    1ed2:	51 e4       	ldi	r21, 0x41	; 65
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	0f c0       	rjmp	.+30     	; 0x1f0c <LCD_init+0xda>
    1eee:	88 ec       	ldi	r24, 0xC8	; 200
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9c 83       	std	Y+4, r25	; 0x04
    1ef4:	8b 83       	std	Y+3, r24	; 0x03
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <LCD_init+0xc8>
    1efe:	9c 83       	std	Y+4, r25	; 0x04
    1f00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f02:	8d 81       	ldd	r24, Y+5	; 0x05
    1f04:	9e 81       	ldd	r25, Y+6	; 0x06
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	69 f7       	brne	.-38     	; 0x1eee <LCD_init+0xbc>
    1f14:	14 c0       	rjmp	.+40     	; 0x1f3e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f16:	6f 81       	ldd	r22, Y+7	; 0x07
    1f18:	78 85       	ldd	r23, Y+8	; 0x08
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	9a 83       	std	Y+2, r25	; 0x02
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <LCD_init+0x104>
    1f3a:	9a 83       	std	Y+2, r25	; 0x02
    1f3c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	6f ef       	ldi	r22, 0xFF	; 255
    1f42:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f46:	88 e3       	ldi	r24, 0x38	; 56
    1f48:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f4c:	8c e0       	ldi	r24, 0x0C	; 12
    1f4e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>
}
    1f58:	2e 96       	adiw	r28, 0x0e	; 14
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	e9 97       	sbiw	r28, 0x39	; 57
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f80:	82 e0       	ldi	r24, 0x02	; 2
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a0 e8       	ldi	r26, 0x80	; 128
    1f90:	bf e3       	ldi	r27, 0x3F	; 63
    1f92:	8d ab       	std	Y+53, r24	; 0x35
    1f94:	9e ab       	std	Y+54, r25	; 0x36
    1f96:	af ab       	std	Y+55, r26	; 0x37
    1f98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a ef       	ldi	r20, 0xFA	; 250
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	89 ab       	std	Y+49, r24	; 0x31
    1fb4:	9a ab       	std	Y+50, r25	; 0x32
    1fb6:	ab ab       	std	Y+51, r26	; 0x33
    1fb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fba:	69 a9       	ldd	r22, Y+49	; 0x31
    1fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	2c f4       	brge	.+10     	; 0x1fdc <LCD_sendCommand+0x72>
		__ticks = 1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	98 ab       	std	Y+48, r25	; 0x30
    1fd8:	8f a7       	std	Y+47, r24	; 0x2f
    1fda:	3f c0       	rjmp	.+126    	; 0x205a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1fdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fde:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	3f ef       	ldi	r19, 0xFF	; 255
    1fe8:	4f e7       	ldi	r20, 0x7F	; 127
    1fea:	57 e4       	ldi	r21, 0x47	; 71
    1fec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	4c f5       	brge	.+82     	; 0x2046 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff8:	8f a9       	ldd	r24, Y+55	; 0x37
    1ffa:	98 ad       	ldd	r25, Y+56	; 0x38
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e2       	ldi	r20, 0x20	; 32
    2002:	51 e4       	ldi	r21, 0x41	; 65
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	98 ab       	std	Y+48, r25	; 0x30
    201a:	8f a7       	std	Y+47, r24	; 0x2f
    201c:	0f c0       	rjmp	.+30     	; 0x203c <LCD_sendCommand+0xd2>
    201e:	88 ec       	ldi	r24, 0xC8	; 200
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9e a7       	std	Y+46, r25	; 0x2e
    2024:	8d a7       	std	Y+45, r24	; 0x2d
    2026:	8d a5       	ldd	r24, Y+45	; 0x2d
    2028:	9e a5       	ldd	r25, Y+46	; 0x2e
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_sendCommand+0xc0>
    202e:	9e a7       	std	Y+46, r25	; 0x2e
    2030:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2032:	8f a5       	ldd	r24, Y+47	; 0x2f
    2034:	98 a9       	ldd	r25, Y+48	; 0x30
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	98 ab       	std	Y+48, r25	; 0x30
    203a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203c:	8f a5       	ldd	r24, Y+47	; 0x2f
    203e:	98 a9       	ldd	r25, Y+48	; 0x30
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	69 f7       	brne	.-38     	; 0x201e <LCD_sendCommand+0xb4>
    2044:	14 c0       	rjmp	.+40     	; 0x206e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2046:	69 a9       	ldd	r22, Y+49	; 0x31
    2048:	7a a9       	ldd	r23, Y+50	; 0x32
    204a:	8b a9       	ldd	r24, Y+51	; 0x33
    204c:	9c a9       	ldd	r25, Y+52	; 0x34
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	98 ab       	std	Y+48, r25	; 0x30
    2058:	8f a7       	std	Y+47, r24	; 0x2f
    205a:	8f a5       	ldd	r24, Y+47	; 0x2f
    205c:	98 a9       	ldd	r25, Y+48	; 0x30
    205e:	9c a7       	std	Y+44, r25	; 0x2c
    2060:	8b a7       	std	Y+43, r24	; 0x2b
    2062:	8b a5       	ldd	r24, Y+43	; 0x2b
    2064:	9c a5       	ldd	r25, Y+44	; 0x2c
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <LCD_sendCommand+0xfc>
    206a:	9c a7       	std	Y+44, r25	; 0x2c
    206c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	61 e0       	ldi	r22, 0x01	; 1
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a0 e8       	ldi	r26, 0x80	; 128
    207e:	bf e3       	ldi	r27, 0x3F	; 63
    2080:	8f a3       	std	Y+39, r24	; 0x27
    2082:	98 a7       	std	Y+40, r25	; 0x28
    2084:	a9 a7       	std	Y+41, r26	; 0x29
    2086:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	6f a1       	ldd	r22, Y+39	; 0x27
    208a:	78 a5       	ldd	r23, Y+40	; 0x28
    208c:	89 a5       	ldd	r24, Y+41	; 0x29
    208e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a ef       	ldi	r20, 0xFA	; 250
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8b a3       	std	Y+35, r24	; 0x23
    20a2:	9c a3       	std	Y+36, r25	; 0x24
    20a4:	ad a3       	std	Y+37, r26	; 0x25
    20a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20a8:	6b a1       	ldd	r22, Y+35	; 0x23
    20aa:	7c a1       	ldd	r23, Y+36	; 0x24
    20ac:	8d a1       	ldd	r24, Y+37	; 0x25
    20ae:	9e a1       	ldd	r25, Y+38	; 0x26
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	2c f4       	brge	.+10     	; 0x20ca <LCD_sendCommand+0x160>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    20ca:	6b a1       	ldd	r22, Y+35	; 0x23
    20cc:	7c a1       	ldd	r23, Y+36	; 0x24
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	9e a1       	ldd	r25, Y+38	; 0x26
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	57 e4       	ldi	r21, 0x47	; 71
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	4c f5       	brge	.+82     	; 0x2134 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	6f a1       	ldd	r22, Y+39	; 0x27
    20e4:	78 a5       	ldd	r23, Y+40	; 0x28
    20e6:	89 a5       	ldd	r24, Y+41	; 0x29
    20e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9a a3       	std	Y+34, r25	; 0x22
    2108:	89 a3       	std	Y+33, r24	; 0x21
    210a:	0f c0       	rjmp	.+30     	; 0x212a <LCD_sendCommand+0x1c0>
    210c:	88 ec       	ldi	r24, 0xC8	; 200
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	98 a3       	std	Y+32, r25	; 0x20
    2112:	8f 8f       	std	Y+31, r24	; 0x1f
    2114:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2116:	98 a1       	ldd	r25, Y+32	; 0x20
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <LCD_sendCommand+0x1ae>
    211c:	98 a3       	std	Y+32, r25	; 0x20
    211e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	9a a3       	std	Y+34, r25	; 0x22
    2128:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	89 a1       	ldd	r24, Y+33	; 0x21
    212c:	9a a1       	ldd	r25, Y+34	; 0x22
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	69 f7       	brne	.-38     	; 0x210c <LCD_sendCommand+0x1a2>
    2132:	14 c0       	rjmp	.+40     	; 0x215c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	6b a1       	ldd	r22, Y+35	; 0x23
    2136:	7c a1       	ldd	r23, Y+36	; 0x24
    2138:	8d a1       	ldd	r24, Y+37	; 0x25
    213a:	9e a1       	ldd	r25, Y+38	; 0x26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9a a3       	std	Y+34, r25	; 0x22
    2146:	89 a3       	std	Y+33, r24	; 0x21
    2148:	89 a1       	ldd	r24, Y+33	; 0x21
    214a:	9a a1       	ldd	r25, Y+34	; 0x22
    214c:	9e 8f       	std	Y+30, r25	; 0x1e
    214e:	8d 8f       	std	Y+29, r24	; 0x1d
    2150:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2152:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <LCD_sendCommand+0x1ea>
    2158:	9e 8f       	std	Y+30, r25	; 0x1e
    215a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	69 ad       	ldd	r22, Y+57	; 0x39
    2160:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <GPIO_writePort>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a0 e8       	ldi	r26, 0x80	; 128
    216a:	bf e3       	ldi	r27, 0x3F	; 63
    216c:	89 8f       	std	Y+25, r24	; 0x19
    216e:	9a 8f       	std	Y+26, r25	; 0x1a
    2170:	ab 8f       	std	Y+27, r26	; 0x1b
    2172:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	69 8d       	ldd	r22, Y+25	; 0x19
    2176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a ef       	ldi	r20, 0xFA	; 250
    2182:	54 e4       	ldi	r21, 0x44	; 68
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	8d 8b       	std	Y+21, r24	; 0x15
    218e:	9e 8b       	std	Y+22, r25	; 0x16
    2190:	af 8b       	std	Y+23, r26	; 0x17
    2192:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	69 8d       	ldd	r22, Y+25	; 0x19
    21d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <LCD_sendCommand+0x2ac>
    21f8:	88 ec       	ldi	r24, 0xC8	; 200
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
    21fe:	89 8b       	std	Y+17, r24	; 0x11
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	9a 89       	ldd	r25, Y+18	; 0x12
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_sendCommand+0x29a>
    2208:	9a 8b       	std	Y+18, r25	; 0x12
    220a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <LCD_sendCommand+0x28e>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	98 8b       	std	Y+16, r25	; 0x10
    223a:	8f 87       	std	Y+15, r24	; 0x0f
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	98 89       	ldd	r25, Y+16	; 0x10
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <LCD_sendCommand+0x2d6>
    2244:	98 8b       	std	Y+16, r25	; 0x10
    2246:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	61 e0       	ldi	r22, 0x01	; 1
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e8       	ldi	r26, 0x80	; 128
    2258:	bf e3       	ldi	r27, 0x3F	; 63
    225a:	8b 87       	std	Y+11, r24	; 0x0b
    225c:	9c 87       	std	Y+12, r25	; 0x0c
    225e:	ad 87       	std	Y+13, r26	; 0x0d
    2260:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2262:	6b 85       	ldd	r22, Y+11	; 0x0b
    2264:	7c 85       	ldd	r23, Y+12	; 0x0c
    2266:	8d 85       	ldd	r24, Y+13	; 0x0d
    2268:	9e 85       	ldd	r25, Y+14	; 0x0e
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4a ef       	ldi	r20, 0xFA	; 250
    2270:	54 e4       	ldi	r21, 0x44	; 68
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	8f 83       	std	Y+7, r24	; 0x07
    227c:	98 87       	std	Y+8, r25	; 0x08
    227e:	a9 87       	std	Y+9, r26	; 0x09
    2280:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e8       	ldi	r20, 0x80	; 128
    2290:	5f e3       	ldi	r21, 0x3F	; 63
    2292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2296:	88 23       	and	r24, r24
    2298:	2c f4       	brge	.+10     	; 0x22a4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	3f ef       	ldi	r19, 0xFF	; 255
    22b0:	4f e7       	ldi	r20, 0x7F	; 127
    22b2:	57 e4       	ldi	r21, 0x47	; 71
    22b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	4c f5       	brge	.+82     	; 0x230e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22be:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	51 e4       	ldi	r21, 0x41	; 65
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <LCD_sendCommand+0x39a>
    22e6:	88 ec       	ldi	r24, 0xC8	; 200
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9c 83       	std	Y+4, r25	; 0x04
    22ec:	8b 83       	std	Y+3, r24	; 0x03
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_sendCommand+0x388>
    22f6:	9c 83       	std	Y+4, r25	; 0x04
    22f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	69 f7       	brne	.-38     	; 0x22e6 <LCD_sendCommand+0x37c>
    230c:	14 c0       	rjmp	.+40     	; 0x2336 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230e:	6f 81       	ldd	r22, Y+7	; 0x07
    2310:	78 85       	ldd	r23, Y+8	; 0x08
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	9a 85       	ldd	r25, Y+10	; 0x0a
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_sendCommand+0x3c4>
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2336:	e9 96       	adiw	r28, 0x39	; 57
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	e9 97       	sbiw	r28, 0x39	; 57
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	a0 e8       	ldi	r26, 0x80	; 128
    236e:	bf e3       	ldi	r27, 0x3F	; 63
    2370:	8d ab       	std	Y+53, r24	; 0x35
    2372:	9e ab       	std	Y+54, r25	; 0x36
    2374:	af ab       	std	Y+55, r26	; 0x37
    2376:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2378:	6d a9       	ldd	r22, Y+53	; 0x35
    237a:	7e a9       	ldd	r23, Y+54	; 0x36
    237c:	8f a9       	ldd	r24, Y+55	; 0x37
    237e:	98 ad       	ldd	r25, Y+56	; 0x38
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a ef       	ldi	r20, 0xFA	; 250
    2386:	54 e4       	ldi	r21, 0x44	; 68
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	89 ab       	std	Y+49, r24	; 0x31
    2392:	9a ab       	std	Y+50, r25	; 0x32
    2394:	ab ab       	std	Y+51, r26	; 0x33
    2396:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2398:	69 a9       	ldd	r22, Y+49	; 0x31
    239a:	7a a9       	ldd	r23, Y+50	; 0x32
    239c:	8b a9       	ldd	r24, Y+51	; 0x33
    239e:	9c a9       	ldd	r25, Y+52	; 0x34
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	2c f4       	brge	.+10     	; 0x23ba <LCD_displayCharacter+0x72>
		__ticks = 1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	98 ab       	std	Y+48, r25	; 0x30
    23b6:	8f a7       	std	Y+47, r24	; 0x2f
    23b8:	3f c0       	rjmp	.+126    	; 0x2438 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    23ba:	69 a9       	ldd	r22, Y+49	; 0x31
    23bc:	7a a9       	ldd	r23, Y+50	; 0x32
    23be:	8b a9       	ldd	r24, Y+51	; 0x33
    23c0:	9c a9       	ldd	r25, Y+52	; 0x34
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	3f ef       	ldi	r19, 0xFF	; 255
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	57 e4       	ldi	r21, 0x47	; 71
    23ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	4c f5       	brge	.+82     	; 0x2424 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d2:	6d a9       	ldd	r22, Y+53	; 0x35
    23d4:	7e a9       	ldd	r23, Y+54	; 0x36
    23d6:	8f a9       	ldd	r24, Y+55	; 0x37
    23d8:	98 ad       	ldd	r25, Y+56	; 0x38
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e2       	ldi	r20, 0x20	; 32
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	98 ab       	std	Y+48, r25	; 0x30
    23f8:	8f a7       	std	Y+47, r24	; 0x2f
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <LCD_displayCharacter+0xd2>
    23fc:	88 ec       	ldi	r24, 0xC8	; 200
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	9e a7       	std	Y+46, r25	; 0x2e
    2402:	8d a7       	std	Y+45, r24	; 0x2d
    2404:	8d a5       	ldd	r24, Y+45	; 0x2d
    2406:	9e a5       	ldd	r25, Y+46	; 0x2e
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_displayCharacter+0xc0>
    240c:	9e a7       	std	Y+46, r25	; 0x2e
    240e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2410:	8f a5       	ldd	r24, Y+47	; 0x2f
    2412:	98 a9       	ldd	r25, Y+48	; 0x30
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	98 ab       	std	Y+48, r25	; 0x30
    2418:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	8f a5       	ldd	r24, Y+47	; 0x2f
    241c:	98 a9       	ldd	r25, Y+48	; 0x30
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	69 f7       	brne	.-38     	; 0x23fc <LCD_displayCharacter+0xb4>
    2422:	14 c0       	rjmp	.+40     	; 0x244c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2424:	69 a9       	ldd	r22, Y+49	; 0x31
    2426:	7a a9       	ldd	r23, Y+50	; 0x32
    2428:	8b a9       	ldd	r24, Y+51	; 0x33
    242a:	9c a9       	ldd	r25, Y+52	; 0x34
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	98 ab       	std	Y+48, r25	; 0x30
    2436:	8f a7       	std	Y+47, r24	; 0x2f
    2438:	8f a5       	ldd	r24, Y+47	; 0x2f
    243a:	98 a9       	ldd	r25, Y+48	; 0x30
    243c:	9c a7       	std	Y+44, r25	; 0x2c
    243e:	8b a7       	std	Y+43, r24	; 0x2b
    2440:	8b a5       	ldd	r24, Y+43	; 0x2b
    2442:	9c a5       	ldd	r25, Y+44	; 0x2c
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_displayCharacter+0xfc>
    2448:	9c a7       	std	Y+44, r25	; 0x2c
    244a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a0 e8       	ldi	r26, 0x80	; 128
    245c:	bf e3       	ldi	r27, 0x3F	; 63
    245e:	8f a3       	std	Y+39, r24	; 0x27
    2460:	98 a7       	std	Y+40, r25	; 0x28
    2462:	a9 a7       	std	Y+41, r26	; 0x29
    2464:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2466:	6f a1       	ldd	r22, Y+39	; 0x27
    2468:	78 a5       	ldd	r23, Y+40	; 0x28
    246a:	89 a5       	ldd	r24, Y+41	; 0x29
    246c:	9a a5       	ldd	r25, Y+42	; 0x2a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4a ef       	ldi	r20, 0xFA	; 250
    2474:	54 e4       	ldi	r21, 0x44	; 68
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	8b a3       	std	Y+35, r24	; 0x23
    2480:	9c a3       	std	Y+36, r25	; 0x24
    2482:	ad a3       	std	Y+37, r26	; 0x25
    2484:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2486:	6b a1       	ldd	r22, Y+35	; 0x23
    2488:	7c a1       	ldd	r23, Y+36	; 0x24
    248a:	8d a1       	ldd	r24, Y+37	; 0x25
    248c:	9e a1       	ldd	r25, Y+38	; 0x26
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e8       	ldi	r20, 0x80	; 128
    2494:	5f e3       	ldi	r21, 0x3F	; 63
    2496:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    249a:	88 23       	and	r24, r24
    249c:	2c f4       	brge	.+10     	; 0x24a8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9a a3       	std	Y+34, r25	; 0x22
    24a4:	89 a3       	std	Y+33, r24	; 0x21
    24a6:	3f c0       	rjmp	.+126    	; 0x2526 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    24a8:	6b a1       	ldd	r22, Y+35	; 0x23
    24aa:	7c a1       	ldd	r23, Y+36	; 0x24
    24ac:	8d a1       	ldd	r24, Y+37	; 0x25
    24ae:	9e a1       	ldd	r25, Y+38	; 0x26
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	3f ef       	ldi	r19, 0xFF	; 255
    24b4:	4f e7       	ldi	r20, 0x7F	; 127
    24b6:	57 e4       	ldi	r21, 0x47	; 71
    24b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24bc:	18 16       	cp	r1, r24
    24be:	4c f5       	brge	.+82     	; 0x2512 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c0:	6f a1       	ldd	r22, Y+39	; 0x27
    24c2:	78 a5       	ldd	r23, Y+40	; 0x28
    24c4:	89 a5       	ldd	r24, Y+41	; 0x29
    24c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9a a3       	std	Y+34, r25	; 0x22
    24e6:	89 a3       	std	Y+33, r24	; 0x21
    24e8:	0f c0       	rjmp	.+30     	; 0x2508 <LCD_displayCharacter+0x1c0>
    24ea:	88 ec       	ldi	r24, 0xC8	; 200
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	98 a3       	std	Y+32, r25	; 0x20
    24f0:	8f 8f       	std	Y+31, r24	; 0x1f
    24f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24f4:	98 a1       	ldd	r25, Y+32	; 0x20
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <LCD_displayCharacter+0x1ae>
    24fa:	98 a3       	std	Y+32, r25	; 0x20
    24fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2500:	9a a1       	ldd	r25, Y+34	; 0x22
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	9a a3       	std	Y+34, r25	; 0x22
    2506:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2508:	89 a1       	ldd	r24, Y+33	; 0x21
    250a:	9a a1       	ldd	r25, Y+34	; 0x22
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	69 f7       	brne	.-38     	; 0x24ea <LCD_displayCharacter+0x1a2>
    2510:	14 c0       	rjmp	.+40     	; 0x253a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2512:	6b a1       	ldd	r22, Y+35	; 0x23
    2514:	7c a1       	ldd	r23, Y+36	; 0x24
    2516:	8d a1       	ldd	r24, Y+37	; 0x25
    2518:	9e a1       	ldd	r25, Y+38	; 0x26
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9a a3       	std	Y+34, r25	; 0x22
    2524:	89 a3       	std	Y+33, r24	; 0x21
    2526:	89 a1       	ldd	r24, Y+33	; 0x21
    2528:	9a a1       	ldd	r25, Y+34	; 0x22
    252a:	9e 8f       	std	Y+30, r25	; 0x1e
    252c:	8d 8f       	std	Y+29, r24	; 0x1d
    252e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2530:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCD_displayCharacter+0x1ea>
    2536:	9e 8f       	std	Y+30, r25	; 0x1e
    2538:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	69 ad       	ldd	r22, Y+57	; 0x39
    253e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <GPIO_writePort>
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a0 e8       	ldi	r26, 0x80	; 128
    2548:	bf e3       	ldi	r27, 0x3F	; 63
    254a:	89 8f       	std	Y+25, r24	; 0x19
    254c:	9a 8f       	std	Y+26, r25	; 0x1a
    254e:	ab 8f       	std	Y+27, r26	; 0x1b
    2550:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2552:	69 8d       	ldd	r22, Y+25	; 0x19
    2554:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2556:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2558:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	4a ef       	ldi	r20, 0xFA	; 250
    2560:	54 e4       	ldi	r21, 0x44	; 68
    2562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	8d 8b       	std	Y+21, r24	; 0x15
    256c:	9e 8b       	std	Y+22, r25	; 0x16
    256e:	af 8b       	std	Y+23, r26	; 0x17
    2570:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2572:	6d 89       	ldd	r22, Y+21	; 0x15
    2574:	7e 89       	ldd	r23, Y+22	; 0x16
    2576:	8f 89       	ldd	r24, Y+23	; 0x17
    2578:	98 8d       	ldd	r25, Y+24	; 0x18
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e8       	ldi	r20, 0x80	; 128
    2580:	5f e3       	ldi	r21, 0x3F	; 63
    2582:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2586:	88 23       	and	r24, r24
    2588:	2c f4       	brge	.+10     	; 0x2594 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9c 8b       	std	Y+20, r25	; 0x14
    2590:	8b 8b       	std	Y+19, r24	; 0x13
    2592:	3f c0       	rjmp	.+126    	; 0x2612 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2594:	6d 89       	ldd	r22, Y+21	; 0x15
    2596:	7e 89       	ldd	r23, Y+22	; 0x16
    2598:	8f 89       	ldd	r24, Y+23	; 0x17
    259a:	98 8d       	ldd	r25, Y+24	; 0x18
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	3f ef       	ldi	r19, 0xFF	; 255
    25a0:	4f e7       	ldi	r20, 0x7F	; 127
    25a2:	57 e4       	ldi	r21, 0x47	; 71
    25a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a8:	18 16       	cp	r1, r24
    25aa:	4c f5       	brge	.+82     	; 0x25fe <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ac:	69 8d       	ldd	r22, Y+25	; 0x19
    25ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e2       	ldi	r20, 0x20	; 32
    25ba:	51 e4       	ldi	r21, 0x41	; 65
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	bc 01       	movw	r22, r24
    25c6:	cd 01       	movw	r24, r26
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	9c 8b       	std	Y+20, r25	; 0x14
    25d2:	8b 8b       	std	Y+19, r24	; 0x13
    25d4:	0f c0       	rjmp	.+30     	; 0x25f4 <LCD_displayCharacter+0x2ac>
    25d6:	88 ec       	ldi	r24, 0xC8	; 200
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9a 8b       	std	Y+18, r25	; 0x12
    25dc:	89 8b       	std	Y+17, r24	; 0x11
    25de:	89 89       	ldd	r24, Y+17	; 0x11
    25e0:	9a 89       	ldd	r25, Y+18	; 0x12
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_displayCharacter+0x29a>
    25e6:	9a 8b       	std	Y+18, r25	; 0x12
    25e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ea:	8b 89       	ldd	r24, Y+19	; 0x13
    25ec:	9c 89       	ldd	r25, Y+20	; 0x14
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	69 f7       	brne	.-38     	; 0x25d6 <LCD_displayCharacter+0x28e>
    25fc:	14 c0       	rjmp	.+40     	; 0x2626 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2600:	7e 89       	ldd	r23, Y+22	; 0x16
    2602:	8f 89       	ldd	r24, Y+23	; 0x17
    2604:	98 8d       	ldd	r25, Y+24	; 0x18
    2606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9c 8b       	std	Y+20, r25	; 0x14
    2610:	8b 8b       	std	Y+19, r24	; 0x13
    2612:	8b 89       	ldd	r24, Y+19	; 0x13
    2614:	9c 89       	ldd	r25, Y+20	; 0x14
    2616:	98 8b       	std	Y+16, r25	; 0x10
    2618:	8f 87       	std	Y+15, r24	; 0x0f
    261a:	8f 85       	ldd	r24, Y+15	; 0x0f
    261c:	98 89       	ldd	r25, Y+16	; 0x10
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <LCD_displayCharacter+0x2d6>
    2622:	98 8b       	std	Y+16, r25	; 0x10
    2624:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	61 e0       	ldi	r22, 0x01	; 1
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	a0 e8       	ldi	r26, 0x80	; 128
    2636:	bf e3       	ldi	r27, 0x3F	; 63
    2638:	8b 87       	std	Y+11, r24	; 0x0b
    263a:	9c 87       	std	Y+12, r25	; 0x0c
    263c:	ad 87       	std	Y+13, r26	; 0x0d
    263e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2640:	6b 85       	ldd	r22, Y+11	; 0x0b
    2642:	7c 85       	ldd	r23, Y+12	; 0x0c
    2644:	8d 85       	ldd	r24, Y+13	; 0x0d
    2646:	9e 85       	ldd	r25, Y+14	; 0x0e
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4a ef       	ldi	r20, 0xFA	; 250
    264e:	54 e4       	ldi	r21, 0x44	; 68
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	8f 83       	std	Y+7, r24	; 0x07
    265a:	98 87       	std	Y+8, r25	; 0x08
    265c:	a9 87       	std	Y+9, r26	; 0x09
    265e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2660:	6f 81       	ldd	r22, Y+7	; 0x07
    2662:	78 85       	ldd	r23, Y+8	; 0x08
    2664:	89 85       	ldd	r24, Y+9	; 0x09
    2666:	9a 85       	ldd	r25, Y+10	; 0x0a
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e8       	ldi	r20, 0x80	; 128
    266e:	5f e3       	ldi	r21, 0x3F	; 63
    2670:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2674:	88 23       	and	r24, r24
    2676:	2c f4       	brge	.+10     	; 0x2682 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9e 83       	std	Y+6, r25	; 0x06
    267e:	8d 83       	std	Y+5, r24	; 0x05
    2680:	3f c0       	rjmp	.+126    	; 0x2700 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2682:	6f 81       	ldd	r22, Y+7	; 0x07
    2684:	78 85       	ldd	r23, Y+8	; 0x08
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	3f ef       	ldi	r19, 0xFF	; 255
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	57 e4       	ldi	r21, 0x47	; 71
    2692:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2696:	18 16       	cp	r1, r24
    2698:	4c f5       	brge	.+82     	; 0x26ec <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269a:	6b 85       	ldd	r22, Y+11	; 0x0b
    269c:	7c 85       	ldd	r23, Y+12	; 0x0c
    269e:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e2       	ldi	r20, 0x20	; 32
    26a8:	51 e4       	ldi	r21, 0x41	; 65
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	bc 01       	movw	r22, r24
    26b4:	cd 01       	movw	r24, r26
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <LCD_displayCharacter+0x39a>
    26c4:	88 ec       	ldi	r24, 0xC8	; 200
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9c 83       	std	Y+4, r25	; 0x04
    26ca:	8b 83       	std	Y+3, r24	; 0x03
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <LCD_displayCharacter+0x388>
    26d4:	9c 83       	std	Y+4, r25	; 0x04
    26d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	69 f7       	brne	.-38     	; 0x26c4 <LCD_displayCharacter+0x37c>
    26ea:	14 c0       	rjmp	.+40     	; 0x2714 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ec:	6f 81       	ldd	r22, Y+7	; 0x07
    26ee:	78 85       	ldd	r23, Y+8	; 0x08
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <LCD_displayCharacter+0x3c4>
    2710:	9a 83       	std	Y+2, r25	; 0x02
    2712:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2714:	e9 96       	adiw	r28, 0x39	; 57
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	00 d0       	rcall	.+0      	; 0x272c <LCD_displayString+0x6>
    272c:	0f 92       	push	r0
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	9b 83       	std	Y+3, r25	; 0x03
    2734:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2736:	19 82       	std	Y+1, r1	; 0x01
    2738:	0e c0       	rjmp	.+28     	; 0x2756 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	fc 01       	movw	r30, r24
    2746:	e2 0f       	add	r30, r18
    2748:	f3 1f       	adc	r31, r19
    274a:	80 81       	ld	r24, Z
    274c:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_displayCharacter>
		i++;
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	8f 5f       	subi	r24, 0xFF	; 255
    2754:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	9b 81       	ldd	r25, Y+3	; 0x03
    2760:	fc 01       	movw	r30, r24
    2762:	e2 0f       	add	r30, r18
    2764:	f3 1f       	adc	r31, r19
    2766:	80 81       	ld	r24, Z
    2768:	88 23       	and	r24, r24
    276a:	39 f7       	brne	.-50     	; 0x273a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	00 d0       	rcall	.+0      	; 0x277e <LCD_moveCursor+0x6>
    277e:	00 d0       	rcall	.+0      	; 0x2780 <LCD_moveCursor+0x8>
    2780:	0f 92       	push	r0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	8a 83       	std	Y+2, r24	; 0x02
    2788:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	3d 83       	std	Y+5, r19	; 0x05
    2792:	2c 83       	std	Y+4, r18	; 0x04
    2794:	8c 81       	ldd	r24, Y+4	; 0x04
    2796:	9d 81       	ldd	r25, Y+5	; 0x05
    2798:	81 30       	cpi	r24, 0x01	; 1
    279a:	91 05       	cpc	r25, r1
    279c:	c1 f0       	breq	.+48     	; 0x27ce <LCD_moveCursor+0x56>
    279e:	2c 81       	ldd	r18, Y+4	; 0x04
    27a0:	3d 81       	ldd	r19, Y+5	; 0x05
    27a2:	22 30       	cpi	r18, 0x02	; 2
    27a4:	31 05       	cpc	r19, r1
    27a6:	2c f4       	brge	.+10     	; 0x27b2 <LCD_moveCursor+0x3a>
    27a8:	8c 81       	ldd	r24, Y+4	; 0x04
    27aa:	9d 81       	ldd	r25, Y+5	; 0x05
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	61 f0       	breq	.+24     	; 0x27c8 <LCD_moveCursor+0x50>
    27b0:	19 c0       	rjmp	.+50     	; 0x27e4 <LCD_moveCursor+0x6c>
    27b2:	2c 81       	ldd	r18, Y+4	; 0x04
    27b4:	3d 81       	ldd	r19, Y+5	; 0x05
    27b6:	22 30       	cpi	r18, 0x02	; 2
    27b8:	31 05       	cpc	r19, r1
    27ba:	69 f0       	breq	.+26     	; 0x27d6 <LCD_moveCursor+0x5e>
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	9d 81       	ldd	r25, Y+5	; 0x05
    27c0:	83 30       	cpi	r24, 0x03	; 3
    27c2:	91 05       	cpc	r25, r1
    27c4:	61 f0       	breq	.+24     	; 0x27de <LCD_moveCursor+0x66>
    27c6:	0e c0       	rjmp	.+28     	; 0x27e4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	0b c0       	rjmp	.+22     	; 0x27e4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	80 5c       	subi	r24, 0xC0	; 192
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	07 c0       	rjmp	.+14     	; 0x27e4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	80 5f       	subi	r24, 0xF0	; 240
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	03 c0       	rjmp	.+6      	; 0x27e4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	80 5b       	subi	r24, 0xB0	; 176
    27e2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	80 68       	ori	r24, 0x80	; 128
    27e8:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>
}
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <LCD_displayStringRowColumn+0x6>
    2802:	00 d0       	rcall	.+0      	; 0x2804 <LCD_displayStringRowColumn+0x8>
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	6a 83       	std	Y+2, r22	; 0x02
    280c:	5c 83       	std	Y+4, r21	; 0x04
    280e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	6a 81       	ldd	r22, Y+2	; 0x02
    2814:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
}
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	62 97       	sbiw	r28, 0x12	; 18
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	9a 8b       	std	Y+18, r25	; 0x12
    2844:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2846:	89 89       	ldd	r24, Y+17	; 0x11
    2848:	9a 89       	ldd	r25, Y+18	; 0x12
    284a:	9e 01       	movw	r18, r28
    284c:	2f 5f       	subi	r18, 0xFF	; 255
    284e:	3f 4f       	sbci	r19, 0xFF	; 255
    2850:	b9 01       	movw	r22, r18
    2852:	4a e0       	ldi	r20, 0x0A	; 10
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <itoa>
   LCD_displayString(buff); /* Display the string */
    285a:	ce 01       	movw	r24, r28
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_displayString>
}
    2862:	62 96       	adiw	r28, 0x12	; 18
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	de bf       	out	0x3e, r29	; 62
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	cd bf       	out	0x3d, r28	; 61
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>
}
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <Timer1_init>:
static volatile void (*g_Timer1_Call_Back) (void) = NULL_PTR;

/*******************************************************************************
 * 								 Functions Definitions
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	00 d0       	rcall	.+0      	; 0x288e <Timer1_init+0x6>
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
	/* Setting Timer1 counter register to its specified initial value from Configurations */
	TCNT1 = Config_Ptr -> initial_value;
    2896:	ac e4       	ldi	r26, 0x4C	; 76
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e9 81       	ldd	r30, Y+1	; 0x01
    289c:	fa 81       	ldd	r31, Y+2	; 0x02
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	11 96       	adiw	r26, 0x01	; 1
    28a4:	9c 93       	st	X, r25
    28a6:	8e 93       	st	-X, r24

	/* Choosing between CTC and Normal mode */
	if (Config_Ptr -> mode == COMPARE_MODE){
    28a8:	e9 81       	ldd	r30, Y+1	; 0x01
    28aa:	fa 81       	ldd	r31, Y+2	; 0x02
    28ac:	85 81       	ldd	r24, Z+5	; 0x05
    28ae:	81 30       	cpi	r24, 0x01	; 1
    28b0:	a9 f4       	brne	.+42     	; 0x28dc <Timer1_init+0x54>
		TCCR1B |= (1 << WGM12); /* Setting Timer1 in CTC Mode with (Compare A) OCR1A as Compare Register */
    28b2:	ae e4       	ldi	r26, 0x4E	; 78
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	ee e4       	ldi	r30, 0x4E	; 78
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	88 60       	ori	r24, 0x08	; 8
    28be:	8c 93       	st	X, r24
		OCR1A = Config_Ptr -> compare_value; /* Setting Compare Register to its specified value from Configurations*/
    28c0:	aa e4       	ldi	r26, 0x4A	; 74
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	11 96       	adiw	r26, 0x01	; 1
    28ce:	9c 93       	st	X, r25
    28d0:	8e 93       	st	-X, r24
		TIMSK = (1 << OCIE1A); /* Output Compare A Match Interrupt Enable */
    28d2:	e9 e5       	ldi	r30, 0x59	; 89
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 e1       	ldi	r24, 0x10	; 16
    28d8:	80 83       	st	Z, r24
    28da:	0c c0       	rjmp	.+24     	; 0x28f4 <Timer1_init+0x6c>
	}
	else if (Config_Ptr -> mode == NORMAL_MODE){
    28dc:	e9 81       	ldd	r30, Y+1	; 0x01
    28de:	fa 81       	ldd	r31, Y+2	; 0x02
    28e0:	85 81       	ldd	r24, Z+5	; 0x05
    28e2:	88 23       	and	r24, r24
    28e4:	39 f4       	brne	.+14     	; 0x28f4 <Timer1_init+0x6c>
		/*For Normal Mode: WGM10:13 = 0 */
		TIMSK |= (1 << TOIE1); /* Overflow Interrupt Enable */
    28e6:	a9 e5       	ldi	r26, 0x59	; 89
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e9 e5       	ldi	r30, 0x59	; 89
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	84 60       	ori	r24, 0x04	; 4
    28f2:	8c 93       	st	X, r24
	}

	/* Setting the specified Pre-scaler from Configurations */
	TCCR1B = ((TCCR1B & (0XF8)) | (Config_Ptr -> prescaler));
    28f4:	ae e4       	ldi	r26, 0x4E	; 78
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ee e4       	ldi	r30, 0x4E	; 78
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	98 2f       	mov	r25, r24
    2900:	98 7f       	andi	r25, 0xF8	; 248
    2902:	e9 81       	ldd	r30, Y+1	; 0x01
    2904:	fa 81       	ldd	r31, Y+2	; 0x02
    2906:	84 81       	ldd	r24, Z+4	; 0x04
    2908:	89 2b       	or	r24, r25
    290a:	8c 93       	st	X, r24
}
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	00 d0       	rcall	.+0      	; 0x291c <Timer1_setCallBack+0x6>
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
	/* Saving the address of the call back function in a global pointer to function*/
	g_Timer1_Call_Back = a_ptr;
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	9a 81       	ldd	r25, Y+2	; 0x02
    2928:	90 93 54 01 	sts	0x0154, r25
    292c:	80 93 53 01 	sts	0x0153, r24
}
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <Timer1_deInit>:

void Timer1_deInit(void){
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0; /* Clearing Control Register to disable Timer1*/
    2942:	ee e4       	ldi	r30, 0x4E	; 78
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	10 82       	st	Z, r1
	TCNT1 = 0; /* Clearing Counter Register*/
    2948:	ec e4       	ldi	r30, 0x4C	; 76
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	11 82       	std	Z+1, r1	; 0x01
    294e:	10 82       	st	Z, r1
	OCR1A = 0; /* Clearing Compare Register*/
    2950:	ea e4       	ldi	r30, 0x4A	; 74
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	11 82       	std	Z+1, r1	; 0x01
    2956:	10 82       	st	Z, r1
	TIMSK &= (0XEB); /* Disabling Interrupt Bits */
    2958:	a9 e5       	ldi	r26, 0x59	; 89
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e9 e5       	ldi	r30, 0x59	; 89
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	8b 7e       	andi	r24, 0xEB	; 235
    2964:	8c 93       	st	X, r24
}
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <__vector_6>:

ISR (TIMER1_COMPA_vect){
    296c:	1f 92       	push	r1
    296e:	0f 92       	push	r0
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	0f 92       	push	r0
    2974:	11 24       	eor	r1, r1
    2976:	2f 93       	push	r18
    2978:	3f 93       	push	r19
    297a:	4f 93       	push	r20
    297c:	5f 93       	push	r21
    297e:	6f 93       	push	r22
    2980:	7f 93       	push	r23
    2982:	8f 93       	push	r24
    2984:	9f 93       	push	r25
    2986:	af 93       	push	r26
    2988:	bf 93       	push	r27
    298a:	ef 93       	push	r30
    298c:	ff 93       	push	r31
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_Call_Back != NULL_PTR)
    2996:	80 91 53 01 	lds	r24, 0x0153
    299a:	90 91 54 01 	lds	r25, 0x0154
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	29 f0       	breq	.+10     	; 0x29ac <__vector_6+0x40>
	{
		/* Calling the Call Back function in the application after Compare Match */
		(*g_Timer1_Call_Back)();
    29a2:	e0 91 53 01 	lds	r30, 0x0153
    29a6:	f0 91 54 01 	lds	r31, 0x0154
    29aa:	09 95       	icall
	}
}
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	ff 91       	pop	r31
    29b2:	ef 91       	pop	r30
    29b4:	bf 91       	pop	r27
    29b6:	af 91       	pop	r26
    29b8:	9f 91       	pop	r25
    29ba:	8f 91       	pop	r24
    29bc:	7f 91       	pop	r23
    29be:	6f 91       	pop	r22
    29c0:	5f 91       	pop	r21
    29c2:	4f 91       	pop	r20
    29c4:	3f 91       	pop	r19
    29c6:	2f 91       	pop	r18
    29c8:	0f 90       	pop	r0
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	0f 90       	pop	r0
    29ce:	1f 90       	pop	r1
    29d0:	18 95       	reti

000029d2 <__vector_8>:

ISR (TIMER1_OVF_vect){
    29d2:	1f 92       	push	r1
    29d4:	0f 92       	push	r0
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	0f 92       	push	r0
    29da:	11 24       	eor	r1, r1
    29dc:	2f 93       	push	r18
    29de:	3f 93       	push	r19
    29e0:	4f 93       	push	r20
    29e2:	5f 93       	push	r21
    29e4:	6f 93       	push	r22
    29e6:	7f 93       	push	r23
    29e8:	8f 93       	push	r24
    29ea:	9f 93       	push	r25
    29ec:	af 93       	push	r26
    29ee:	bf 93       	push	r27
    29f0:	ef 93       	push	r30
    29f2:	ff 93       	push	r31
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_Call_Back != NULL_PTR)
    29fc:	80 91 53 01 	lds	r24, 0x0153
    2a00:	90 91 54 01 	lds	r25, 0x0154
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	29 f0       	breq	.+10     	; 0x2a12 <__vector_8+0x40>
	{
		/* Calling the Call Back function in the application after Compare Match */
		(*g_Timer1_Call_Back)();
    2a08:	e0 91 53 01 	lds	r30, 0x0153
    2a0c:	f0 91 54 01 	lds	r31, 0x0154
    2a10:	09 95       	icall
	}
}
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	ff 91       	pop	r31
    2a18:	ef 91       	pop	r30
    2a1a:	bf 91       	pop	r27
    2a1c:	af 91       	pop	r26
    2a1e:	9f 91       	pop	r25
    2a20:	8f 91       	pop	r24
    2a22:	7f 91       	pop	r23
    2a24:	6f 91       	pop	r22
    2a26:	5f 91       	pop	r21
    2a28:	4f 91       	pop	r20
    2a2a:	3f 91       	pop	r19
    2a2c:	2f 91       	pop	r18
    2a2e:	0f 90       	pop	r0
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	0f 90       	pop	r0
    2a34:	1f 90       	pop	r1
    2a36:	18 95       	reti

00002a38 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * UART_Configs_Ptr)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <UART_init+0x6>
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <UART_init+0x8>
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	9c 83       	std	Y+4, r25	; 0x04
    2a46:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a48:	1a 82       	std	Y+2, r1	; 0x02
    2a4a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a4c:	eb e2       	ldi	r30, 0x2B	; 43
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = Bit-2 of bit data
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2a54:	ea e2       	ldi	r30, 0x2A	; 42
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	88 e1       	ldi	r24, 0x18	; 24
    2a5a:	80 83       	st	Z, r24
	UCSRB = (UCSRB & (0XFB)) | ((UART_Configs_Ptr -> bit_Data) & (0X04));
    2a5c:	aa e2       	ldi	r26, 0x2A	; 42
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	ea e2       	ldi	r30, 0x2A	; 42
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	98 2f       	mov	r25, r24
    2a68:	9b 7f       	andi	r25, 0xFB	; 251
    2a6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a6e:	80 81       	ld	r24, Z
    2a70:	84 70       	andi	r24, 0x04	; 4
    2a72:	89 2b       	or	r24, r25
    2a74:	8c 93       	st	X, r24
	 * UPM1:0  = Parity bits of configurations
	 * USBS    = Stop bit of configurations
	 * UCSZ1:0 = data bits of configurations
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL);
    2a76:	e0 e4       	ldi	r30, 0x40	; 64
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 e8       	ldi	r24, 0x80	; 128
    2a7c:	80 83       	st	Z, r24
	UCSRC = (UCSRC & (0XFC)) | (((UART_Configs_Ptr -> bit_Data) & (0XFB)) << 1);
    2a7e:	a0 e4       	ldi	r26, 0x40	; 64
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e0 e4       	ldi	r30, 0x40	; 64
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	28 2f       	mov	r18, r24
    2a8a:	2c 7f       	andi	r18, 0xFC	; 252
    2a8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a90:	80 81       	ld	r24, Z
    2a92:	88 2f       	mov	r24, r24
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	8b 7f       	andi	r24, 0xFB	; 251
    2a98:	90 70       	andi	r25, 0x00	; 0
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	82 2b       	or	r24, r18
    2aa0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0XF7)) | ((UART_Configs_Ptr -> stop_Bit) << 3);
    2aa2:	a0 e4       	ldi	r26, 0x40	; 64
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e0 e4       	ldi	r30, 0x40	; 64
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	28 2f       	mov	r18, r24
    2aae:	27 7f       	andi	r18, 0xF7	; 247
    2ab0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ab2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	82 2b       	or	r24, r18
    2ac8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0XCF)) | ((UART_Configs_Ptr -> parity) << 4);
    2aca:	a0 e4       	ldi	r26, 0x40	; 64
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e0 e4       	ldi	r30, 0x40	; 64
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	28 2f       	mov	r18, r24
    2ad6:	2f 7c       	andi	r18, 0xCF	; 207
    2ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    2ada:	fc 81       	ldd	r31, Y+4	; 0x04
    2adc:	81 81       	ldd	r24, Z+1	; 0x01
    2ade:	88 2f       	mov	r24, r24
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	82 95       	swap	r24
    2ae4:	92 95       	swap	r25
    2ae6:	90 7f       	andi	r25, 0xF0	; 240
    2ae8:	98 27       	eor	r25, r24
    2aea:	80 7f       	andi	r24, 0xF0	; 240
    2aec:	98 27       	eor	r25, r24
    2aee:	82 2b       	or	r24, r18
    2af0:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Configs_Ptr -> baud_Rate) * 8UL))) - 1);
    2af2:	eb 81       	ldd	r30, Y+3	; 0x03
    2af4:	fc 81       	ldd	r31, Y+4	; 0x04
    2af6:	83 81       	ldd	r24, Z+3	; 0x03
    2af8:	94 81       	ldd	r25, Z+4	; 0x04
    2afa:	a5 81       	ldd	r26, Z+5	; 0x05
    2afc:	b6 81       	ldd	r27, Z+6	; 0x06
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	aa 1f       	adc	r26, r26
    2b04:	bb 1f       	adc	r27, r27
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	aa 1f       	adc	r26, r26
    2b0c:	bb 1f       	adc	r27, r27
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	aa 1f       	adc	r26, r26
    2b14:	bb 1f       	adc	r27, r27
    2b16:	9c 01       	movw	r18, r24
    2b18:	ad 01       	movw	r20, r26
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	92 e1       	ldi	r25, 0x12	; 18
    2b1e:	aa e7       	ldi	r26, 0x7A	; 122
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__udivmodsi4>
    2b2a:	da 01       	movw	r26, r20
    2b2c:	c9 01       	movw	r24, r18
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    2b34:	e0 e4       	ldi	r30, 0x40	; 64
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3c:	89 2f       	mov	r24, r25
    2b3e:	99 27       	eor	r25, r25
    2b40:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b42:	e9 e2       	ldi	r30, 0x29	; 41
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	80 83       	st	Z, r24
}
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	0f 92       	push	r0
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b64:	eb e2       	ldi	r30, 0x2B	; 43
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	80 72       	andi	r24, 0x20	; 32
    2b70:	90 70       	andi	r25, 0x00	; 0
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	b9 f3       	breq	.-18     	; 0x2b64 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b76:	ec e2       	ldi	r30, 0x2C	; 44
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b8e:	eb e2       	ldi	r30, 0x2B	; 43
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	88 23       	and	r24, r24
    2b96:	dc f7       	brge	.-10     	; 0x2b8e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2b98:	ec e2       	ldi	r30, 0x2C	; 44
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
}
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <UART_sendString+0x6>
    2baa:	0f 92       	push	r0
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	9b 83       	std	Y+3, r25	; 0x03
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bb4:	19 82       	std	Y+1, r1	; 0x01
    2bb6:	0e c0       	rjmp	.+28     	; 0x2bd4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	e2 0f       	add	r30, r18
    2bc6:	f3 1f       	adc	r31, r19
    2bc8:	80 81       	ld	r24, Z
    2bca:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_sendByte>
		i++;
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	8f 5f       	subi	r24, 0xFF	; 255
    2bd2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bde:	fc 01       	movw	r30, r24
    2be0:	e2 0f       	add	r30, r18
    2be2:	f3 1f       	adc	r31, r19
    2be4:	80 81       	ld	r24, Z
    2be6:	88 23       	and	r24, r24
    2be8:	39 f7       	brne	.-50     	; 0x2bb8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2bf6:	0f 93       	push	r16
    2bf8:	1f 93       	push	r17
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <UART_receiveString+0xa>
    2c00:	0f 92       	push	r0
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	9b 83       	std	Y+3, r25	; 0x03
    2c08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c0a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	9b 81       	ldd	r25, Y+3	; 0x03
    2c16:	8c 01       	movw	r16, r24
    2c18:	02 0f       	add	r16, r18
    2c1a:	13 1f       	adc	r17, r19
    2c1c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <UART_recieveByte>
    2c20:	f8 01       	movw	r30, r16
    2c22:	80 83       	st	Z, r24
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	9b 81       	ldd	r25, Y+3	; 0x03
    2c36:	8c 01       	movw	r16, r24
    2c38:	02 0f       	add	r16, r18
    2c3a:	13 1f       	adc	r17, r19
    2c3c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <UART_recieveByte>
    2c40:	f8 01       	movw	r30, r16
    2c42:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e2 0f       	add	r30, r18
    2c52:	f3 1f       	adc	r31, r19
    2c54:	80 81       	ld	r24, Z
    2c56:	83 32       	cpi	r24, 0x23	; 35
    2c58:	31 f7       	brne	.-52     	; 0x2c26 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	28 2f       	mov	r18, r24
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	fc 01       	movw	r30, r24
    2c66:	e2 0f       	add	r30, r18
    2c68:	f3 1f       	adc	r31, r19
    2c6a:	10 82       	st	Z, r1
}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	08 95       	ret

00002c7c <__udivmodsi4>:
    2c7c:	a1 e2       	ldi	r26, 0x21	; 33
    2c7e:	1a 2e       	mov	r1, r26
    2c80:	aa 1b       	sub	r26, r26
    2c82:	bb 1b       	sub	r27, r27
    2c84:	fd 01       	movw	r30, r26
    2c86:	0d c0       	rjmp	.+26     	; 0x2ca2 <__udivmodsi4_ep>

00002c88 <__udivmodsi4_loop>:
    2c88:	aa 1f       	adc	r26, r26
    2c8a:	bb 1f       	adc	r27, r27
    2c8c:	ee 1f       	adc	r30, r30
    2c8e:	ff 1f       	adc	r31, r31
    2c90:	a2 17       	cp	r26, r18
    2c92:	b3 07       	cpc	r27, r19
    2c94:	e4 07       	cpc	r30, r20
    2c96:	f5 07       	cpc	r31, r21
    2c98:	20 f0       	brcs	.+8      	; 0x2ca2 <__udivmodsi4_ep>
    2c9a:	a2 1b       	sub	r26, r18
    2c9c:	b3 0b       	sbc	r27, r19
    2c9e:	e4 0b       	sbc	r30, r20
    2ca0:	f5 0b       	sbc	r31, r21

00002ca2 <__udivmodsi4_ep>:
    2ca2:	66 1f       	adc	r22, r22
    2ca4:	77 1f       	adc	r23, r23
    2ca6:	88 1f       	adc	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	1a 94       	dec	r1
    2cac:	69 f7       	brne	.-38     	; 0x2c88 <__udivmodsi4_loop>
    2cae:	60 95       	com	r22
    2cb0:	70 95       	com	r23
    2cb2:	80 95       	com	r24
    2cb4:	90 95       	com	r25
    2cb6:	9b 01       	movw	r18, r22
    2cb8:	ac 01       	movw	r20, r24
    2cba:	bd 01       	movw	r22, r26
    2cbc:	cf 01       	movw	r24, r30
    2cbe:	08 95       	ret

00002cc0 <__prologue_saves__>:
    2cc0:	2f 92       	push	r2
    2cc2:	3f 92       	push	r3
    2cc4:	4f 92       	push	r4
    2cc6:	5f 92       	push	r5
    2cc8:	6f 92       	push	r6
    2cca:	7f 92       	push	r7
    2ccc:	8f 92       	push	r8
    2cce:	9f 92       	push	r9
    2cd0:	af 92       	push	r10
    2cd2:	bf 92       	push	r11
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	ca 1b       	sub	r28, r26
    2cea:	db 0b       	sbc	r29, r27
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	09 94       	ijmp

00002cf8 <__epilogue_restores__>:
    2cf8:	2a 88       	ldd	r2, Y+18	; 0x12
    2cfa:	39 88       	ldd	r3, Y+17	; 0x11
    2cfc:	48 88       	ldd	r4, Y+16	; 0x10
    2cfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d00:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d02:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d04:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d06:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d08:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d0a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d0c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d0e:	df 80       	ldd	r13, Y+7	; 0x07
    2d10:	ee 80       	ldd	r14, Y+6	; 0x06
    2d12:	fd 80       	ldd	r15, Y+5	; 0x05
    2d14:	0c 81       	ldd	r16, Y+4	; 0x04
    2d16:	1b 81       	ldd	r17, Y+3	; 0x03
    2d18:	aa 81       	ldd	r26, Y+2	; 0x02
    2d1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d1c:	ce 0f       	add	r28, r30
    2d1e:	d1 1d       	adc	r29, r1
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	ed 01       	movw	r28, r26
    2d2c:	08 95       	ret

00002d2e <itoa>:
    2d2e:	fb 01       	movw	r30, r22
    2d30:	9f 01       	movw	r18, r30
    2d32:	e8 94       	clt
    2d34:	42 30       	cpi	r20, 0x02	; 2
    2d36:	c4 f0       	brlt	.+48     	; 0x2d68 <itoa+0x3a>
    2d38:	45 32       	cpi	r20, 0x25	; 37
    2d3a:	b4 f4       	brge	.+44     	; 0x2d68 <itoa+0x3a>
    2d3c:	4a 30       	cpi	r20, 0x0A	; 10
    2d3e:	29 f4       	brne	.+10     	; 0x2d4a <itoa+0x1c>
    2d40:	97 fb       	bst	r25, 7
    2d42:	1e f4       	brtc	.+6      	; 0x2d4a <itoa+0x1c>
    2d44:	90 95       	com	r25
    2d46:	81 95       	neg	r24
    2d48:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4a:	64 2f       	mov	r22, r20
    2d4c:	77 27       	eor	r23, r23
    2d4e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__udivmodhi4>
    2d52:	80 5d       	subi	r24, 0xD0	; 208
    2d54:	8a 33       	cpi	r24, 0x3A	; 58
    2d56:	0c f0       	brlt	.+2      	; 0x2d5a <itoa+0x2c>
    2d58:	89 5d       	subi	r24, 0xD9	; 217
    2d5a:	81 93       	st	Z+, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	a1 f7       	brne	.-24     	; 0x2d4a <itoa+0x1c>
    2d62:	16 f4       	brtc	.+4      	; 0x2d68 <itoa+0x3a>
    2d64:	5d e2       	ldi	r21, 0x2D	; 45
    2d66:	51 93       	st	Z+, r21
    2d68:	10 82       	st	Z, r1
    2d6a:	c9 01       	movw	r24, r18
    2d6c:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <strrev>

00002d70 <strrev>:
    2d70:	dc 01       	movw	r26, r24
    2d72:	fc 01       	movw	r30, r24
    2d74:	67 2f       	mov	r22, r23
    2d76:	71 91       	ld	r23, Z+
    2d78:	77 23       	and	r23, r23
    2d7a:	e1 f7       	brne	.-8      	; 0x2d74 <strrev+0x4>
    2d7c:	32 97       	sbiw	r30, 0x02	; 2
    2d7e:	04 c0       	rjmp	.+8      	; 0x2d88 <strrev+0x18>
    2d80:	7c 91       	ld	r23, X
    2d82:	6d 93       	st	X+, r22
    2d84:	70 83       	st	Z, r23
    2d86:	62 91       	ld	r22, -Z
    2d88:	ae 17       	cp	r26, r30
    2d8a:	bf 07       	cpc	r27, r31
    2d8c:	c8 f3       	brcs	.-14     	; 0x2d80 <strrev+0x10>
    2d8e:	08 95       	ret

00002d90 <__udivmodhi4>:
    2d90:	aa 1b       	sub	r26, r26
    2d92:	bb 1b       	sub	r27, r27
    2d94:	51 e1       	ldi	r21, 0x11	; 17
    2d96:	07 c0       	rjmp	.+14     	; 0x2da6 <__udivmodhi4_ep>

00002d98 <__udivmodhi4_loop>:
    2d98:	aa 1f       	adc	r26, r26
    2d9a:	bb 1f       	adc	r27, r27
    2d9c:	a6 17       	cp	r26, r22
    2d9e:	b7 07       	cpc	r27, r23
    2da0:	10 f0       	brcs	.+4      	; 0x2da6 <__udivmodhi4_ep>
    2da2:	a6 1b       	sub	r26, r22
    2da4:	b7 0b       	sbc	r27, r23

00002da6 <__udivmodhi4_ep>:
    2da6:	88 1f       	adc	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	5a 95       	dec	r21
    2dac:	a9 f7       	brne	.-22     	; 0x2d98 <__udivmodhi4_loop>
    2dae:	80 95       	com	r24
    2db0:	90 95       	com	r25
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	08 95       	ret

00002db8 <_exit>:
    2db8:	f8 94       	cli

00002dba <__stop_program>:
    2dba:	ff cf       	rjmp	.-2      	; 0x2dba <__stop_program>
