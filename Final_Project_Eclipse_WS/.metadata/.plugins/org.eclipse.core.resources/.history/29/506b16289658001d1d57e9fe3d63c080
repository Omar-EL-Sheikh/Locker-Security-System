/*
 * Control_Application.c
 *
 *  Created on: Oct 28, 2022
 *      Author: Omar EL-Sheikh
 */

#include "std_types.h"
#include "dc_motor.h"
#include "gpio.h"
#include "twi.h"
#include "external_eeprom.h"
#include "uart.h"
#include "timer1.h"
#include "buzzer.h"
#include "lcd.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#define CONTROL_ECU_ADDRESS 0X01
#define PASSWORD_SIZE 5
#define PASSWORD_ENTER_KEY 13
#define CONTROL_READY_TO_RECEIVE 0xAA
#define HMI_READY_TO_RECEIVE 0XBB
#define PASSWORD_CONFIRMED TRUE
#define PASSWORD_UNCONFIRMED FALSE
#define EEPROM_PASSWORD_START_BYTE 0X0001

/* Variable to store UART Configurations */
UART_ConfigType UART_Configs = {BITS_8, NO_PARITY, BIT_1, BAUD_RATE_9600};

/* Variable to store TWI Configurations */
TWI_ConfigType TWI_Configs = {CONTROL_ECU_ADDRESS, BIT_RATE_400_KBS};

/* Global variable to store system password */
uint8 g_password[PASSWORD_SIZE];

/* Global variable to store system password confirmation */
uint8 g_passwordConfirm[PASSWORD_SIZE];

boolean g_passwordConfirmStats = PASSWORD_UNCONFIRMED;
/*
 * Description:
 * Function to initiate all required Drivers
 */
void Drivers_Init(void){
	UART_init(&UART_Configs);
	TWI_init(&TWI_Configs);
	//LCD_init();
	Buzzer_init();
}

boolean checkPassword(void){
	uint8 counter, temp;

	/* Checking password from EEPROM */
	for (counter = 0; counter < PASSWORD_SIZE; counter++){
		EEPROM_readByte(EEPROM_PASSWORD_START_BYTE + counter, &temp);
		_delay_ms(10);
		if (temp != g_password[counter]){
			return PASSWORD_UNCONFIRMED;
		}
	}

	return PASSWORD_CONFIRMED;
}

/* Description:
 * Function to receive password twice from HMI ECU
 * Confirm password
 * Send Confirmation to the HMI ECU
 */
void createPassword (void){
	uint8 i ;

	/* Receive password */
	receivePassword(&g_password);
	/* Receive password again to be confirmed */
	receivePassword(&g_passwordConfirm);

	/* Confirm Password */
	for (i = 0; i < PASSWORD_SIZE; i++){
		if (g_password [i] != g_passwordConfirm[i]){
			/* Sending unconfirmation to indicate a mismatch */
			while (UART_recieveByte() != HMI_READY_TO_RECEIVE){}
			UART_sendByte(PASSWORD_UNCONFIRMED);
			return;
		}
	}

	/* Sending confirmation to indicate matching */
	while (UART_recieveByte() != HMI_READY_TO_RECEIVE){}
	UART_sendByte(PASSWORD_CONFIRMED);
	g_passwordConfirmStats = PASSWORD_CONFIRMED;
}

/*
 * Description:
 * Function to receive password by UART
 */
void receivePassword (uint8 * password_Ptr){
	uint8 counter ;

	/* Sending an indicator that the Control ECU is ready to receive */
	UART_sendByte(CONTROL_READY_TO_RECEIVE);

	/* Receiving password by UART */
	for (counter = 0; counter < 5; counter ++){
		password_Ptr [counter] = UART_recieveByte();
	}
}

/* Description:
 * Function to write the received password in the EEPROM
 */
void savePassword(void){
	uint8 counter;

	/* Writing the password in 5 consecutive bytes in EEPROM  */
	for (counter = 0; counter < PASSWORD_SIZE; counter++){
		EEPROM_writeByte(EEPROM_PASSWORD_START_BYTE + counter, g_password[counter]);
		_delay_ms(10);
	}
}

/* Description:
 * Function to activate buzzer and freeze system for 1 minute
 */
void lockSystemAction(void){

}

/* Description:
 * Function to take action in case user choose to open door
 */
void openDoorAction(void){
	g_passwordConfirmStats = PASSWORD_UNCONFIRMED;
	uint8 passwordErrorCount = 0;

	while (!g_passwordConfirmStats){
		/* Locking the system if user entered 3 unmatched password */
		if (passwordErrorCount == 3){
			PORTA = (1<<PA0);
			_delay_ms(60000);
			PORTA = 0;
			return;
		}

		/* Receive password */
		receivePassword(&g_password);
		g_passwordConfirmStats = checkPassword();

		while (UART_recieveByte() != HMI_READY_TO_RECEIVE){}
		UART_sendByte(g_passwordConfirmStats);

		passwordErrorCount++;
	}
}

/* Description:
 * Function to receive option from HMI ECU and take an action based on it
 */
void processOption(void){
	uint8 option;
	/* Sending an indicator that the Control ECU is ready to receive */
	UART_sendByte(CONTROL_READY_TO_RECEIVE);
	/* Receiving option from HMI ECU */
	option = UART_recieveByte();

	switch (option){
	case '+' :
		openDoorAction();
		break;

	case '-' :
		//changePassword();
		break;
	}
}

/*
 * Description:
 * Function to check password and return state
 */



int main (){
	Drivers_Init();
	while (!g_passwordConfirmStats){
		createPassword();
	}
	/* Saving the password in EEPROM*/
	savePassword();
	//uint8 counter, val;
	while (1){
		processOption();
	}
}
