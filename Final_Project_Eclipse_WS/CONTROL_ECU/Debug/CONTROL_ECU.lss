
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000322a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  0000322a  000032be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800186  00800186  000033e4  2**0
                  ALLOC
  3 .stab         00003354  00000000  00000000  000033e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001779  00000000  00000000  00006738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00008071  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00008285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000a897  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000bd65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d070  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000d250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000d557  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 07 	call	0xeea	; 0xeea <main>
      8a:	0c 94 13 19 	jmp	0x3226	; 0x3226 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <main>:

/**************************************************************************
 *								Main Program Execution
 *************************************************************************/

int main (){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	sei(); /* Enabling Global Interrupt */
     ef2:	78 94       	sei
	Drivers_Init();
     ef4:	0e 94 88 07 	call	0xf10	; 0xf10 <Drivers_Init>
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <main+0x14>

	while (!g_passwordConfirmStats){
		createPassword();
     efa:	0e 94 8e 08 	call	0x111c	; 0x111c <createPassword>

int main (){
	sei(); /* Enabling Global Interrupt */
	Drivers_Init();

	while (!g_passwordConfirmStats){
     efe:	80 91 86 01 	lds	r24, 0x0186
     f02:	88 23       	and	r24, r24
     f04:	d1 f3       	breq	.-12     	; 0xefa <main+0x10>
		createPassword();
	}

	/* Saving the password in EEPROM*/
	savePassword();
     f06:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <savePassword>

	while (1){
		processOption();
     f0a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <processOption>
     f0e:	fd cf       	rjmp	.-6      	; 0xf0a <main+0x20>

00000f10 <Drivers_Init>:

/*
 * Description:
 * Function to initiate all required Drivers
 */
void Drivers_Init(void){
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	66 97       	sbiw	r28, 0x16	; 22
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
	/* Variable to store UART Configurations */
	UART_ConfigType UART_Configs = {BITS_8, NO_PARITY, BIT_1, BAUD_RATE_9600};
     f24:	ce 01       	movw	r24, r28
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	9e 87       	std	Y+14, r25	; 0x0e
     f2a:	8d 87       	std	Y+13, r24	; 0x0d
     f2c:	ed e6       	ldi	r30, 0x6D	; 109
     f2e:	f1 e0       	ldi	r31, 0x01	; 1
     f30:	f8 8b       	std	Y+16, r31	; 0x10
     f32:	ef 87       	std	Y+15, r30	; 0x0f
     f34:	f7 e0       	ldi	r31, 0x07	; 7
     f36:	f9 8b       	std	Y+17, r31	; 0x11
     f38:	ef 85       	ldd	r30, Y+15	; 0x0f
     f3a:	f8 89       	ldd	r31, Y+16	; 0x10
     f3c:	00 80       	ld	r0, Z
     f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f40:	98 89       	ldd	r25, Y+16	; 0x10
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	98 8b       	std	Y+16, r25	; 0x10
     f46:	8f 87       	std	Y+15, r24	; 0x0f
     f48:	ed 85       	ldd	r30, Y+13	; 0x0d
     f4a:	fe 85       	ldd	r31, Y+14	; 0x0e
     f4c:	00 82       	st	Z, r0
     f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f50:	9e 85       	ldd	r25, Y+14	; 0x0e
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	9e 87       	std	Y+14, r25	; 0x0e
     f56:	8d 87       	std	Y+13, r24	; 0x0d
     f58:	99 89       	ldd	r25, Y+17	; 0x11
     f5a:	91 50       	subi	r25, 0x01	; 1
     f5c:	99 8b       	std	Y+17, r25	; 0x11
     f5e:	e9 89       	ldd	r30, Y+17	; 0x11
     f60:	ee 23       	and	r30, r30
     f62:	51 f7       	brne	.-44     	; 0xf38 <Drivers_Init+0x28>
	/* Variable to store TWI Configurations */
	TWI_ConfigType TWI_Configs = {CONTROL_ECU_ADDRESS, BIT_RATE_400_KBS};
     f64:	ce 01       	movw	r24, r28
     f66:	08 96       	adiw	r24, 0x08	; 8
     f68:	9b 8b       	std	Y+19, r25	; 0x13
     f6a:	8a 8b       	std	Y+18, r24	; 0x12
     f6c:	e8 e6       	ldi	r30, 0x68	; 104
     f6e:	f1 e0       	ldi	r31, 0x01	; 1
     f70:	fd 8b       	std	Y+21, r31	; 0x15
     f72:	ec 8b       	std	Y+20, r30	; 0x14
     f74:	f5 e0       	ldi	r31, 0x05	; 5
     f76:	fe 8b       	std	Y+22, r31	; 0x16
     f78:	ec 89       	ldd	r30, Y+20	; 0x14
     f7a:	fd 89       	ldd	r31, Y+21	; 0x15
     f7c:	00 80       	ld	r0, Z
     f7e:	8c 89       	ldd	r24, Y+20	; 0x14
     f80:	9d 89       	ldd	r25, Y+21	; 0x15
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	9d 8b       	std	Y+21, r25	; 0x15
     f86:	8c 8b       	std	Y+20, r24	; 0x14
     f88:	ea 89       	ldd	r30, Y+18	; 0x12
     f8a:	fb 89       	ldd	r31, Y+19	; 0x13
     f8c:	00 82       	st	Z, r0
     f8e:	8a 89       	ldd	r24, Y+18	; 0x12
     f90:	9b 89       	ldd	r25, Y+19	; 0x13
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	9b 8b       	std	Y+19, r25	; 0x13
     f96:	8a 8b       	std	Y+18, r24	; 0x12
     f98:	9e 89       	ldd	r25, Y+22	; 0x16
     f9a:	91 50       	subi	r25, 0x01	; 1
     f9c:	9e 8b       	std	Y+22, r25	; 0x16
     f9e:	ee 89       	ldd	r30, Y+22	; 0x16
     fa0:	ee 23       	and	r30, r30
     fa2:	51 f7       	brne	.-44     	; 0xf78 <Drivers_Init+0x68>

	UART_init(&UART_Configs);
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <UART_init>
	TWI_init(&TWI_Configs);
     fac:	ce 01       	movw	r24, r28
     fae:	08 96       	adiw	r24, 0x08	; 8
     fb0:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <TWI_init>
	DcMotor_Init();
     fb4:	0e 94 49 0c 	call	0x1892	; 0x1892 <DcMotor_Init>
	Buzzer_init();
     fb8:	0e 94 25 0c 	call	0x184a	; 0x184a <Buzzer_init>
}
     fbc:	66 96       	adiw	r28, 0x16	; 22
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <checkPassword>:

/*
 * Description:
 * Function to check password and return state
 */
boolean checkPassword(void){
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	61 97       	sbiw	r28, 0x11	; 17
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
	uint8 counter, temp;

	/* Checking password from EEPROM */
	for (counter = 0; counter < PASSWORD_SIZE; counter++){
     fe2:	1f 86       	std	Y+15, r1	; 0x0f
     fe4:	8b c0       	rjmp	.+278    	; 0x10fc <checkPassword+0x12e>
		EEPROM_readByte(EEPROM_PASSWORD_START_BYTE + counter, &temp);
     fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	9e 01       	movw	r18, r28
     ff0:	20 5f       	subi	r18, 0xF0	; 240
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	b9 01       	movw	r22, r18
     ff6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <EEPROM_readByte>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a0 e2       	ldi	r26, 0x20	; 32
    1000:	b1 e4       	ldi	r27, 0x41	; 65
    1002:	8b 87       	std	Y+11, r24	; 0x0b
    1004:	9c 87       	std	Y+12, r25	; 0x0c
    1006:	ad 87       	std	Y+13, r26	; 0x0d
    1008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100a:	6b 85       	ldd	r22, Y+11	; 0x0b
    100c:	7c 85       	ldd	r23, Y+12	; 0x0c
    100e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1010:	9e 85       	ldd	r25, Y+14	; 0x0e
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	4a ef       	ldi	r20, 0xFA	; 250
    1018:	54 e4       	ldi	r21, 0x44	; 68
    101a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	8f 83       	std	Y+7, r24	; 0x07
    1024:	98 87       	std	Y+8, r25	; 0x08
    1026:	a9 87       	std	Y+9, r26	; 0x09
    1028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    102a:	6f 81       	ldd	r22, Y+7	; 0x07
    102c:	78 85       	ldd	r23, Y+8	; 0x08
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	9a 85       	ldd	r25, Y+10	; 0x0a
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e8       	ldi	r20, 0x80	; 128
    1038:	5f e3       	ldi	r21, 0x3F	; 63
    103a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    103e:	88 23       	and	r24, r24
    1040:	2c f4       	brge	.+10     	; 0x104c <checkPassword+0x7e>
		__ticks = 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	3f c0       	rjmp	.+126    	; 0x10ca <checkPassword+0xfc>
	else if (__tmp > 65535)
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	3f ef       	ldi	r19, 0xFF	; 255
    1058:	4f e7       	ldi	r20, 0x7F	; 127
    105a:	57 e4       	ldi	r21, 0x47	; 71
    105c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1060:	18 16       	cp	r1, r24
    1062:	4c f5       	brge	.+82     	; 0x10b6 <checkPassword+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1064:	6b 85       	ldd	r22, Y+11	; 0x0b
    1066:	7c 85       	ldd	r23, Y+12	; 0x0c
    1068:	8d 85       	ldd	r24, Y+13	; 0x0d
    106a:	9e 85       	ldd	r25, Y+14	; 0x0e
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e2       	ldi	r20, 0x20	; 32
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	0f c0       	rjmp	.+30     	; 0x10ac <checkPassword+0xde>
    108e:	88 ec       	ldi	r24, 0xC8	; 200
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <checkPassword+0xcc>
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	69 f7       	brne	.-38     	; 0x108e <checkPassword+0xc0>
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <checkPassword+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b6:	6f 81       	ldd	r22, Y+7	; 0x07
    10b8:	78 85       	ldd	r23, Y+8	; 0x08
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <checkPassword+0x108>
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if (temp != g_password[counter]){
    10de:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	fc 01       	movw	r30, r24
    10e6:	e6 57       	subi	r30, 0x76	; 118
    10e8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ea:	90 81       	ld	r25, Z
    10ec:	88 89       	ldd	r24, Y+16	; 0x10
    10ee:	98 17       	cp	r25, r24
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <checkPassword+0x128>
			return PASSWORD_UNCONFIRMED;
    10f2:	19 8a       	std	Y+17, r1	; 0x11
    10f4:	09 c0       	rjmp	.+18     	; 0x1108 <checkPassword+0x13a>
 */
boolean checkPassword(void){
	uint8 counter, temp;

	/* Checking password from EEPROM */
	for (counter = 0; counter < PASSWORD_SIZE; counter++){
    10f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	8f 87       	std	Y+15, r24	; 0x0f
    10fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10fe:	85 30       	cpi	r24, 0x05	; 5
    1100:	08 f4       	brcc	.+2      	; 0x1104 <checkPassword+0x136>
    1102:	71 cf       	rjmp	.-286    	; 0xfe6 <checkPassword+0x18>
		if (temp != g_password[counter]){
			return PASSWORD_UNCONFIRMED;
		}
	}

	return PASSWORD_CONFIRMED;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	89 8b       	std	Y+17, r24	; 0x11
    1108:	89 89       	ldd	r24, Y+17	; 0x11
}
    110a:	61 96       	adiw	r28, 0x11	; 17
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <createPassword>:
/* Description:
 * Function to receive password twice from HMI ECU
 * Confirm password
 * Send Confirmation to the HMI ECU
 */
void createPassword (void){
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
	uint8 i ;

	/* Receive password */
	receivePassword(&g_password);
    1126:	8a e8       	ldi	r24, 0x8A	; 138
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 c9 08 	call	0x1192	; 0x1192 <receivePassword>
	/* Receive password again to be confirmed */
	receivePassword(&g_passwordConfirm);
    112e:	8f e8       	ldi	r24, 0x8F	; 143
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 c9 08 	call	0x1192	; 0x1192 <receivePassword>

	/* Confirm Password */
	for (i = 0; i < PASSWORD_SIZE; i++){
    1136:	19 82       	std	Y+1, r1	; 0x01
    1138:	1b c0       	rjmp	.+54     	; 0x1170 <createPassword+0x54>
		if (g_password [i] != g_passwordConfirm[i]){
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	fc 01       	movw	r30, r24
    1142:	e6 57       	subi	r30, 0x76	; 118
    1144:	fe 4f       	sbci	r31, 0xFE	; 254
    1146:	20 81       	ld	r18, Z
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	fc 01       	movw	r30, r24
    1150:	e1 57       	subi	r30, 0x71	; 113
    1152:	fe 4f       	sbci	r31, 0xFE	; 254
    1154:	80 81       	ld	r24, Z
    1156:	28 17       	cp	r18, r24
    1158:	41 f0       	breq	.+16     	; 0x116a <createPassword+0x4e>
			/* Sending unconfirmation to indicate a mismatch */
			while (UART_recieveByte() != HMI_READY_TO_RECEIVE){}
    115a:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <UART_recieveByte>
    115e:	8b 3b       	cpi	r24, 0xBB	; 187
    1160:	e1 f7       	brne	.-8      	; 0x115a <createPassword+0x3e>
			UART_sendByte(PASSWORD_UNCONFIRMED);
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_sendByte>
    1168:	10 c0       	rjmp	.+32     	; 0x118a <createPassword+0x6e>
	receivePassword(&g_password);
	/* Receive password again to be confirmed */
	receivePassword(&g_passwordConfirm);

	/* Confirm Password */
	for (i = 0; i < PASSWORD_SIZE; i++){
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	8f 5f       	subi	r24, 0xFF	; 255
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	85 30       	cpi	r24, 0x05	; 5
    1174:	10 f3       	brcs	.-60     	; 0x113a <createPassword+0x1e>
			return;
		}
	}

	/* Sending confirmation to indicate matching */
	while (UART_recieveByte() != HMI_READY_TO_RECEIVE){}
    1176:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <UART_recieveByte>
    117a:	8b 3b       	cpi	r24, 0xBB	; 187
    117c:	e1 f7       	brne	.-8      	; 0x1176 <createPassword+0x5a>
	UART_sendByte(PASSWORD_CONFIRMED);
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_sendByte>
	g_passwordConfirmStats = PASSWORD_CONFIRMED;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 86 01 	sts	0x0186, r24
}
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <receivePassword>:

/*
 * Description:
 * Function to receive password by UART
 */
void receivePassword (uint8 * password_Ptr){
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <receivePassword+0xa>
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	9b 83       	std	Y+3, r25	; 0x03
    11a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter ;

	/* Sending an indicator that the Control ECU is ready to receive */
	UART_sendByte(CONTROL_READY_TO_RECEIVE);
    11a6:	8a ea       	ldi	r24, 0xAA	; 170
    11a8:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_sendByte>

	/* Receiving password by UART */
	for (counter = 0; counter < PASSWORD_SIZE; counter ++){
    11ac:	19 82       	std	Y+1, r1	; 0x01
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <receivePassword+0x3c>
		password_Ptr [counter] = UART_recieveByte();
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	8c 01       	movw	r16, r24
    11bc:	02 0f       	add	r16, r18
    11be:	13 1f       	adc	r17, r19
    11c0:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <UART_recieveByte>
    11c4:	f8 01       	movw	r30, r16
    11c6:	80 83       	st	Z, r24

	/* Sending an indicator that the Control ECU is ready to receive */
	UART_sendByte(CONTROL_READY_TO_RECEIVE);

	/* Receiving password by UART */
	for (counter = 0; counter < PASSWORD_SIZE; counter ++){
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	85 30       	cpi	r24, 0x05	; 5
    11d2:	70 f3       	brcs	.-36     	; 0x11b0 <receivePassword+0x1e>
		password_Ptr [counter] = UART_recieveByte();
	}
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	08 95       	ret

000011e4 <savePassword>:

/* Description:
 * Function to write the received password in the EEPROM
 */
void savePassword(void){
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	2f 97       	sbiw	r28, 0x0f	; 15
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
	uint8 counter;

	/* Writing the password in 5 consecutive bytes in EEPROM  */
	for (counter = 0; counter < PASSWORD_SIZE; counter++){
    11f8:	1f 86       	std	Y+15, r1	; 0x0f
    11fa:	85 c0       	rjmp	.+266    	; 0x1306 <savePassword+0x122>
		EEPROM_writeByte(EEPROM_PASSWORD_START_BYTE + counter, g_password[counter]);
    11fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	ac 01       	movw	r20, r24
    1206:	8f 85       	ldd	r24, Y+15	; 0x0f
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	fc 01       	movw	r30, r24
    120e:	e6 57       	subi	r30, 0x76	; 118
    1210:	fe 4f       	sbci	r31, 0xFE	; 254
    1212:	20 81       	ld	r18, Z
    1214:	ca 01       	movw	r24, r20
    1216:	62 2f       	mov	r22, r18
    1218:	0e 94 87 0c 	call	0x190e	; 0x190e <EEPROM_writeByte>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a0 e2       	ldi	r26, 0x20	; 32
    1222:	b1 e4       	ldi	r27, 0x41	; 65
    1224:	8b 87       	std	Y+11, r24	; 0x0b
    1226:	9c 87       	std	Y+12, r25	; 0x0c
    1228:	ad 87       	std	Y+13, r26	; 0x0d
    122a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122c:	6b 85       	ldd	r22, Y+11	; 0x0b
    122e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a ef       	ldi	r20, 0xFA	; 250
    123a:	54 e4       	ldi	r21, 0x44	; 68
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8f 83       	std	Y+7, r24	; 0x07
    1246:	98 87       	std	Y+8, r25	; 0x08
    1248:	a9 87       	std	Y+9, r26	; 0x09
    124a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124c:	6f 81       	ldd	r22, Y+7	; 0x07
    124e:	78 85       	ldd	r23, Y+8	; 0x08
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e8       	ldi	r20, 0x80	; 128
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1260:	88 23       	and	r24, r24
    1262:	2c f4       	brge	.+10     	; 0x126e <savePassword+0x8a>
		__ticks = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <savePassword+0x108>
	else if (__tmp > 65535)
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1282:	18 16       	cp	r1, r24
    1284:	4c f5       	brge	.+82     	; 0x12d8 <savePassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1286:	6b 85       	ldd	r22, Y+11	; 0x0b
    1288:	7c 85       	ldd	r23, Y+12	; 0x0c
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <savePassword+0xea>
    12b0:	88 ec       	ldi	r24, 0xC8	; 200
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <savePassword+0xd8>
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <savePassword+0xcc>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <savePassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9e 83       	std	Y+6, r25	; 0x06
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <savePassword+0x114>
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
 */
void savePassword(void){
	uint8 counter;

	/* Writing the password in 5 consecutive bytes in EEPROM  */
	for (counter = 0; counter < PASSWORD_SIZE; counter++){
    1300:	8f 85       	ldd	r24, Y+15	; 0x0f
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	8f 87       	std	Y+15, r24	; 0x0f
    1306:	8f 85       	ldd	r24, Y+15	; 0x0f
    1308:	85 30       	cpi	r24, 0x05	; 5
    130a:	08 f4       	brcc	.+2      	; 0x130e <savePassword+0x12a>
    130c:	77 cf       	rjmp	.-274    	; 0x11fc <savePassword+0x18>
		EEPROM_writeByte(EEPROM_PASSWORD_START_BYTE + counter, g_password[counter]);
		_delay_ms(10);
	}
}
    130e:	2f 96       	adiw	r28, 0x0f	; 15
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <lockSystemAction>:

/* Description:
 * Function to activate buzzer and freeze system for 1 minute
 */
void lockSystemAction(void){
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	2f 97       	sbiw	r28, 0x0f	; 15
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
	uint8 counter;
	Buzzer_on();
    1334:	0e 94 31 0c 	call	0x1862	; 0x1862 <Buzzer_on>
	for (counter = 0; counter < 60; counter++){
    1338:	1f 86       	std	Y+15, r1	; 0x0f
    133a:	75 c0       	rjmp	.+234    	; 0x1426 <lockSystemAction+0x106>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	aa e7       	ldi	r26, 0x7A	; 122
    1342:	b4 e4       	ldi	r27, 0x44	; 68
    1344:	8b 87       	std	Y+11, r24	; 0x0b
    1346:	9c 87       	std	Y+12, r25	; 0x0c
    1348:	ad 87       	std	Y+13, r26	; 0x0d
    134a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134c:	6b 85       	ldd	r22, Y+11	; 0x0b
    134e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1350:	8d 85       	ldd	r24, Y+13	; 0x0d
    1352:	9e 85       	ldd	r25, Y+14	; 0x0e
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	4a ef       	ldi	r20, 0xFA	; 250
    135a:	54 e4       	ldi	r21, 0x44	; 68
    135c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	8f 83       	std	Y+7, r24	; 0x07
    1366:	98 87       	std	Y+8, r25	; 0x08
    1368:	a9 87       	std	Y+9, r26	; 0x09
    136a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    136c:	6f 81       	ldd	r22, Y+7	; 0x07
    136e:	78 85       	ldd	r23, Y+8	; 0x08
    1370:	89 85       	ldd	r24, Y+9	; 0x09
    1372:	9a 85       	ldd	r25, Y+10	; 0x0a
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e8       	ldi	r20, 0x80	; 128
    137a:	5f e3       	ldi	r21, 0x3F	; 63
    137c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1380:	88 23       	and	r24, r24
    1382:	2c f4       	brge	.+10     	; 0x138e <lockSystemAction+0x6e>
		__ticks = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9e 83       	std	Y+6, r25	; 0x06
    138a:	8d 83       	std	Y+5, r24	; 0x05
    138c:	3f c0       	rjmp	.+126    	; 0x140c <lockSystemAction+0xec>
	else if (__tmp > 65535)
    138e:	6f 81       	ldd	r22, Y+7	; 0x07
    1390:	78 85       	ldd	r23, Y+8	; 0x08
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	3f ef       	ldi	r19, 0xFF	; 255
    139a:	4f e7       	ldi	r20, 0x7F	; 127
    139c:	57 e4       	ldi	r21, 0x47	; 71
    139e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13a2:	18 16       	cp	r1, r24
    13a4:	4c f5       	brge	.+82     	; 0x13f8 <lockSystemAction+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e2       	ldi	r20, 0x20	; 32
    13b4:	51 e4       	ldi	r21, 0x41	; 65
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	0f c0       	rjmp	.+30     	; 0x13ee <lockSystemAction+0xce>
    13d0:	88 ec       	ldi	r24, 0xC8	; 200
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9c 83       	std	Y+4, r25	; 0x04
    13d6:	8b 83       	std	Y+3, r24	; 0x03
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <lockSystemAction+0xbc>
    13e0:	9c 83       	std	Y+4, r25	; 0x04
    13e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f7       	brne	.-38     	; 0x13d0 <lockSystemAction+0xb0>
    13f6:	14 c0       	rjmp	.+40     	; 0x1420 <lockSystemAction+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9e 83       	std	Y+6, r25	; 0x06
    140a:	8d 83       	std	Y+5, r24	; 0x05
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <lockSystemAction+0xf8>
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	8f 85       	ldd	r24, Y+15	; 0x0f
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	8f 87       	std	Y+15, r24	; 0x0f
    1426:	8f 85       	ldd	r24, Y+15	; 0x0f
    1428:	8c 33       	cpi	r24, 0x3C	; 60
    142a:	08 f4       	brcc	.+2      	; 0x142e <lockSystemAction+0x10e>
    142c:	87 cf       	rjmp	.-242    	; 0x133c <lockSystemAction+0x1c>
		_delay_ms(1000);
	}
	Buzzer_off();
    142e:	0e 94 3d 0c 	call	0x187a	; 0x187a <Buzzer_off>
}
    1432:	2f 96       	adiw	r28, 0x0f	; 15
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <processUnlockDoor>:

/*
 * Description:
 * Call-back function to process interrupt by the timer for unlocking door
 */
void processUnlockDoor(void){
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
	g_unlockDoorInt++;
    144c:	80 91 89 01 	lds	r24, 0x0189
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	80 93 89 01 	sts	0x0189, r24
}
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <unlockDoor>:


/* Description:
 * Function to unlock door for 15 seconds
 */
void unlockDoor(void){
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	2b 97       	sbiw	r28, 0x0b	; 11
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
	g_unlockDoorInt = 0;
    1470:	10 92 89 01 	sts	0x0189, r1

	/* Configurations for Timer1 to generate an interrupt every 7.5 seconds */
	Timer1_ConfigType Timer1_UnlockDoorConfigs = {0, 58594, F_CPU_1024, COMPARE_MODE};
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	98 87       	std	Y+8, r25	; 0x08
    147a:	8f 83       	std	Y+7, r24	; 0x07
    147c:	e4 e7       	ldi	r30, 0x74	; 116
    147e:	f1 e0       	ldi	r31, 0x01	; 1
    1480:	fa 87       	std	Y+10, r31	; 0x0a
    1482:	e9 87       	std	Y+9, r30	; 0x09
    1484:	f6 e0       	ldi	r31, 0x06	; 6
    1486:	fb 87       	std	Y+11, r31	; 0x0b
    1488:	e9 85       	ldd	r30, Y+9	; 0x09
    148a:	fa 85       	ldd	r31, Y+10	; 0x0a
    148c:	00 80       	ld	r0, Z
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	9a 87       	std	Y+10, r25	; 0x0a
    1496:	89 87       	std	Y+9, r24	; 0x09
    1498:	ef 81       	ldd	r30, Y+7	; 0x07
    149a:	f8 85       	ldd	r31, Y+8	; 0x08
    149c:	00 82       	st	Z, r0
    149e:	8f 81       	ldd	r24, Y+7	; 0x07
    14a0:	98 85       	ldd	r25, Y+8	; 0x08
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	98 87       	std	Y+8, r25	; 0x08
    14a6:	8f 83       	std	Y+7, r24	; 0x07
    14a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14aa:	91 50       	subi	r25, 0x01	; 1
    14ac:	9b 87       	std	Y+11, r25	; 0x0b
    14ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    14b0:	ee 23       	and	r30, r30
    14b2:	51 f7       	brne	.-44     	; 0x1488 <unlockDoor+0x2c>

	/* Sending the specified call back function to unlock door to Timer1 ISR */
	Timer1_setCallBack(processUnlockDoor);
    14b4:	82 e2       	ldi	r24, 0x22	; 34
    14b6:	9a e0       	ldi	r25, 0x0A	; 10
    14b8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Timer1_setCallBack>

	/* Timer1 Initializing */
	Timer1_init(&Timer1_UnlockDoorConfigs);
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <Timer1_init>

	/* Rotating the motor CW */
	DcMotor_Rotate(CW, 50);
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	62 e3       	ldi	r22, 0x32	; 50
    14c8:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <DcMotor_Rotate>

	/* Wait until Timer1 counts 15 seconds*/
	while (g_unlockDoorInt != 2){}
    14cc:	80 91 89 01 	lds	r24, 0x0189
    14d0:	82 30       	cpi	r24, 0x02	; 2
    14d2:	e1 f7       	brne	.-8      	; 0x14cc <unlockDoor+0x70>

	/* Stopping the Timer */
	Timer1_deInit();
    14d4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <Timer1_deInit>

	/* Stopping the Motor */
	DcMotor_Rotate(STOP, 0);
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <DcMotor_Rotate>

}
    14e0:	2b 96       	adiw	r28, 0x0b	; 11
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <processHoldDoor>:

/*
 * Description:
 * Function to process interrupt by timer in case of holding door
 */
void processHoldDoor(void){
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
	g_holdDoorInt++;
    14fa:	80 91 95 01 	lds	r24, 0x0195
    14fe:	8f 5f       	subi	r24, 0xFF	; 255
    1500:	80 93 95 01 	sts	0x0195, r24
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <holdDoor>:

/*
 * Description:
 * Function to hold the door for 3 seconds
 */
void holdDoor(void){
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	2b 97       	sbiw	r28, 0x0b	; 11
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
	g_holdDoorInt = 0;
    151e:	10 92 95 01 	sts	0x0195, r1

	/* Configurations for Timer1 to generate an interrupt every 3 seconds */
	Timer1_ConfigType Timer1_HoldDoorConfigs = {0, 23438, F_CPU_1024, COMPARE_MODE};
    1522:	ce 01       	movw	r24, r28
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	98 87       	std	Y+8, r25	; 0x08
    1528:	8f 83       	std	Y+7, r24	; 0x07
    152a:	ea e7       	ldi	r30, 0x7A	; 122
    152c:	f1 e0       	ldi	r31, 0x01	; 1
    152e:	fa 87       	std	Y+10, r31	; 0x0a
    1530:	e9 87       	std	Y+9, r30	; 0x09
    1532:	f6 e0       	ldi	r31, 0x06	; 6
    1534:	fb 87       	std	Y+11, r31	; 0x0b
    1536:	e9 85       	ldd	r30, Y+9	; 0x09
    1538:	fa 85       	ldd	r31, Y+10	; 0x0a
    153a:	00 80       	ld	r0, Z
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	9a 87       	std	Y+10, r25	; 0x0a
    1544:	89 87       	std	Y+9, r24	; 0x09
    1546:	ef 81       	ldd	r30, Y+7	; 0x07
    1548:	f8 85       	ldd	r31, Y+8	; 0x08
    154a:	00 82       	st	Z, r0
    154c:	8f 81       	ldd	r24, Y+7	; 0x07
    154e:	98 85       	ldd	r25, Y+8	; 0x08
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	98 87       	std	Y+8, r25	; 0x08
    1554:	8f 83       	std	Y+7, r24	; 0x07
    1556:	9b 85       	ldd	r25, Y+11	; 0x0b
    1558:	91 50       	subi	r25, 0x01	; 1
    155a:	9b 87       	std	Y+11, r25	; 0x0b
    155c:	eb 85       	ldd	r30, Y+11	; 0x0b
    155e:	ee 23       	and	r30, r30
    1560:	51 f7       	brne	.-44     	; 0x1536 <holdDoor+0x2c>

	/* Sending the specified call back function to door door to Timer1 ISR */
	Timer1_setCallBack(processHoldDoor);
    1562:	89 e7       	ldi	r24, 0x79	; 121
    1564:	9a e0       	ldi	r25, 0x0A	; 10
    1566:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Timer1_setCallBack>

	/* Stopping the Motor */
	DcMotor_Rotate(STOP, 0);
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <DcMotor_Rotate>

	/* Timer1 Initializing */
	Timer1_init(&Timer1_HoldDoorConfigs);
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <Timer1_init>

	/* Wait until Timer1 counts 3 seconds */
	while (g_holdDoorInt != 1){}
    157a:	80 91 95 01 	lds	r24, 0x0195
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	e1 f7       	brne	.-8      	; 0x157a <holdDoor+0x70>

	/* Stopping the Timer */
	Timer1_deInit();
    1582:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <Timer1_deInit>
}
    1586:	2b 96       	adiw	r28, 0x0b	; 11
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <processLockDoor>:

/*
 * Description:
 * Call-back function to process interrupt by the timer for locking door
 */
void processLockDoor(void){
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
	g_lockDoorInt++;
    15a0:	80 91 94 01 	lds	r24, 0x0194
    15a4:	8f 5f       	subi	r24, 0xFF	; 255
    15a6:	80 93 94 01 	sts	0x0194, r24
}
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <lockDoor>:


/* Description:
 * Function to unlock door for 15 seconds
 */
void lockDoor(void){
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	2b 97       	sbiw	r28, 0x0b	; 11
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
	g_lockDoorInt = 0;
    15c4:	10 92 94 01 	sts	0x0194, r1

	/* Configurations for Timer1 to generate an interrupt every 7.5 seconds */
	Timer1_ConfigType Timer1_lockDoorConfigs = {0, 58594, F_CPU_1024, COMPARE_MODE};
    15c8:	ce 01       	movw	r24, r28
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	98 87       	std	Y+8, r25	; 0x08
    15ce:	8f 83       	std	Y+7, r24	; 0x07
    15d0:	e0 e8       	ldi	r30, 0x80	; 128
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	fa 87       	std	Y+10, r31	; 0x0a
    15d6:	e9 87       	std	Y+9, r30	; 0x09
    15d8:	f6 e0       	ldi	r31, 0x06	; 6
    15da:	fb 87       	std	Y+11, r31	; 0x0b
    15dc:	e9 85       	ldd	r30, Y+9	; 0x09
    15de:	fa 85       	ldd	r31, Y+10	; 0x0a
    15e0:	00 80       	ld	r0, Z
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	9a 87       	std	Y+10, r25	; 0x0a
    15ea:	89 87       	std	Y+9, r24	; 0x09
    15ec:	ef 81       	ldd	r30, Y+7	; 0x07
    15ee:	f8 85       	ldd	r31, Y+8	; 0x08
    15f0:	00 82       	st	Z, r0
    15f2:	8f 81       	ldd	r24, Y+7	; 0x07
    15f4:	98 85       	ldd	r25, Y+8	; 0x08
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	98 87       	std	Y+8, r25	; 0x08
    15fa:	8f 83       	std	Y+7, r24	; 0x07
    15fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    15fe:	91 50       	subi	r25, 0x01	; 1
    1600:	9b 87       	std	Y+11, r25	; 0x0b
    1602:	eb 85       	ldd	r30, Y+11	; 0x0b
    1604:	ee 23       	and	r30, r30
    1606:	51 f7       	brne	.-44     	; 0x15dc <lockDoor+0x2c>

	/* Sending the specified call back function to lock door to Timer1 ISR */
	Timer1_setCallBack(processLockDoor);
    1608:	8c ec       	ldi	r24, 0xCC	; 204
    160a:	9a e0       	ldi	r25, 0x0A	; 10
    160c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Timer1_setCallBack>

	/* Timer1 Initializing */
	Timer1_init(&Timer1_lockDoorConfigs);
    1610:	ce 01       	movw	r24, r28
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <Timer1_init>

	/* Rotating the motor A_CW */
	DcMotor_Rotate(A_CW, 50);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	62 e3       	ldi	r22, 0x32	; 50
    161c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <DcMotor_Rotate>

	/* Wait until Timer1 counts 15 seconds*/
	while (g_lockDoorInt != 2){}
    1620:	80 91 94 01 	lds	r24, 0x0194
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	e1 f7       	brne	.-8      	; 0x1620 <lockDoor+0x70>

	/* Stopping the Timer */
	Timer1_deInit();
    1628:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <Timer1_deInit>

	/* Stopping the Motor */
	DcMotor_Rotate(STOP, 0);
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <DcMotor_Rotate>
}
    1634:	2b 96       	adiw	r28, 0x0b	; 11
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <verifyPassword>:

/* Description:
 * Function to verify password
 */
void verifyPassword(void){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	2f 97       	sbiw	r28, 0x0f	; 15
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
	g_passwordConfirmStats = PASSWORD_UNCONFIRMED;
    165a:	10 92 86 01 	sts	0x0186, r1
	uint8 passwordErrorCount = 0;
    165e:	1f 86       	std	Y+15, r1	; 0x0f
    1660:	94 c0       	rjmp	.+296    	; 0x178a <verifyPassword+0x144>

	while (!g_passwordConfirmStats){
		/* Locking the system if user entered 3 unmatched password */
		if (passwordErrorCount == 3){
    1662:	8f 85       	ldd	r24, Y+15	; 0x0f
    1664:	83 30       	cpi	r24, 0x03	; 3
    1666:	19 f4       	brne	.+6      	; 0x166e <verifyPassword+0x28>
			lockSystemAction();
    1668:	0e 94 90 09 	call	0x1320	; 0x1320 <lockSystemAction>
    166c:	93 c0       	rjmp	.+294    	; 0x1794 <verifyPassword+0x14e>
			return;
		}

		/* Receive password */
		receivePassword(&g_password);
    166e:	8a e8       	ldi	r24, 0x8A	; 138
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	0e 94 c9 08 	call	0x1192	; 0x1192 <receivePassword>
		g_passwordConfirmStats = checkPassword();
    1676:	0e 94 e7 07 	call	0xfce	; 0xfce <checkPassword>
    167a:	80 93 86 01 	sts	0x0186, r24

		/* Activating the alarm if the password is wrong */
		if (!g_passwordConfirmStats){
    167e:	80 91 86 01 	lds	r24, 0x0186
    1682:	88 23       	and	r24, r24
    1684:	09 f0       	breq	.+2      	; 0x1688 <verifyPassword+0x42>
    1686:	79 c0       	rjmp	.+242    	; 0x177a <verifyPassword+0x134>
			passwordErrorCount++;
    1688:	8f 85       	ldd	r24, Y+15	; 0x0f
    168a:	8f 5f       	subi	r24, 0xFF	; 255
    168c:	8f 87       	std	Y+15, r24	; 0x0f
			Buzzer_on();
    168e:	0e 94 31 0c 	call	0x1862	; 0x1862 <Buzzer_on>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	aa e7       	ldi	r26, 0x7A	; 122
    1698:	b4 e4       	ldi	r27, 0x44	; 68
    169a:	8b 87       	std	Y+11, r24	; 0x0b
    169c:	9c 87       	std	Y+12, r25	; 0x0c
    169e:	ad 87       	std	Y+13, r26	; 0x0d
    16a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4a ef       	ldi	r20, 0xFA	; 250
    16b0:	54 e4       	ldi	r21, 0x44	; 68
    16b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	8f 83       	std	Y+7, r24	; 0x07
    16bc:	98 87       	std	Y+8, r25	; 0x08
    16be:	a9 87       	std	Y+9, r26	; 0x09
    16c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e8       	ldi	r20, 0x80	; 128
    16d0:	5f e3       	ldi	r21, 0x3F	; 63
    16d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <verifyPassword+0x9e>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <verifyPassword+0x11c>
	else if (__tmp > 65535)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	4c f5       	brge	.+82     	; 0x174e <verifyPassword+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1700:	8d 85       	ldd	r24, Y+13	; 0x0d
    1702:	9e 85       	ldd	r25, Y+14	; 0x0e
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <verifyPassword+0xfe>
    1726:	88 ec       	ldi	r24, 0xC8	; 200
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <verifyPassword+0xec>
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	69 f7       	brne	.-38     	; 0x1726 <verifyPassword+0xe0>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <verifyPassword+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <verifyPassword+0x128>
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Buzzer_off();
    1776:	0e 94 3d 0c 	call	0x187a	; 0x187a <Buzzer_off>
		}

		while (UART_recieveByte() != HMI_READY_TO_RECEIVE){}
    177a:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <UART_recieveByte>
    177e:	8b 3b       	cpi	r24, 0xBB	; 187
    1780:	e1 f7       	brne	.-8      	; 0x177a <verifyPassword+0x134>
		UART_sendByte(g_passwordConfirmStats);
    1782:	80 91 86 01 	lds	r24, 0x0186
    1786:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_sendByte>
 */
void verifyPassword(void){
	g_passwordConfirmStats = PASSWORD_UNCONFIRMED;
	uint8 passwordErrorCount = 0;

	while (!g_passwordConfirmStats){
    178a:	80 91 86 01 	lds	r24, 0x0186
    178e:	88 23       	and	r24, r24
    1790:	09 f4       	brne	.+2      	; 0x1794 <verifyPassword+0x14e>
    1792:	67 cf       	rjmp	.-306    	; 0x1662 <verifyPassword+0x1c>
		}

		while (UART_recieveByte() != HMI_READY_TO_RECEIVE){}
		UART_sendByte(g_passwordConfirmStats);
	}
}
    1794:	2f 96       	adiw	r28, 0x0f	; 15
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <openDoorAction>:


/* Description:
 * Function to take action in case user choose to open door
 */
void openDoorAction(void){
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62

	verifyPassword();
    17ae:	0e 94 23 0b 	call	0x1646	; 0x1646 <verifyPassword>

	if (g_passwordConfirmStats){
    17b2:	80 91 86 01 	lds	r24, 0x0186
    17b6:	88 23       	and	r24, r24
    17b8:	31 f0       	breq	.+12     	; 0x17c6 <openDoorAction+0x20>
		unlockDoor();
    17ba:	0e 94 2e 0a 	call	0x145c	; 0x145c <unlockDoor>
		holdDoor();
    17be:	0e 94 85 0a 	call	0x150a	; 0x150a <holdDoor>
		lockDoor();
    17c2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <lockDoor>
	}
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <changePasswordProcess>:

/*
 * Description:
 * Function to change system password
 */
void changePasswordProcess(void){
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62

	verifyPassword();
    17d4:	0e 94 23 0b 	call	0x1646	; 0x1646 <verifyPassword>

	if (g_passwordConfirmStats){
    17d8:	80 91 86 01 	lds	r24, 0x0186
    17dc:	88 23       	and	r24, r24
    17de:	59 f0       	breq	.+22     	; 0x17f6 <changePasswordProcess+0x2a>
		g_passwordConfirmStats = PASSWORD_UNCONFIRMED;
    17e0:	10 92 86 01 	sts	0x0186, r1
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <changePasswordProcess+0x1e>

		while (!g_passwordConfirmStats){
			createPassword();
    17e6:	0e 94 8e 08 	call	0x111c	; 0x111c <createPassword>
	verifyPassword();

	if (g_passwordConfirmStats){
		g_passwordConfirmStats = PASSWORD_UNCONFIRMED;

		while (!g_passwordConfirmStats){
    17ea:	80 91 86 01 	lds	r24, 0x0186
    17ee:	88 23       	and	r24, r24
    17f0:	d1 f3       	breq	.-12     	; 0x17e6 <changePasswordProcess+0x1a>
			createPassword();
		}
		savePassword();
    17f2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <savePassword>
	}
}
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <processOption>:


/* Description:
 * Function to receive option from HMI ECU and take an action based on it
 */
void processOption(void){
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <processOption+0x6>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	uint8 option;
	/* Sending an indicator that the Control ECU is ready to receive */
	UART_sendByte(CONTROL_READY_TO_RECEIVE);
    1808:	8a ea       	ldi	r24, 0xAA	; 170
    180a:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_sendByte>
	/* Receiving option from HMI ECU */
	option = UART_recieveByte();
    180e:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <UART_recieveByte>
    1812:	89 83       	std	Y+1, r24	; 0x01

	switch (option){
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	3b 83       	std	Y+3, r19	; 0x03
    181c:	2a 83       	std	Y+2, r18	; 0x02
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
    1822:	8b 32       	cpi	r24, 0x2B	; 43
    1824:	91 05       	cpc	r25, r1
    1826:	31 f0       	breq	.+12     	; 0x1834 <processOption+0x38>
    1828:	2a 81       	ldd	r18, Y+2	; 0x02
    182a:	3b 81       	ldd	r19, Y+3	; 0x03
    182c:	2d 32       	cpi	r18, 0x2D	; 45
    182e:	31 05       	cpc	r19, r1
    1830:	21 f0       	breq	.+8      	; 0x183a <processOption+0x3e>
    1832:	05 c0       	rjmp	.+10     	; 0x183e <processOption+0x42>
	case '+' :
		openDoorAction();
    1834:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <openDoorAction>
    1838:	02 c0       	rjmp	.+4      	; 0x183e <processOption+0x42>
		break;

	case '-' :
		changePasswordProcess();
    183a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <changePasswordProcess>
		break;
	}
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <Buzzer_init>:
#include "buzzer.h"
#include "gpio.h"
/*******************************************************************************
 *								Functions Definitions
 *******************************************************************************/
void Buzzer_init(void){
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_setupPinDirection>
}
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <Buzzer_on>:

void Buzzer_on(void){
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	41 e0       	ldi	r20, 0x01	; 1
    1870:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
}
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <Buzzer_off>:

void Buzzer_off(void){
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
}
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <DcMotor_Init>:
/*
 * Description:
 * Function to setup the direction for the two motor pins
 * The Motor is stopped at the beginning
 * */
void DcMotor_Init(void){
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setting the direction of motor direction pins in PORTB to output
	 * */
	GPIO_setupPinDirection(PORTB_ID, MOTOR_PIN_IN1, PIN_OUTPUT);
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, MOTOR_PIN_IN2, PIN_OUTPUT);
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_setupPinDirection>

	/*
	 * Stopping the motor at the beginning by writing logic zero to the two motor pins
	 * */
	GPIO_writePin(PORTB_ID, MOTOR_PIN_IN1, LOGIC_LOW);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
	GPIO_writePin(PORTB_ID, MOTOR_PIN_IN2, LOGIC_LOW);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
}
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <DcMotor_Rotate>:
/*
 * Description:
 * Function to choose the direction and state of the DC Motor (CW, ACW, Stop)
 * Sets the speed of the motor based on the required PWM signal sent
 * */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <DcMotor_Rotate+0x6>
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Clearing the motor direction pins
	 * */
	GPIO_writePin(PORTB_ID, MOTOR_PIN_IN1, LOGIC_LOW);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
	GPIO_writePin(PORTB_ID, MOTOR_PIN_IN2, LOGIC_LOW);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>

	/*Setting the motor direction pins in PORTB to the specified state*/
	PORTB |= (state);
    18ea:	a8 e3       	ldi	r26, 0x38	; 56
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e8 e3       	ldi	r30, 0x38	; 56
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	90 81       	ld	r25, Z
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	89 2b       	or	r24, r25
    18f8:	8c 93       	st	X, r24

	/*
	 * Sending the specified speed value to TIMER0 to generate a PWM signal
	 * on PC0 which will control the motor speed */
	PWM_Timer0_Start(speed);
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 93 15 	call	0x2b26	; 0x2b26 <PWM_Timer0_Start>
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <EEPROM_writeByte>:
 **************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	00 d0       	rcall	.+0      	; 0x1914 <EEPROM_writeByte+0x6>
    1914:	00 d0       	rcall	.+0      	; 0x1916 <EEPROM_writeByte+0x8>
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1920:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1924:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    1928:	88 30       	cpi	r24, 0x08	; 8
    192a:	11 f0       	breq	.+4      	; 0x1930 <EEPROM_writeByte+0x22>
        return ERROR;
    192c:	1c 82       	std	Y+4, r1	; 0x04
    192e:	28 c0       	rjmp	.+80     	; 0x1980 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	80 70       	andi	r24, 0x00	; 0
    1936:	97 70       	andi	r25, 0x07	; 7
    1938:	88 0f       	add	r24, r24
    193a:	89 2f       	mov	r24, r25
    193c:	88 1f       	adc	r24, r24
    193e:	99 0b       	sbc	r25, r25
    1940:	91 95       	neg	r25
    1942:	80 6a       	ori	r24, 0xA0	; 160
    1944:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1948:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    194c:	88 31       	cpi	r24, 0x18	; 24
    194e:	11 f0       	breq	.+4      	; 0x1954 <EEPROM_writeByte+0x46>
        return ERROR;
    1950:	1c 82       	std	Y+4, r1	; 0x04
    1952:	16 c0       	rjmp	.+44     	; 0x1980 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    195a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    195e:	88 32       	cpi	r24, 0x28	; 40
    1960:	11 f0       	breq	.+4      	; 0x1966 <EEPROM_writeByte+0x58>
        return ERROR;
    1962:	1c 82       	std	Y+4, r1	; 0x04
    1964:	0d c0       	rjmp	.+26     	; 0x1980 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    196c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    1970:	88 32       	cpi	r24, 0x28	; 40
    1972:	11 f0       	breq	.+4      	; 0x1978 <EEPROM_writeByte+0x6a>
        return ERROR;
    1974:	1c 82       	std	Y+4, r1	; 0x04
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1978:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_stop>

    return SUCCESS;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	8c 83       	std	Y+4, r24	; 0x04
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <EEPROM_readByte+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <EEPROM_readByte+0x8>
    1998:	0f 92       	push	r0
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	7c 83       	std	Y+4, r23	; 0x04
    19a4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    19a6:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    19aa:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    19ae:	88 30       	cpi	r24, 0x08	; 8
    19b0:	11 f0       	breq	.+4      	; 0x19b6 <EEPROM_readByte+0x26>
        return ERROR;
    19b2:	1d 82       	std	Y+5, r1	; 0x05
    19b4:	44 c0       	rjmp	.+136    	; 0x1a3e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ba:	80 70       	andi	r24, 0x00	; 0
    19bc:	97 70       	andi	r25, 0x07	; 7
    19be:	88 0f       	add	r24, r24
    19c0:	89 2f       	mov	r24, r25
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 0b       	sbc	r25, r25
    19c6:	91 95       	neg	r25
    19c8:	80 6a       	ori	r24, 0xA0	; 160
    19ca:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    19ce:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    19d2:	88 31       	cpi	r24, 0x18	; 24
    19d4:	11 f0       	breq	.+4      	; 0x19da <EEPROM_readByte+0x4a>
        return ERROR;
    19d6:	1d 82       	std	Y+5, r1	; 0x05
    19d8:	32 c0       	rjmp	.+100    	; 0x1a3e <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    19e0:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    19e4:	88 32       	cpi	r24, 0x28	; 40
    19e6:	11 f0       	breq	.+4      	; 0x19ec <EEPROM_readByte+0x5c>
        return ERROR;
    19e8:	1d 82       	std	Y+5, r1	; 0x05
    19ea:	29 c0       	rjmp	.+82     	; 0x1a3e <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    19ec:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    19f0:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    19f4:	80 31       	cpi	r24, 0x10	; 16
    19f6:	11 f0       	breq	.+4      	; 0x19fc <EEPROM_readByte+0x6c>
        return ERROR;
    19f8:	1d 82       	std	Y+5, r1	; 0x05
    19fa:	21 c0       	rjmp	.+66     	; 0x1a3e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	80 70       	andi	r24, 0x00	; 0
    1a02:	97 70       	andi	r25, 0x07	; 7
    1a04:	88 0f       	add	r24, r24
    1a06:	89 2f       	mov	r24, r25
    1a08:	88 1f       	adc	r24, r24
    1a0a:	99 0b       	sbc	r25, r25
    1a0c:	91 95       	neg	r25
    1a0e:	81 6a       	ori	r24, 0xA1	; 161
    1a10:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1a14:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    1a18:	80 34       	cpi	r24, 0x40	; 64
    1a1a:	11 f0       	breq	.+4      	; 0x1a20 <EEPROM_readByte+0x90>
        return ERROR;
    1a1c:	1d 82       	std	Y+5, r1	; 0x05
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1a20:	0e 94 31 17 	call	0x2e62	; 0x2e62 <TWI_readByteWithNACK>
    1a24:	eb 81       	ldd	r30, Y+3	; 0x03
    1a26:	fc 81       	ldd	r31, Y+4	; 0x04
    1a28:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1a2a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <TWI_getStatus>
    1a2e:	88 35       	cpi	r24, 0x58	; 88
    1a30:	11 f0       	breq	.+4      	; 0x1a36 <EEPROM_readByte+0xa6>
        return ERROR;
    1a32:	1d 82       	std	Y+5, r1	; 0x05
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1a36:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_stop>

    return SUCCESS;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <GPIO_setupPinDirection>:

/***************************************************************************
 *								Functions Definitions
 * ************************************************************************/

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirection_Type direction){
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <GPIO_setupPinDirection+0x6>
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <GPIO_setupPinDirection+0x8>
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	6a 83       	std	Y+2, r22	; 0x02
    1a62:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS) || (port_num >= NUM_OF_PORTS))
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	88 30       	cpi	r24, 0x08	; 8
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <GPIO_setupPinDirection+0x1c>
    1a6a:	d5 c0       	rjmp	.+426    	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	84 30       	cpi	r24, 0x04	; 4
    1a70:	08 f0       	brcs	.+2      	; 0x1a74 <GPIO_setupPinDirection+0x24>
    1a72:	d1 c0       	rjmp	.+418    	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else {
		switch(port_num){
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	3d 83       	std	Y+5, r19	; 0x05
    1a7c:	2c 83       	std	Y+4, r18	; 0x04
    1a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a80:	9d 81       	ldd	r25, Y+5	; 0x05
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	91 05       	cpc	r25, r1
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <GPIO_setupPinDirection+0x3a>
    1a88:	43 c0       	rjmp	.+134    	; 0x1b10 <GPIO_setupPinDirection+0xc0>
    1a8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <GPIO_setupPinDirection+0x4e>
    1a94:	8c 81       	ldd	r24, Y+4	; 0x04
    1a96:	9d 81       	ldd	r25, Y+5	; 0x05
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	71 f0       	breq	.+28     	; 0x1ab8 <GPIO_setupPinDirection+0x68>
    1a9c:	bc c0       	rjmp	.+376    	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
    1a9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa0:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa2:	22 30       	cpi	r18, 0x02	; 2
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <GPIO_setupPinDirection+0x5a>
    1aa8:	5f c0       	rjmp	.+190    	; 0x1b68 <GPIO_setupPinDirection+0x118>
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	83 30       	cpi	r24, 0x03	; 3
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <GPIO_setupPinDirection+0x66>
    1ab4:	85 c0       	rjmp	.+266    	; 0x1bc0 <GPIO_setupPinDirection+0x170>
    1ab6:	af c0       	rjmp	.+350    	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	a1 f4       	brne	.+40     	; 0x1ae6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1abe:	aa e3       	ldi	r26, 0x3A	; 58
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ea e3       	ldi	r30, 0x3A	; 58
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <GPIO_setupPinDirection+0x8c>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <GPIO_setupPinDirection+0x88>
    1ae0:	84 2b       	or	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	98 c0       	rjmp	.+304    	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1ae6:	aa e3       	ldi	r26, 0x3A	; 58
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	ea e3       	ldi	r30, 0x3A	; 58
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	48 2f       	mov	r20, r24
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <GPIO_setupPinDirection+0xb4>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <GPIO_setupPinDirection+0xb0>
    1b08:	80 95       	com	r24
    1b0a:	84 23       	and	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	83 c0       	rjmp	.+262    	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	a1 f4       	brne	.+40     	; 0x1b3e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b16:	a7 e3       	ldi	r26, 0x37	; 55
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e7 e3       	ldi	r30, 0x37	; 55
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	48 2f       	mov	r20, r24
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 2e       	mov	r0, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <GPIO_setupPinDirection+0xe4>
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	0a 94       	dec	r0
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <GPIO_setupPinDirection+0xe0>
    1b38:	84 2b       	or	r24, r20
    1b3a:	8c 93       	st	X, r24
    1b3c:	6c c0       	rjmp	.+216    	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b3e:	a7 e3       	ldi	r26, 0x37	; 55
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e7 e3       	ldi	r30, 0x37	; 55
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	48 2f       	mov	r20, r24
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 2e       	mov	r0, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <GPIO_setupPinDirection+0x10c>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	0a 94       	dec	r0
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <GPIO_setupPinDirection+0x108>
    1b60:	80 95       	com	r24
    1b62:	84 23       	and	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	57 c0       	rjmp	.+174    	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	a1 f4       	brne	.+40     	; 0x1b96 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b6e:	a4 e3       	ldi	r26, 0x34	; 52
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e4 e3       	ldi	r30, 0x34	; 52
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	48 2f       	mov	r20, r24
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 2e       	mov	r0, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <GPIO_setupPinDirection+0x13c>
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <GPIO_setupPinDirection+0x138>
    1b90:	84 2b       	or	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	40 c0       	rjmp	.+128    	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1b96:	a4 e3       	ldi	r26, 0x34	; 52
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e4 e3       	ldi	r30, 0x34	; 52
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	02 2e       	mov	r0, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <GPIO_setupPinDirection+0x164>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	0a 94       	dec	r0
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <GPIO_setupPinDirection+0x160>
    1bb8:	80 95       	com	r24
    1bba:	84 23       	and	r24, r20
    1bbc:	8c 93       	st	X, r24
    1bbe:	2b c0       	rjmp	.+86     	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	a1 f4       	brne	.+40     	; 0x1bee <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1bc6:	a1 e3       	ldi	r26, 0x31	; 49
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e1 e3       	ldi	r30, 0x31	; 49
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <GPIO_setupPinDirection+0x194>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <GPIO_setupPinDirection+0x190>
    1be8:	84 2b       	or	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1bee:	a1 e3       	ldi	r26, 0x31	; 49
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e1 e3       	ldi	r30, 0x31	; 49
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <GPIO_setupPinDirection+0x1bc>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <GPIO_setupPinDirection+0x1b8>
    1c10:	80 95       	com	r24
    1c12:	84 23       	and	r24, r20
    1c14:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <GPIO_writePin>:

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <GPIO_writePin+0x6>
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <GPIO_writePin+0x8>
    1c2e:	0f 92       	push	r0
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	6a 83       	std	Y+2, r22	; 0x02
    1c38:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS) || (port_num >= NUM_OF_PORTS))
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	88 30       	cpi	r24, 0x08	; 8
    1c3e:	08 f0       	brcs	.+2      	; 0x1c42 <GPIO_writePin+0x1c>
    1c40:	d5 c0       	rjmp	.+426    	; 0x1dec <GPIO_writePin+0x1c6>
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	84 30       	cpi	r24, 0x04	; 4
    1c46:	08 f0       	brcs	.+2      	; 0x1c4a <GPIO_writePin+0x24>
    1c48:	d1 c0       	rjmp	.+418    	; 0x1dec <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	3d 83       	std	Y+5, r19	; 0x05
    1c52:	2c 83       	std	Y+4, r18	; 0x04
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	9d 81       	ldd	r25, Y+5	; 0x05
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <GPIO_writePin+0x3a>
    1c5e:	43 c0       	rjmp	.+134    	; 0x1ce6 <GPIO_writePin+0xc0>
    1c60:	2c 81       	ldd	r18, Y+4	; 0x04
    1c62:	3d 81       	ldd	r19, Y+5	; 0x05
    1c64:	22 30       	cpi	r18, 0x02	; 2
    1c66:	31 05       	cpc	r19, r1
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <GPIO_writePin+0x4e>
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	71 f0       	breq	.+28     	; 0x1c8e <GPIO_writePin+0x68>
    1c72:	bc c0       	rjmp	.+376    	; 0x1dec <GPIO_writePin+0x1c6>
    1c74:	2c 81       	ldd	r18, Y+4	; 0x04
    1c76:	3d 81       	ldd	r19, Y+5	; 0x05
    1c78:	22 30       	cpi	r18, 0x02	; 2
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <GPIO_writePin+0x5a>
    1c7e:	5f c0       	rjmp	.+190    	; 0x1d3e <GPIO_writePin+0x118>
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	9d 81       	ldd	r25, Y+5	; 0x05
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	91 05       	cpc	r25, r1
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <GPIO_writePin+0x66>
    1c8a:	85 c0       	rjmp	.+266    	; 0x1d96 <GPIO_writePin+0x170>
    1c8c:	af c0       	rjmp	.+350    	; 0x1dec <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	a1 f4       	brne	.+40     	; 0x1cbc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1c94:	ab e3       	ldi	r26, 0x3B	; 59
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	eb e3       	ldi	r30, 0x3B	; 59
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <GPIO_writePin+0x8c>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <GPIO_writePin+0x88>
    1cb6:	84 2b       	or	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	98 c0       	rjmp	.+304    	; 0x1dec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1cbc:	ab e3       	ldi	r26, 0x3B	; 59
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	eb e3       	ldi	r30, 0x3B	; 59
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <GPIO_writePin+0xb4>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <GPIO_writePin+0xb0>
    1cde:	80 95       	com	r24
    1ce0:	84 23       	and	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	83 c0       	rjmp	.+262    	; 0x1dec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	a1 f4       	brne	.+40     	; 0x1d14 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1cec:	a8 e3       	ldi	r26, 0x38	; 56
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e8 e3       	ldi	r30, 0x38	; 56
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	48 2f       	mov	r20, r24
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 2e       	mov	r0, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <GPIO_writePin+0xe4>
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	0a 94       	dec	r0
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <GPIO_writePin+0xe0>
    1d0e:	84 2b       	or	r24, r20
    1d10:	8c 93       	st	X, r24
    1d12:	6c c0       	rjmp	.+216    	; 0x1dec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d14:	a8 e3       	ldi	r26, 0x38	; 56
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e8 e3       	ldi	r30, 0x38	; 56
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	48 2f       	mov	r20, r24
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	02 2e       	mov	r0, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <GPIO_writePin+0x10c>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	0a 94       	dec	r0
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <GPIO_writePin+0x108>
    1d36:	80 95       	com	r24
    1d38:	84 23       	and	r24, r20
    1d3a:	8c 93       	st	X, r24
    1d3c:	57 c0       	rjmp	.+174    	; 0x1dec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	a1 f4       	brne	.+40     	; 0x1d6c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d44:	a5 e3       	ldi	r26, 0x35	; 53
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e5 e3       	ldi	r30, 0x35	; 53
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	48 2f       	mov	r20, r24
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 2e       	mov	r0, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <GPIO_writePin+0x13c>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <GPIO_writePin+0x138>
    1d66:	84 2b       	or	r24, r20
    1d68:	8c 93       	st	X, r24
    1d6a:	40 c0       	rjmp	.+128    	; 0x1dec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d6c:	a5 e3       	ldi	r26, 0x35	; 53
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e5 e3       	ldi	r30, 0x35	; 53
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <GPIO_writePin+0x164>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <GPIO_writePin+0x160>
    1d8e:	80 95       	com	r24
    1d90:	84 23       	and	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	2b c0       	rjmp	.+86     	; 0x1dec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	a1 f4       	brne	.+40     	; 0x1dc4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1d9c:	a2 e3       	ldi	r26, 0x32	; 50
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e2 e3       	ldi	r30, 0x32	; 50
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <GPIO_writePin+0x194>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <GPIO_writePin+0x190>
    1dbe:	84 2b       	or	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	14 c0       	rjmp	.+40     	; 0x1dec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1dc4:	a2 e3       	ldi	r26, 0x32	; 50
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e2 e3       	ldi	r30, 0x32	; 50
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <GPIO_writePin+0x1bc>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <GPIO_writePin+0x1b8>
    1de6:	80 95       	com	r24
    1de8:	84 23       	and	r24, r20
    1dea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <GPIO_readPin+0x6>
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <GPIO_readPin+0x8>
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    1e0c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e0e:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS) || (port_num >= NUM_OF_PORTS))
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	88 30       	cpi	r24, 0x08	; 8
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <GPIO_readPin+0x1c>
    1e16:	84 c0       	rjmp	.+264    	; 0x1f20 <GPIO_readPin+0x124>
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <GPIO_readPin+0x24>
    1e1e:	80 c0       	rjmp	.+256    	; 0x1f20 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{

		switch(port_num)
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	3d 83       	std	Y+5, r19	; 0x05
    1e28:	2c 83       	std	Y+4, r18	; 0x04
    1e2a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e2c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e2e:	41 30       	cpi	r20, 0x01	; 1
    1e30:	51 05       	cpc	r21, r1
    1e32:	79 f1       	breq	.+94     	; 0x1e92 <GPIO_readPin+0x96>
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	9d 81       	ldd	r25, Y+5	; 0x05
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	34 f4       	brge	.+12     	; 0x1e4a <GPIO_readPin+0x4e>
    1e3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e40:	3d 81       	ldd	r19, Y+5	; 0x05
    1e42:	21 15       	cp	r18, r1
    1e44:	31 05       	cpc	r19, r1
    1e46:	69 f0       	breq	.+26     	; 0x1e62 <GPIO_readPin+0x66>
    1e48:	6b c0       	rjmp	.+214    	; 0x1f20 <GPIO_readPin+0x124>
    1e4a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e4c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e4e:	42 30       	cpi	r20, 0x02	; 2
    1e50:	51 05       	cpc	r21, r1
    1e52:	b9 f1       	breq	.+110    	; 0x1ec2 <GPIO_readPin+0xc6>
    1e54:	8c 81       	ldd	r24, Y+4	; 0x04
    1e56:	9d 81       	ldd	r25, Y+5	; 0x05
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <GPIO_readPin+0x64>
    1e5e:	49 c0       	rjmp	.+146    	; 0x1ef2 <GPIO_readPin+0xf6>
    1e60:	5f c0       	rjmp	.+190    	; 0x1f20 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1e62:	e9 e3       	ldi	r30, 0x39	; 57
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a9 01       	movw	r20, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <GPIO_readPin+0x7e>
    1e76:	55 95       	asr	r21
    1e78:	47 95       	ror	r20
    1e7a:	8a 95       	dec	r24
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <GPIO_readPin+0x7a>
    1e7e:	ca 01       	movw	r24, r20
    1e80:	81 70       	andi	r24, 0x01	; 1
    1e82:	90 70       	andi	r25, 0x00	; 0
    1e84:	88 23       	and	r24, r24
    1e86:	19 f0       	breq	.+6      	; 0x1e8e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	49 c0       	rjmp	.+146    	; 0x1f20 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e8e:	19 82       	std	Y+1, r1	; 0x01
    1e90:	47 c0       	rjmp	.+142    	; 0x1f20 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e92:	e6 e3       	ldi	r30, 0x36	; 54
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a9 01       	movw	r20, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <GPIO_readPin+0xae>
    1ea6:	55 95       	asr	r21
    1ea8:	47 95       	ror	r20
    1eaa:	8a 95       	dec	r24
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <GPIO_readPin+0xaa>
    1eae:	ca 01       	movw	r24, r20
    1eb0:	81 70       	andi	r24, 0x01	; 1
    1eb2:	90 70       	andi	r25, 0x00	; 0
    1eb4:	88 23       	and	r24, r24
    1eb6:	19 f0       	breq	.+6      	; 0x1ebe <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	31 c0       	rjmp	.+98     	; 0x1f20 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ebe:	19 82       	std	Y+1, r1	; 0x01
    1ec0:	2f c0       	rjmp	.+94     	; 0x1f20 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ec2:	e3 e3       	ldi	r30, 0x33	; 51
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a9 01       	movw	r20, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <GPIO_readPin+0xde>
    1ed6:	55 95       	asr	r21
    1ed8:	47 95       	ror	r20
    1eda:	8a 95       	dec	r24
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <GPIO_readPin+0xda>
    1ede:	ca 01       	movw	r24, r20
    1ee0:	81 70       	andi	r24, 0x01	; 1
    1ee2:	90 70       	andi	r25, 0x00	; 0
    1ee4:	88 23       	and	r24, r24
    1ee6:	19 f0       	breq	.+6      	; 0x1eee <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	19 c0       	rjmp	.+50     	; 0x1f20 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eee:	19 82       	std	Y+1, r1	; 0x01
    1ef0:	17 c0       	rjmp	.+46     	; 0x1f20 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ef2:	e0 e3       	ldi	r30, 0x30	; 48
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a9 01       	movw	r20, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <GPIO_readPin+0x10e>
    1f06:	55 95       	asr	r21
    1f08:	47 95       	ror	r20
    1f0a:	8a 95       	dec	r24
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <GPIO_readPin+0x10a>
    1f0e:	ca 01       	movw	r24, r20
    1f10:	81 70       	andi	r24, 0x01	; 1
    1f12:	90 70       	andi	r25, 0x00	; 0
    1f14:	88 23       	and	r24, r24
    1f16:	19 f0       	breq	.+6      	; 0x1f1e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f1e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirection_Type direction)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <GPIO_setupPortDirection+0x6>
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <GPIO_setupPortDirection+0x8>
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	84 30       	cpi	r24, 0x04	; 4
    1f46:	90 f5       	brcc	.+100    	; 0x1fac <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3c 83       	std	Y+4, r19	; 0x04
    1f50:	2b 83       	std	Y+3, r18	; 0x03
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	91 05       	cpc	r25, r1
    1f5a:	d1 f0       	breq	.+52     	; 0x1f90 <GPIO_setupPortDirection+0x5e>
    1f5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f60:	22 30       	cpi	r18, 0x02	; 2
    1f62:	31 05       	cpc	r19, r1
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <GPIO_setupPortDirection+0x3e>
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <GPIO_setupPortDirection+0x54>
    1f6e:	1e c0       	rjmp	.+60     	; 0x1fac <GPIO_setupPortDirection+0x7a>
    1f70:	2b 81       	ldd	r18, Y+3	; 0x03
    1f72:	3c 81       	ldd	r19, Y+4	; 0x04
    1f74:	22 30       	cpi	r18, 0x02	; 2
    1f76:	31 05       	cpc	r19, r1
    1f78:	81 f0       	breq	.+32     	; 0x1f9a <GPIO_setupPortDirection+0x68>
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	83 30       	cpi	r24, 0x03	; 3
    1f80:	91 05       	cpc	r25, r1
    1f82:	81 f0       	breq	.+32     	; 0x1fa4 <GPIO_setupPortDirection+0x72>
    1f84:	13 c0       	rjmp	.+38     	; 0x1fac <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1f86:	ea e3       	ldi	r30, 0x3A	; 58
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	80 83       	st	Z, r24
    1f8e:	0e c0       	rjmp	.+28     	; 0x1fac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f90:	e7 e3       	ldi	r30, 0x37	; 55
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	80 83       	st	Z, r24
    1f98:	09 c0       	rjmp	.+18     	; 0x1fac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1f9a:	e4 e3       	ldi	r30, 0x34	; 52
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	80 83       	st	Z, r24
    1fa2:	04 c0       	rjmp	.+8      	; 0x1fac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1fa4:	e1 e3       	ldi	r30, 0x31	; 49
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <GPIO_writePort>:

void GPIO_writePort(uint8 port_num, uint8 value)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <GPIO_writePort+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <GPIO_writePort+0x8>
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	84 30       	cpi	r24, 0x04	; 4
    1fce:	90 f5       	brcc	.+100    	; 0x2034 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	3c 83       	std	Y+4, r19	; 0x04
    1fd8:	2b 83       	std	Y+3, r18	; 0x03
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	d1 f0       	breq	.+52     	; 0x2018 <GPIO_writePort+0x5e>
    1fe4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <GPIO_writePort+0x3e>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	61 f0       	breq	.+24     	; 0x200e <GPIO_writePort+0x54>
    1ff6:	1e c0       	rjmp	.+60     	; 0x2034 <GPIO_writePort+0x7a>
    1ff8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffa:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffc:	22 30       	cpi	r18, 0x02	; 2
    1ffe:	31 05       	cpc	r19, r1
    2000:	81 f0       	breq	.+32     	; 0x2022 <GPIO_writePort+0x68>
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	91 05       	cpc	r25, r1
    200a:	81 f0       	breq	.+32     	; 0x202c <GPIO_writePort+0x72>
    200c:	13 c0       	rjmp	.+38     	; 0x2034 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    200e:	eb e3       	ldi	r30, 0x3B	; 59
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	80 83       	st	Z, r24
    2016:	0e c0       	rjmp	.+28     	; 0x2034 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2018:	e8 e3       	ldi	r30, 0x38	; 56
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	80 83       	st	Z, r24
    2020:	09 c0       	rjmp	.+18     	; 0x2034 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2022:	e5 e3       	ldi	r30, 0x35	; 53
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	80 83       	st	Z, r24
    202a:	04 c0       	rjmp	.+8      	; 0x2034 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    202c:	e2 e3       	ldi	r30, 0x32	; 50
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	80 83       	st	Z, r24
			break;
		}
	}
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <GPIO_readPort>:


uint8 GPIO_readPort(uint8 port_num)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <GPIO_readPort+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <GPIO_readPort+0x8>
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2050:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	84 30       	cpi	r24, 0x04	; 4
    2056:	90 f5       	brcc	.+100    	; 0x20bc <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	3c 83       	std	Y+4, r19	; 0x04
    2060:	2b 83       	std	Y+3, r18	; 0x03
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	91 05       	cpc	r25, r1
    206a:	d1 f0       	breq	.+52     	; 0x20a0 <GPIO_readPort+0x5e>
    206c:	2b 81       	ldd	r18, Y+3	; 0x03
    206e:	3c 81       	ldd	r19, Y+4	; 0x04
    2070:	22 30       	cpi	r18, 0x02	; 2
    2072:	31 05       	cpc	r19, r1
    2074:	2c f4       	brge	.+10     	; 0x2080 <GPIO_readPort+0x3e>
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	61 f0       	breq	.+24     	; 0x2096 <GPIO_readPort+0x54>
    207e:	1e c0       	rjmp	.+60     	; 0x20bc <GPIO_readPort+0x7a>
    2080:	2b 81       	ldd	r18, Y+3	; 0x03
    2082:	3c 81       	ldd	r19, Y+4	; 0x04
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	81 f0       	breq	.+32     	; 0x20aa <GPIO_readPort+0x68>
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	83 30       	cpi	r24, 0x03	; 3
    2090:	91 05       	cpc	r25, r1
    2092:	81 f0       	breq	.+32     	; 0x20b4 <GPIO_readPort+0x72>
    2094:	13 c0       	rjmp	.+38     	; 0x20bc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2096:	e9 e3       	ldi	r30, 0x39	; 57
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	0e c0       	rjmp	.+28     	; 0x20bc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20a0:	e6 e3       	ldi	r30, 0x36	; 54
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	09 c0       	rjmp	.+18     	; 0x20bc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20aa:	e3 e3       	ldi	r30, 0x33	; 51
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    20b4:	e0 e3       	ldi	r30, 0x30	; 48
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	2e 97       	sbiw	r28, 0x0e	; 14
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	67 e0       	ldi	r22, 0x07	; 7
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	66 e0       	ldi	r22, 0x06	; 6
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_setupPinDirection>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 ea       	ldi	r26, 0xA0	; 160
    20fa:	b1 e4       	ldi	r27, 0x41	; 65
    20fc:	8b 87       	std	Y+11, r24	; 0x0b
    20fe:	9c 87       	std	Y+12, r25	; 0x0c
    2100:	ad 87       	std	Y+13, r26	; 0x0d
    2102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6b 85       	ldd	r22, Y+11	; 0x0b
    2106:	7c 85       	ldd	r23, Y+12	; 0x0c
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a ef       	ldi	r20, 0xFA	; 250
    2112:	54 e4       	ldi	r21, 0x44	; 68
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8f 83       	std	Y+7, r24	; 0x07
    211e:	98 87       	std	Y+8, r25	; 0x08
    2120:	a9 87       	std	Y+9, r26	; 0x09
    2122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <LCD_init+0x7a>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2146:	6f 81       	ldd	r22, Y+7	; 0x07
    2148:	78 85       	ldd	r23, Y+8	; 0x08
    214a:	89 85       	ldd	r24, Y+9	; 0x09
    214c:	9a 85       	ldd	r25, Y+10	; 0x0a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2160:	7c 85       	ldd	r23, Y+12	; 0x0c
    2162:	8d 85       	ldd	r24, Y+13	; 0x0d
    2164:	9e 85       	ldd	r25, Y+14	; 0x0e
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <LCD_init+0xda>
    2188:	88 ec       	ldi	r24, 0xC8	; 200
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9c 83       	std	Y+4, r25	; 0x04
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_init+0xc8>
    2198:	9c 83       	std	Y+4, r25	; 0x04
    219a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <LCD_init+0xbc>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6f 81       	ldd	r22, Y+7	; 0x07
    21b2:	78 85       	ldd	r23, Y+8	; 0x08
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_init+0x104>
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	6f ef       	ldi	r22, 0xFF	; 255
    21de:	70 e0       	ldi	r23, 0x00	; 0
    21e0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    21e4:	88 e3       	ldi	r24, 0x38	; 56
    21e6:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    21ea:	8c e0       	ldi	r24, 0x0C	; 12
    21ec:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_sendCommand>
}
    21f6:	2e 96       	adiw	r28, 0x0e	; 14
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	e9 97       	sbiw	r28, 0x39	; 57
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    221e:	83 e0       	ldi	r24, 0x03	; 3
    2220:	67 e0       	ldi	r22, 0x07	; 7
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a0 e8       	ldi	r26, 0x80	; 128
    222e:	bf e3       	ldi	r27, 0x3F	; 63
    2230:	8d ab       	std	Y+53, r24	; 0x35
    2232:	9e ab       	std	Y+54, r25	; 0x36
    2234:	af ab       	std	Y+55, r26	; 0x37
    2236:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	6d a9       	ldd	r22, Y+53	; 0x35
    223a:	7e a9       	ldd	r23, Y+54	; 0x36
    223c:	8f a9       	ldd	r24, Y+55	; 0x37
    223e:	98 ad       	ldd	r25, Y+56	; 0x38
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a ef       	ldi	r20, 0xFA	; 250
    2246:	54 e4       	ldi	r21, 0x44	; 68
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	89 ab       	std	Y+49, r24	; 0x31
    2252:	9a ab       	std	Y+50, r25	; 0x32
    2254:	ab ab       	std	Y+51, r26	; 0x33
    2256:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2258:	69 a9       	ldd	r22, Y+49	; 0x31
    225a:	7a a9       	ldd	r23, Y+50	; 0x32
    225c:	8b a9       	ldd	r24, Y+51	; 0x33
    225e:	9c a9       	ldd	r25, Y+52	; 0x34
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <LCD_sendCommand+0x72>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	98 ab       	std	Y+48, r25	; 0x30
    2276:	8f a7       	std	Y+47, r24	; 0x2f
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    227a:	69 a9       	ldd	r22, Y+49	; 0x31
    227c:	7a a9       	ldd	r23, Y+50	; 0x32
    227e:	8b a9       	ldd	r24, Y+51	; 0x33
    2280:	9c a9       	ldd	r25, Y+52	; 0x34
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	6d a9       	ldd	r22, Y+53	; 0x35
    2294:	7e a9       	ldd	r23, Y+54	; 0x36
    2296:	8f a9       	ldd	r24, Y+55	; 0x37
    2298:	98 ad       	ldd	r25, Y+56	; 0x38
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	98 ab       	std	Y+48, r25	; 0x30
    22b8:	8f a7       	std	Y+47, r24	; 0x2f
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <LCD_sendCommand+0xd2>
    22bc:	88 ec       	ldi	r24, 0xC8	; 200
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9e a7       	std	Y+46, r25	; 0x2e
    22c2:	8d a7       	std	Y+45, r24	; 0x2d
    22c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    22c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_sendCommand+0xc0>
    22cc:	9e a7       	std	Y+46, r25	; 0x2e
    22ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d2:	98 a9       	ldd	r25, Y+48	; 0x30
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	98 ab       	std	Y+48, r25	; 0x30
    22d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	8f a5       	ldd	r24, Y+47	; 0x2f
    22dc:	98 a9       	ldd	r25, Y+48	; 0x30
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <LCD_sendCommand+0xb4>
    22e2:	14 c0       	rjmp	.+40     	; 0x230c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	69 a9       	ldd	r22, Y+49	; 0x31
    22e6:	7a a9       	ldd	r23, Y+50	; 0x32
    22e8:	8b a9       	ldd	r24, Y+51	; 0x33
    22ea:	9c a9       	ldd	r25, Y+52	; 0x34
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	98 ab       	std	Y+48, r25	; 0x30
    22f6:	8f a7       	std	Y+47, r24	; 0x2f
    22f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22fa:	98 a9       	ldd	r25, Y+48	; 0x30
    22fc:	9c a7       	std	Y+44, r25	; 0x2c
    22fe:	8b a7       	std	Y+43, r24	; 0x2b
    2300:	8b a5       	ldd	r24, Y+43	; 0x2b
    2302:	9c a5       	ldd	r25, Y+44	; 0x2c
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_sendCommand+0xfc>
    2308:	9c a7       	std	Y+44, r25	; 0x2c
    230a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    230c:	83 e0       	ldi	r24, 0x03	; 3
    230e:	66 e0       	ldi	r22, 0x06	; 6
    2310:	41 e0       	ldi	r20, 0x01	; 1
    2312:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a0 e8       	ldi	r26, 0x80	; 128
    231c:	bf e3       	ldi	r27, 0x3F	; 63
    231e:	8f a3       	std	Y+39, r24	; 0x27
    2320:	98 a7       	std	Y+40, r25	; 0x28
    2322:	a9 a7       	std	Y+41, r26	; 0x29
    2324:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	6f a1       	ldd	r22, Y+39	; 0x27
    2328:	78 a5       	ldd	r23, Y+40	; 0x28
    232a:	89 a5       	ldd	r24, Y+41	; 0x29
    232c:	9a a5       	ldd	r25, Y+42	; 0x2a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a ef       	ldi	r20, 0xFA	; 250
    2334:	54 e4       	ldi	r21, 0x44	; 68
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	8b a3       	std	Y+35, r24	; 0x23
    2340:	9c a3       	std	Y+36, r25	; 0x24
    2342:	ad a3       	std	Y+37, r26	; 0x25
    2344:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2346:	6b a1       	ldd	r22, Y+35	; 0x23
    2348:	7c a1       	ldd	r23, Y+36	; 0x24
    234a:	8d a1       	ldd	r24, Y+37	; 0x25
    234c:	9e a1       	ldd	r25, Y+38	; 0x26
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <LCD_sendCommand+0x160>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9a a3       	std	Y+34, r25	; 0x22
    2364:	89 a3       	std	Y+33, r24	; 0x21
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2368:	6b a1       	ldd	r22, Y+35	; 0x23
    236a:	7c a1       	ldd	r23, Y+36	; 0x24
    236c:	8d a1       	ldd	r24, Y+37	; 0x25
    236e:	9e a1       	ldd	r25, Y+38	; 0x26
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	4c f5       	brge	.+82     	; 0x23d2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	6f a1       	ldd	r22, Y+39	; 0x27
    2382:	78 a5       	ldd	r23, Y+40	; 0x28
    2384:	89 a5       	ldd	r24, Y+41	; 0x29
    2386:	9a a5       	ldd	r25, Y+42	; 0x2a
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9a a3       	std	Y+34, r25	; 0x22
    23a6:	89 a3       	std	Y+33, r24	; 0x21
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <LCD_sendCommand+0x1c0>
    23aa:	88 ec       	ldi	r24, 0xC8	; 200
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	98 a3       	std	Y+32, r25	; 0x20
    23b0:	8f 8f       	std	Y+31, r24	; 0x1f
    23b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23b4:	98 a1       	ldd	r25, Y+32	; 0x20
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <LCD_sendCommand+0x1ae>
    23ba:	98 a3       	std	Y+32, r25	; 0x20
    23bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	89 a1       	ldd	r24, Y+33	; 0x21
    23c0:	9a a1       	ldd	r25, Y+34	; 0x22
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	9a a3       	std	Y+34, r25	; 0x22
    23c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ca:	9a a1       	ldd	r25, Y+34	; 0x22
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f7       	brne	.-38     	; 0x23aa <LCD_sendCommand+0x1a2>
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	6b a1       	ldd	r22, Y+35	; 0x23
    23d4:	7c a1       	ldd	r23, Y+36	; 0x24
    23d6:	8d a1       	ldd	r24, Y+37	; 0x25
    23d8:	9e a1       	ldd	r25, Y+38	; 0x26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9a a3       	std	Y+34, r25	; 0x22
    23e4:	89 a3       	std	Y+33, r24	; 0x21
    23e6:	89 a1       	ldd	r24, Y+33	; 0x21
    23e8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ea:	9e 8f       	std	Y+30, r25	; 0x1e
    23ec:	8d 8f       	std	Y+29, r24	; 0x1d
    23ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_sendCommand+0x1ea>
    23f6:	9e 8f       	std	Y+30, r25	; 0x1e
    23f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	69 ad       	ldd	r22, Y+57	; 0x39
    23fe:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <GPIO_writePort>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e8       	ldi	r26, 0x80	; 128
    2408:	bf e3       	ldi	r27, 0x3F	; 63
    240a:	89 8f       	std	Y+25, r24	; 0x19
    240c:	9a 8f       	std	Y+26, r25	; 0x1a
    240e:	ab 8f       	std	Y+27, r26	; 0x1b
    2410:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2412:	69 8d       	ldd	r22, Y+25	; 0x19
    2414:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2416:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2418:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	4a ef       	ldi	r20, 0xFA	; 250
    2420:	54 e4       	ldi	r21, 0x44	; 68
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	8d 8b       	std	Y+21, r24	; 0x15
    242c:	9e 8b       	std	Y+22, r25	; 0x16
    242e:	af 8b       	std	Y+23, r26	; 0x17
    2430:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2432:	6d 89       	ldd	r22, Y+21	; 0x15
    2434:	7e 89       	ldd	r23, Y+22	; 0x16
    2436:	8f 89       	ldd	r24, Y+23	; 0x17
    2438:	98 8d       	ldd	r25, Y+24	; 0x18
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	2c f4       	brge	.+10     	; 0x2454 <LCD_sendCommand+0x24c>
		__ticks = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	9c 8b       	std	Y+20, r25	; 0x14
    2450:	8b 8b       	std	Y+19, r24	; 0x13
    2452:	3f c0       	rjmp	.+126    	; 0x24d2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2454:	6d 89       	ldd	r22, Y+21	; 0x15
    2456:	7e 89       	ldd	r23, Y+22	; 0x16
    2458:	8f 89       	ldd	r24, Y+23	; 0x17
    245a:	98 8d       	ldd	r25, Y+24	; 0x18
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	3f ef       	ldi	r19, 0xFF	; 255
    2460:	4f e7       	ldi	r20, 0x7F	; 127
    2462:	57 e4       	ldi	r21, 0x47	; 71
    2464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2468:	18 16       	cp	r1, r24
    246a:	4c f5       	brge	.+82     	; 0x24be <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246c:	69 8d       	ldd	r22, Y+25	; 0x19
    246e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e2       	ldi	r20, 0x20	; 32
    247a:	51 e4       	ldi	r21, 0x41	; 65
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9c 8b       	std	Y+20, r25	; 0x14
    2492:	8b 8b       	std	Y+19, r24	; 0x13
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <LCD_sendCommand+0x2ac>
    2496:	88 ec       	ldi	r24, 0xC8	; 200
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9a 8b       	std	Y+18, r25	; 0x12
    249c:	89 8b       	std	Y+17, r24	; 0x11
    249e:	89 89       	ldd	r24, Y+17	; 0x11
    24a0:	9a 89       	ldd	r25, Y+18	; 0x12
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <LCD_sendCommand+0x29a>
    24a6:	9a 8b       	std	Y+18, r25	; 0x12
    24a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24aa:	8b 89       	ldd	r24, Y+19	; 0x13
    24ac:	9c 89       	ldd	r25, Y+20	; 0x14
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	9c 8b       	std	Y+20, r25	; 0x14
    24b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	8b 89       	ldd	r24, Y+19	; 0x13
    24b6:	9c 89       	ldd	r25, Y+20	; 0x14
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	69 f7       	brne	.-38     	; 0x2496 <LCD_sendCommand+0x28e>
    24bc:	14 c0       	rjmp	.+40     	; 0x24e6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24be:	6d 89       	ldd	r22, Y+21	; 0x15
    24c0:	7e 89       	ldd	r23, Y+22	; 0x16
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	98 8d       	ldd	r25, Y+24	; 0x18
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9c 8b       	std	Y+20, r25	; 0x14
    24d0:	8b 8b       	std	Y+19, r24	; 0x13
    24d2:	8b 89       	ldd	r24, Y+19	; 0x13
    24d4:	9c 89       	ldd	r25, Y+20	; 0x14
    24d6:	98 8b       	std	Y+16, r25	; 0x10
    24d8:	8f 87       	std	Y+15, r24	; 0x0f
    24da:	8f 85       	ldd	r24, Y+15	; 0x0f
    24dc:	98 89       	ldd	r25, Y+16	; 0x10
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_sendCommand+0x2d6>
    24e2:	98 8b       	std	Y+16, r25	; 0x10
    24e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24e6:	83 e0       	ldi	r24, 0x03	; 3
    24e8:	66 e0       	ldi	r22, 0x06	; 6
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	a0 e8       	ldi	r26, 0x80	; 128
    24f6:	bf e3       	ldi	r27, 0x3F	; 63
    24f8:	8b 87       	std	Y+11, r24	; 0x0b
    24fa:	9c 87       	std	Y+12, r25	; 0x0c
    24fc:	ad 87       	std	Y+13, r26	; 0x0d
    24fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2500:	6b 85       	ldd	r22, Y+11	; 0x0b
    2502:	7c 85       	ldd	r23, Y+12	; 0x0c
    2504:	8d 85       	ldd	r24, Y+13	; 0x0d
    2506:	9e 85       	ldd	r25, Y+14	; 0x0e
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	4a ef       	ldi	r20, 0xFA	; 250
    250e:	54 e4       	ldi	r21, 0x44	; 68
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8f 83       	std	Y+7, r24	; 0x07
    251a:	98 87       	std	Y+8, r25	; 0x08
    251c:	a9 87       	std	Y+9, r26	; 0x09
    251e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2520:	6f 81       	ldd	r22, Y+7	; 0x07
    2522:	78 85       	ldd	r23, Y+8	; 0x08
    2524:	89 85       	ldd	r24, Y+9	; 0x09
    2526:	9a 85       	ldd	r25, Y+10	; 0x0a
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e8       	ldi	r20, 0x80	; 128
    252e:	5f e3       	ldi	r21, 0x3F	; 63
    2530:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2534:	88 23       	and	r24, r24
    2536:	2c f4       	brge	.+10     	; 0x2542 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
    2540:	3f c0       	rjmp	.+126    	; 0x25c0 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	3f ef       	ldi	r19, 0xFF	; 255
    254e:	4f e7       	ldi	r20, 0x7F	; 127
    2550:	57 e4       	ldi	r21, 0x47	; 71
    2552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2556:	18 16       	cp	r1, r24
    2558:	4c f5       	brge	.+82     	; 0x25ac <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255a:	6b 85       	ldd	r22, Y+11	; 0x0b
    255c:	7c 85       	ldd	r23, Y+12	; 0x0c
    255e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2560:	9e 85       	ldd	r25, Y+14	; 0x0e
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <LCD_sendCommand+0x39a>
    2584:	88 ec       	ldi	r24, 0xC8	; 200
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_sendCommand+0x388>
    2594:	9c 83       	std	Y+4, r25	; 0x04
    2596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	69 f7       	brne	.-38     	; 0x2584 <LCD_sendCommand+0x37c>
    25aa:	14 c0       	rjmp	.+40     	; 0x25d4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ac:	6f 81       	ldd	r22, Y+7	; 0x07
    25ae:	78 85       	ldd	r23, Y+8	; 0x08
    25b0:	89 85       	ldd	r24, Y+9	; 0x09
    25b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_sendCommand+0x3c4>
    25d0:	9a 83       	std	Y+2, r25	; 0x02
    25d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25d4:	e9 96       	adiw	r28, 0x39	; 57
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	e9 97       	sbiw	r28, 0x39	; 57
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	67 e0       	ldi	r22, 0x07	; 7
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a0 e8       	ldi	r26, 0x80	; 128
    260c:	bf e3       	ldi	r27, 0x3F	; 63
    260e:	8d ab       	std	Y+53, r24	; 0x35
    2610:	9e ab       	std	Y+54, r25	; 0x36
    2612:	af ab       	std	Y+55, r26	; 0x37
    2614:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	6d a9       	ldd	r22, Y+53	; 0x35
    2618:	7e a9       	ldd	r23, Y+54	; 0x36
    261a:	8f a9       	ldd	r24, Y+55	; 0x37
    261c:	98 ad       	ldd	r25, Y+56	; 0x38
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a ef       	ldi	r20, 0xFA	; 250
    2624:	54 e4       	ldi	r21, 0x44	; 68
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	89 ab       	std	Y+49, r24	; 0x31
    2630:	9a ab       	std	Y+50, r25	; 0x32
    2632:	ab ab       	std	Y+51, r26	; 0x33
    2634:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2636:	69 a9       	ldd	r22, Y+49	; 0x31
    2638:	7a a9       	ldd	r23, Y+50	; 0x32
    263a:	8b a9       	ldd	r24, Y+51	; 0x33
    263c:	9c a9       	ldd	r25, Y+52	; 0x34
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <LCD_displayCharacter+0x72>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	98 ab       	std	Y+48, r25	; 0x30
    2654:	8f a7       	std	Y+47, r24	; 0x2f
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2658:	69 a9       	ldd	r22, Y+49	; 0x31
    265a:	7a a9       	ldd	r23, Y+50	; 0x32
    265c:	8b a9       	ldd	r24, Y+51	; 0x33
    265e:	9c a9       	ldd	r25, Y+52	; 0x34
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	4c f5       	brge	.+82     	; 0x26c2 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2670:	6d a9       	ldd	r22, Y+53	; 0x35
    2672:	7e a9       	ldd	r23, Y+54	; 0x36
    2674:	8f a9       	ldd	r24, Y+55	; 0x37
    2676:	98 ad       	ldd	r25, Y+56	; 0x38
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	98 ab       	std	Y+48, r25	; 0x30
    2696:	8f a7       	std	Y+47, r24	; 0x2f
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <LCD_displayCharacter+0xd2>
    269a:	88 ec       	ldi	r24, 0xC8	; 200
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9e a7       	std	Y+46, r25	; 0x2e
    26a0:	8d a7       	std	Y+45, r24	; 0x2d
    26a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    26a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <LCD_displayCharacter+0xc0>
    26aa:	9e a7       	std	Y+46, r25	; 0x2e
    26ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b0:	98 a9       	ldd	r25, Y+48	; 0x30
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	98 ab       	std	Y+48, r25	; 0x30
    26b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ba:	98 a9       	ldd	r25, Y+48	; 0x30
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <LCD_displayCharacter+0xb4>
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	69 a9       	ldd	r22, Y+49	; 0x31
    26c4:	7a a9       	ldd	r23, Y+50	; 0x32
    26c6:	8b a9       	ldd	r24, Y+51	; 0x33
    26c8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	98 ab       	std	Y+48, r25	; 0x30
    26d4:	8f a7       	std	Y+47, r24	; 0x2f
    26d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d8:	98 a9       	ldd	r25, Y+48	; 0x30
    26da:	9c a7       	std	Y+44, r25	; 0x2c
    26dc:	8b a7       	std	Y+43, r24	; 0x2b
    26de:	8b a5       	ldd	r24, Y+43	; 0x2b
    26e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_displayCharacter+0xfc>
    26e6:	9c a7       	std	Y+44, r25	; 0x2c
    26e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	66 e0       	ldi	r22, 0x06	; 6
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e8       	ldi	r26, 0x80	; 128
    26fa:	bf e3       	ldi	r27, 0x3F	; 63
    26fc:	8f a3       	std	Y+39, r24	; 0x27
    26fe:	98 a7       	std	Y+40, r25	; 0x28
    2700:	a9 a7       	std	Y+41, r26	; 0x29
    2702:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	6f a1       	ldd	r22, Y+39	; 0x27
    2706:	78 a5       	ldd	r23, Y+40	; 0x28
    2708:	89 a5       	ldd	r24, Y+41	; 0x29
    270a:	9a a5       	ldd	r25, Y+42	; 0x2a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a ef       	ldi	r20, 0xFA	; 250
    2712:	54 e4       	ldi	r21, 0x44	; 68
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8b a3       	std	Y+35, r24	; 0x23
    271e:	9c a3       	std	Y+36, r25	; 0x24
    2720:	ad a3       	std	Y+37, r26	; 0x25
    2722:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2724:	6b a1       	ldd	r22, Y+35	; 0x23
    2726:	7c a1       	ldd	r23, Y+36	; 0x24
    2728:	8d a1       	ldd	r24, Y+37	; 0x25
    272a:	9e a1       	ldd	r25, Y+38	; 0x26
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <LCD_displayCharacter+0x160>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9a a3       	std	Y+34, r25	; 0x22
    2742:	89 a3       	std	Y+33, r24	; 0x21
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2746:	6b a1       	ldd	r22, Y+35	; 0x23
    2748:	7c a1       	ldd	r23, Y+36	; 0x24
    274a:	8d a1       	ldd	r24, Y+37	; 0x25
    274c:	9e a1       	ldd	r25, Y+38	; 0x26
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	6f a1       	ldd	r22, Y+39	; 0x27
    2760:	78 a5       	ldd	r23, Y+40	; 0x28
    2762:	89 a5       	ldd	r24, Y+41	; 0x29
    2764:	9a a5       	ldd	r25, Y+42	; 0x2a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9a a3       	std	Y+34, r25	; 0x22
    2784:	89 a3       	std	Y+33, r24	; 0x21
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <LCD_displayCharacter+0x1c0>
    2788:	88 ec       	ldi	r24, 0xC8	; 200
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	98 a3       	std	Y+32, r25	; 0x20
    278e:	8f 8f       	std	Y+31, r24	; 0x1f
    2790:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2792:	98 a1       	ldd	r25, Y+32	; 0x20
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_displayCharacter+0x1ae>
    2798:	98 a3       	std	Y+32, r25	; 0x20
    279a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	89 a1       	ldd	r24, Y+33	; 0x21
    279e:	9a a1       	ldd	r25, Y+34	; 0x22
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9a a3       	std	Y+34, r25	; 0x22
    27a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	89 a1       	ldd	r24, Y+33	; 0x21
    27a8:	9a a1       	ldd	r25, Y+34	; 0x22
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <LCD_displayCharacter+0x1a2>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6b a1       	ldd	r22, Y+35	; 0x23
    27b2:	7c a1       	ldd	r23, Y+36	; 0x24
    27b4:	8d a1       	ldd	r24, Y+37	; 0x25
    27b6:	9e a1       	ldd	r25, Y+38	; 0x26
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9a a3       	std	Y+34, r25	; 0x22
    27c2:	89 a3       	std	Y+33, r24	; 0x21
    27c4:	89 a1       	ldd	r24, Y+33	; 0x21
    27c6:	9a a1       	ldd	r25, Y+34	; 0x22
    27c8:	9e 8f       	std	Y+30, r25	; 0x1e
    27ca:	8d 8f       	std	Y+29, r24	; 0x1d
    27cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <LCD_displayCharacter+0x1ea>
    27d4:	9e 8f       	std	Y+30, r25	; 0x1e
    27d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	69 ad       	ldd	r22, Y+57	; 0x39
    27dc:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <GPIO_writePort>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e8       	ldi	r26, 0x80	; 128
    27e6:	bf e3       	ldi	r27, 0x3F	; 63
    27e8:	89 8f       	std	Y+25, r24	; 0x19
    27ea:	9a 8f       	std	Y+26, r25	; 0x1a
    27ec:	ab 8f       	std	Y+27, r26	; 0x1b
    27ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	69 8d       	ldd	r22, Y+25	; 0x19
    27f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a ef       	ldi	r20, 0xFA	; 250
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8d 8b       	std	Y+21, r24	; 0x15
    280a:	9e 8b       	std	Y+22, r25	; 0x16
    280c:	af 8b       	std	Y+23, r26	; 0x17
    280e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2810:	6d 89       	ldd	r22, Y+21	; 0x15
    2812:	7e 89       	ldd	r23, Y+22	; 0x16
    2814:	8f 89       	ldd	r24, Y+23	; 0x17
    2816:	98 8d       	ldd	r25, Y+24	; 0x18
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9c 8b       	std	Y+20, r25	; 0x14
    282e:	8b 8b       	std	Y+19, r24	; 0x13
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2832:	6d 89       	ldd	r22, Y+21	; 0x15
    2834:	7e 89       	ldd	r23, Y+22	; 0x16
    2836:	8f 89       	ldd	r24, Y+23	; 0x17
    2838:	98 8d       	ldd	r25, Y+24	; 0x18
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	69 8d       	ldd	r22, Y+25	; 0x19
    284c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9c 8b       	std	Y+20, r25	; 0x14
    2870:	8b 8b       	std	Y+19, r24	; 0x13
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <LCD_displayCharacter+0x2ac>
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9a 8b       	std	Y+18, r25	; 0x12
    287a:	89 8b       	std	Y+17, r24	; 0x11
    287c:	89 89       	ldd	r24, Y+17	; 0x11
    287e:	9a 89       	ldd	r25, Y+18	; 0x12
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_displayCharacter+0x29a>
    2884:	9a 8b       	std	Y+18, r25	; 0x12
    2886:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8b 89       	ldd	r24, Y+19	; 0x13
    288a:	9c 89       	ldd	r25, Y+20	; 0x14
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9c 8b       	std	Y+20, r25	; 0x14
    2890:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8b 89       	ldd	r24, Y+19	; 0x13
    2894:	9c 89       	ldd	r25, Y+20	; 0x14
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <LCD_displayCharacter+0x28e>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6d 89       	ldd	r22, Y+21	; 0x15
    289e:	7e 89       	ldd	r23, Y+22	; 0x16
    28a0:	8f 89       	ldd	r24, Y+23	; 0x17
    28a2:	98 8d       	ldd	r25, Y+24	; 0x18
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9c 8b       	std	Y+20, r25	; 0x14
    28ae:	8b 8b       	std	Y+19, r24	; 0x13
    28b0:	8b 89       	ldd	r24, Y+19	; 0x13
    28b2:	9c 89       	ldd	r25, Y+20	; 0x14
    28b4:	98 8b       	std	Y+16, r25	; 0x10
    28b6:	8f 87       	std	Y+15, r24	; 0x0f
    28b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ba:	98 89       	ldd	r25, Y+16	; 0x10
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_displayCharacter+0x2d6>
    28c0:	98 8b       	std	Y+16, r25	; 0x10
    28c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28c4:	83 e0       	ldi	r24, 0x03	; 3
    28c6:	66 e0       	ldi	r22, 0x06	; 6
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <GPIO_writePin>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a0 e8       	ldi	r26, 0x80	; 128
    28d4:	bf e3       	ldi	r27, 0x3F	; 63
    28d6:	8b 87       	std	Y+11, r24	; 0x0b
    28d8:	9c 87       	std	Y+12, r25	; 0x0c
    28da:	ad 87       	std	Y+13, r26	; 0x0d
    28dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4a ef       	ldi	r20, 0xFA	; 250
    28ec:	54 e4       	ldi	r21, 0x44	; 68
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	8f 83       	std	Y+7, r24	; 0x07
    28f8:	98 87       	std	Y+8, r25	; 0x08
    28fa:	a9 87       	std	Y+9, r26	; 0x09
    28fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2900:	78 85       	ldd	r23, Y+8	; 0x08
    2902:	89 85       	ldd	r24, Y+9	; 0x09
    2904:	9a 85       	ldd	r25, Y+10	; 0x0a
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	2c f4       	brge	.+10     	; 0x2920 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
    291e:	3f c0       	rjmp	.+126    	; 0x299e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2920:	6f 81       	ldd	r22, Y+7	; 0x07
    2922:	78 85       	ldd	r23, Y+8	; 0x08
    2924:	89 85       	ldd	r24, Y+9	; 0x09
    2926:	9a 85       	ldd	r25, Y+10	; 0x0a
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	4c f5       	brge	.+82     	; 0x298a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2938:	6b 85       	ldd	r22, Y+11	; 0x0b
    293a:	7c 85       	ldd	r23, Y+12	; 0x0c
    293c:	8d 85       	ldd	r24, Y+13	; 0x0d
    293e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e2       	ldi	r20, 0x20	; 32
    2946:	51 e4       	ldi	r21, 0x41	; 65
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9e 83       	std	Y+6, r25	; 0x06
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <LCD_displayCharacter+0x39a>
    2962:	88 ec       	ldi	r24, 0xC8	; 200
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9c 83       	std	Y+4, r25	; 0x04
    2968:	8b 83       	std	Y+3, r24	; 0x03
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <LCD_displayCharacter+0x388>
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	9e 81       	ldd	r25, Y+6	; 0x06
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	69 f7       	brne	.-38     	; 0x2962 <LCD_displayCharacter+0x37c>
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	6f 81       	ldd	r22, Y+7	; 0x07
    298c:	78 85       	ldd	r23, Y+8	; 0x08
    298e:	89 85       	ldd	r24, Y+9	; 0x09
    2990:	9a 85       	ldd	r25, Y+10	; 0x0a
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_displayCharacter+0x3c4>
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29b2:	e9 96       	adiw	r28, 0x39	; 57
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	00 d0       	rcall	.+0      	; 0x29ca <LCD_displayString+0x6>
    29ca:	0f 92       	push	r0
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	9b 83       	std	Y+3, r25	; 0x03
    29d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29d4:	19 82       	std	Y+1, r1	; 0x01
    29d6:	0e c0       	rjmp	.+28     	; 0x29f4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	9b 81       	ldd	r25, Y+3	; 0x03
    29e2:	fc 01       	movw	r30, r24
    29e4:	e2 0f       	add	r30, r18
    29e6:	f3 1f       	adc	r31, r19
    29e8:	80 81       	ld	r24, Z
    29ea:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_displayCharacter>
		i++;
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	8f 5f       	subi	r24, 0xFF	; 255
    29f2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	9b 81       	ldd	r25, Y+3	; 0x03
    29fe:	fc 01       	movw	r30, r24
    2a00:	e2 0f       	add	r30, r18
    2a02:	f3 1f       	adc	r31, r19
    2a04:	80 81       	ld	r24, Z
    2a06:	88 23       	and	r24, r24
    2a08:	39 f7       	brne	.-50     	; 0x29d8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <LCD_moveCursor+0x6>
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <LCD_moveCursor+0x8>
    2a1e:	0f 92       	push	r0
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	8a 83       	std	Y+2, r24	; 0x02
    2a26:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	3d 83       	std	Y+5, r19	; 0x05
    2a30:	2c 83       	std	Y+4, r18	; 0x04
    2a32:	8c 81       	ldd	r24, Y+4	; 0x04
    2a34:	9d 81       	ldd	r25, Y+5	; 0x05
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	91 05       	cpc	r25, r1
    2a3a:	c1 f0       	breq	.+48     	; 0x2a6c <LCD_moveCursor+0x56>
    2a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a40:	22 30       	cpi	r18, 0x02	; 2
    2a42:	31 05       	cpc	r19, r1
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <LCD_moveCursor+0x3a>
    2a46:	8c 81       	ldd	r24, Y+4	; 0x04
    2a48:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	61 f0       	breq	.+24     	; 0x2a66 <LCD_moveCursor+0x50>
    2a4e:	19 c0       	rjmp	.+50     	; 0x2a82 <LCD_moveCursor+0x6c>
    2a50:	2c 81       	ldd	r18, Y+4	; 0x04
    2a52:	3d 81       	ldd	r19, Y+5	; 0x05
    2a54:	22 30       	cpi	r18, 0x02	; 2
    2a56:	31 05       	cpc	r19, r1
    2a58:	69 f0       	breq	.+26     	; 0x2a74 <LCD_moveCursor+0x5e>
    2a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5e:	83 30       	cpi	r24, 0x03	; 3
    2a60:	91 05       	cpc	r25, r1
    2a62:	61 f0       	breq	.+24     	; 0x2a7c <LCD_moveCursor+0x66>
    2a64:	0e c0       	rjmp	.+28     	; 0x2a82 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	0b c0       	rjmp	.+22     	; 0x2a82 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	80 5c       	subi	r24, 0xC0	; 192
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	07 c0       	rjmp	.+14     	; 0x2a82 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	80 5f       	subi	r24, 0xF0	; 240
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	03 c0       	rjmp	.+6      	; 0x2a82 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	80 5b       	subi	r24, 0xB0	; 176
    2a80:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	80 68       	ori	r24, 0x80	; 128
    2a86:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_sendCommand>
}
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <LCD_displayStringRowColumn+0x6>
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <LCD_displayStringRowColumn+0x8>
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	6a 83       	std	Y+2, r22	; 0x02
    2aaa:	5c 83       	std	Y+4, r21	; 0x04
    2aac:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ab2:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aba:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <LCD_displayString>
}
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	62 97       	sbiw	r28, 0x12	; 18
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	9a 8b       	std	Y+18, r25	; 0x12
    2ae2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ae4:	89 89       	ldd	r24, Y+17	; 0x11
    2ae6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae8:	9e 01       	movw	r18, r28
    2aea:	2f 5f       	subi	r18, 0xFF	; 255
    2aec:	3f 4f       	sbci	r19, 0xFF	; 255
    2aee:	b9 01       	movw	r22, r18
    2af0:	4a e0       	ldi	r20, 0x0A	; 10
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	0e 94 ce 18 	call	0x319c	; 0x319c <itoa>
   LCD_displayString(buff); /* Display the string */
    2af8:	ce 01       	movw	r24, r28
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <LCD_displayString>
}
    2b00:	62 96       	adiw	r28, 0x12	; 18
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_sendCommand>
}
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <PWM_Timer0_Start>:

/***************************************************************************
 *								Functions Definitions
 ***************************************************************************/

void PWM_Timer0_Start(uint8 duty_cycle){
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	0f 92       	push	r0
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Setting timer register initial value to 0 */
    2b36:	e2 e5       	ldi	r30, 0x52	; 82
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	10 82       	st	Z, r1

	OCR0  = duty_cycle * DUTY_CYCLE_TO_COMPARE_VALUE_CONVERSION; /* Setting Compare value to duty cycle */
    2b3c:	0c e5       	ldi	r16, 0x5C	; 92
    2b3e:	10 e0       	ldi	r17, 0x00	; 0
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	aa 27       	eor	r26, r26
    2b48:	97 fd       	sbrc	r25, 7
    2b4a:	a0 95       	com	r26
    2b4c:	ba 2f       	mov	r27, r26
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	23 e3       	ldi	r18, 0x33	; 51
    2b60:	33 e3       	ldi	r19, 0x33	; 51
    2b62:	43 e2       	ldi	r20, 0x23	; 35
    2b64:	50 e4       	ldi	r21, 0x40	; 64
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID, OC0, PIN_OUTPUT); /* Setting the direction of OC0 pin in PortB to output for PWM signal output*/
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	63 e0       	ldi	r22, 0x03	; 3
    2b82:	41 e0       	ldi	r20, 0x01	; 1
    2b84:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0 = 0
	 * 2. Fast PWM Mode WGM01 = 1 & WGM00 = 1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00 = 0 & COM01 = 1
	 * 4. clock = F_CPU/8 CS00 = 0 CS01 = 1 CS02 = 0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2b88:	e3 e5       	ldi	r30, 0x53	; 83
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	8a e6       	ldi	r24, 0x6A	; 106
    2b8e:	80 83       	st	Z, r24
}
    2b90:	0f 90       	pop	r0
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
    2b9a:	08 95       	ret

00002b9c <Timer1_init>:
static volatile void (*g_Timer1_Call_Back) (void) = NULL_PTR;

/*******************************************************************************
 * 								 Functions Definitions
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2b9c:	df 93       	push	r29
    2b9e:	cf 93       	push	r28
    2ba0:	00 d0       	rcall	.+0      	; 0x2ba2 <Timer1_init+0x6>
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
	/* Setting Timer1 counter register to its specified initial value from Configurations */
	TCNT1 = Config_Ptr -> initial_value;
    2baa:	ac e4       	ldi	r26, 0x4C	; 76
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	11 96       	adiw	r26, 0x01	; 1
    2bb8:	9c 93       	st	X, r25
    2bba:	8e 93       	st	-X, r24

	/* Choosing between CTC and Normal mode */
	if (Config_Ptr -> mode == COMPARE_MODE){
    2bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc0:	85 81       	ldd	r24, Z+5	; 0x05
    2bc2:	81 30       	cpi	r24, 0x01	; 1
    2bc4:	a9 f4       	brne	.+42     	; 0x2bf0 <Timer1_init+0x54>
		TCCR1B |= (1 << WGM12); /* Setting Timer1 in CTC Mode with (Compare A) OCR1A as Compare Register */
    2bc6:	ae e4       	ldi	r26, 0x4E	; 78
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	ee e4       	ldi	r30, 0x4E	; 78
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	88 60       	ori	r24, 0x08	; 8
    2bd2:	8c 93       	st	X, r24
		OCR1A = Config_Ptr -> compare_value; /* Setting Compare Register to its specified value from Configurations*/
    2bd4:	aa e4       	ldi	r26, 0x4A	; 74
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bda:	fa 81       	ldd	r31, Y+2	; 0x02
    2bdc:	82 81       	ldd	r24, Z+2	; 0x02
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	11 96       	adiw	r26, 0x01	; 1
    2be2:	9c 93       	st	X, r25
    2be4:	8e 93       	st	-X, r24
		TIMSK = (1 << OCIE1A); /* Output Compare A Match Interrupt Enable */
    2be6:	e9 e5       	ldi	r30, 0x59	; 89
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 e1       	ldi	r24, 0x10	; 16
    2bec:	80 83       	st	Z, r24
    2bee:	0c c0       	rjmp	.+24     	; 0x2c08 <Timer1_init+0x6c>
	}
	else if (Config_Ptr -> mode == NORMAL_MODE){
    2bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf4:	85 81       	ldd	r24, Z+5	; 0x05
    2bf6:	88 23       	and	r24, r24
    2bf8:	39 f4       	brne	.+14     	; 0x2c08 <Timer1_init+0x6c>
		/*For Normal Mode: WGM10:13 = 0 */
		TIMSK |= (1 << TOIE1); /* Overflow Interrupt Enable */
    2bfa:	a9 e5       	ldi	r26, 0x59	; 89
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e9 e5       	ldi	r30, 0x59	; 89
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	84 60       	ori	r24, 0x04	; 4
    2c06:	8c 93       	st	X, r24
	}

	/* Setting the specified Pre-scaler from Configurations */
	TCCR1B = ((TCCR1B & (0XF8)) | (Config_Ptr -> prescaler));
    2c08:	ae e4       	ldi	r26, 0x4E	; 78
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	ee e4       	ldi	r30, 0x4E	; 78
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	98 2f       	mov	r25, r24
    2c14:	98 7f       	andi	r25, 0xF8	; 248
    2c16:	e9 81       	ldd	r30, Y+1	; 0x01
    2c18:	fa 81       	ldd	r31, Y+2	; 0x02
    2c1a:	84 81       	ldd	r24, Z+4	; 0x04
    2c1c:	89 2b       	or	r24, r25
    2c1e:	8c 93       	st	X, r24
}
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <Timer1_setCallBack+0x6>
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	9a 83       	std	Y+2, r25	; 0x02
    2c36:	89 83       	std	Y+1, r24	; 0x01
	/* Saving the address of the call back function in a global pointer to function*/
	g_Timer1_Call_Back = a_ptr;
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	90 93 88 01 	sts	0x0188, r25
    2c40:	80 93 87 01 	sts	0x0187, r24
}
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <Timer1_deInit>:

void Timer1_deInit(void){
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0; /* Clearing Control Register to disable Timer1*/
    2c56:	ee e4       	ldi	r30, 0x4E	; 78
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	10 82       	st	Z, r1
	TCNT1 = 0; /* Clearing Counter Register*/
    2c5c:	ec e4       	ldi	r30, 0x4C	; 76
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	11 82       	std	Z+1, r1	; 0x01
    2c62:	10 82       	st	Z, r1
	OCR1A = 0; /* Clearing Compare Register*/
    2c64:	ea e4       	ldi	r30, 0x4A	; 74
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	11 82       	std	Z+1, r1	; 0x01
    2c6a:	10 82       	st	Z, r1
	TIMSK &= (0XEB); /* Disabling Interrupt Bits */
    2c6c:	a9 e5       	ldi	r26, 0x59	; 89
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	e9 e5       	ldi	r30, 0x59	; 89
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	8b 7e       	andi	r24, 0xEB	; 235
    2c78:	8c 93       	st	X, r24
}
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	08 95       	ret

00002c80 <__vector_6>:

ISR (TIMER1_COMPA_vect){
    2c80:	1f 92       	push	r1
    2c82:	0f 92       	push	r0
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	0f 92       	push	r0
    2c88:	11 24       	eor	r1, r1
    2c8a:	2f 93       	push	r18
    2c8c:	3f 93       	push	r19
    2c8e:	4f 93       	push	r20
    2c90:	5f 93       	push	r21
    2c92:	6f 93       	push	r22
    2c94:	7f 93       	push	r23
    2c96:	8f 93       	push	r24
    2c98:	9f 93       	push	r25
    2c9a:	af 93       	push	r26
    2c9c:	bf 93       	push	r27
    2c9e:	ef 93       	push	r30
    2ca0:	ff 93       	push	r31
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_Call_Back != NULL_PTR)
    2caa:	80 91 87 01 	lds	r24, 0x0187
    2cae:	90 91 88 01 	lds	r25, 0x0188
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	29 f0       	breq	.+10     	; 0x2cc0 <__vector_6+0x40>
	{
		/* Calling the Call Back function in the application after Compare Match */
		(*g_Timer1_Call_Back)();
    2cb6:	e0 91 87 01 	lds	r30, 0x0187
    2cba:	f0 91 88 01 	lds	r31, 0x0188
    2cbe:	09 95       	icall
	}
}
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	ff 91       	pop	r31
    2cc6:	ef 91       	pop	r30
    2cc8:	bf 91       	pop	r27
    2cca:	af 91       	pop	r26
    2ccc:	9f 91       	pop	r25
    2cce:	8f 91       	pop	r24
    2cd0:	7f 91       	pop	r23
    2cd2:	6f 91       	pop	r22
    2cd4:	5f 91       	pop	r21
    2cd6:	4f 91       	pop	r20
    2cd8:	3f 91       	pop	r19
    2cda:	2f 91       	pop	r18
    2cdc:	0f 90       	pop	r0
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	0f 90       	pop	r0
    2ce2:	1f 90       	pop	r1
    2ce4:	18 95       	reti

00002ce6 <__vector_8>:

ISR (TIMER1_OVF_vect){
    2ce6:	1f 92       	push	r1
    2ce8:	0f 92       	push	r0
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	0f 92       	push	r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	2f 93       	push	r18
    2cf2:	3f 93       	push	r19
    2cf4:	4f 93       	push	r20
    2cf6:	5f 93       	push	r21
    2cf8:	6f 93       	push	r22
    2cfa:	7f 93       	push	r23
    2cfc:	8f 93       	push	r24
    2cfe:	9f 93       	push	r25
    2d00:	af 93       	push	r26
    2d02:	bf 93       	push	r27
    2d04:	ef 93       	push	r30
    2d06:	ff 93       	push	r31
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_Call_Back != NULL_PTR)
    2d10:	80 91 87 01 	lds	r24, 0x0187
    2d14:	90 91 88 01 	lds	r25, 0x0188
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	29 f0       	breq	.+10     	; 0x2d26 <__vector_8+0x40>
	{
		/* Calling the Call Back function in the application after Compare Match */
		(*g_Timer1_Call_Back)();
    2d1c:	e0 91 87 01 	lds	r30, 0x0187
    2d20:	f0 91 88 01 	lds	r31, 0x0188
    2d24:	09 95       	icall
	}
}
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	ff 91       	pop	r31
    2d2c:	ef 91       	pop	r30
    2d2e:	bf 91       	pop	r27
    2d30:	af 91       	pop	r26
    2d32:	9f 91       	pop	r25
    2d34:	8f 91       	pop	r24
    2d36:	7f 91       	pop	r23
    2d38:	6f 91       	pop	r22
    2d3a:	5f 91       	pop	r21
    2d3c:	4f 91       	pop	r20
    2d3e:	3f 91       	pop	r19
    2d40:	2f 91       	pop	r18
    2d42:	0f 90       	pop	r0
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	0f 90       	pop	r0
    2d48:	1f 90       	pop	r1
    2d4a:	18 95       	reti

00002d4c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <TWI_init+0xa>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	9a 83       	std	Y+2, r25	; 0x02
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    /*
     * Pre-scaler = 0 -> TWPS = 0
     * TWBR value is set based on the required bit-rate according to the equation:
     * TWBR = ((CPU_Clock_Frequencey / SCL) - 16) / (2 * 4 ^ (TWPS)) */
	TWSR = 0x00;
    2d5e:	e1 e2       	ldi	r30, 0x21	; 33
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	10 82       	st	Z, r1
	TWBR = (uint8)(((float) F_CPU / (Config_Ptr -> bit_rate)) - 16) / 2;
    2d64:	00 e2       	ldi	r16, 0x20	; 32
    2d66:	10 e0       	ldi	r17, 0x00	; 0
    2d68:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6c:	81 81       	ldd	r24, Z+1	; 0x01
    2d6e:	92 81       	ldd	r25, Z+2	; 0x02
    2d70:	a3 81       	ldd	r26, Z+3	; 0x03
    2d72:	b4 81       	ldd	r27, Z+4	; 0x04
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2d7c:	9b 01       	movw	r18, r22
    2d7e:	ac 01       	movw	r20, r24
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	74 e2       	ldi	r23, 0x24	; 36
    2d84:	84 ef       	ldi	r24, 0xF4	; 244
    2d86:	9a e4       	ldi	r25, 0x4A	; 74
    2d88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	bc 01       	movw	r22, r24
    2d92:	cd 01       	movw	r24, r26
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e8       	ldi	r20, 0x80	; 128
    2d9a:	51 e4       	ldi	r21, 0x41	; 65
    2d9c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	86 95       	lsr	r24
    2db2:	f8 01       	movw	r30, r16
    2db4:	80 83       	st	Z, r24

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
    General Call Recognition: Off */

    TWAR = Config_Ptr -> address;  // My Address is sent from Application
    2db6:	a2 e2       	ldi	r26, 0x22	; 34
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	e9 81       	ldd	r30, Y+1	; 0x01
    2dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2dc2:	e6 e5       	ldi	r30, 0x56	; 86
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	84 e0       	ldi	r24, 0x04	; 4
    2dc8:	80 83       	st	Z, r24
}
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	08 95       	ret

00002dd8 <TWI_start>:

void TWI_start(void)
{
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2de0:	e6 e5       	ldi	r30, 0x56	; 86
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	84 ea       	ldi	r24, 0xA4	; 164
    2de6:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2de8:	e6 e5       	ldi	r30, 0x56	; 86
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	88 23       	and	r24, r24
    2df0:	dc f7       	brge	.-10     	; 0x2de8 <TWI_start+0x10>
}
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <TWI_stop>:

void TWI_stop(void)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2e00:	e6 e5       	ldi	r30, 0x56	; 86
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	84 e9       	ldi	r24, 0x94	; 148
    2e06:	80 83       	st	Z, r24
}
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	0f 92       	push	r0
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2e1a:	e3 e2       	ldi	r30, 0x23	; 35
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2e22:	e6 e5       	ldi	r30, 0x56	; 86
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	84 e8       	ldi	r24, 0x84	; 132
    2e28:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2e2a:	e6 e5       	ldi	r30, 0x56	; 86
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	88 23       	and	r24, r24
    2e32:	dc f7       	brge	.-10     	; 0x2e2a <TWI_writeByte+0x1c>
}
    2e34:	0f 90       	pop	r0
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	08 95       	ret

00002e3c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2e44:	e6 e5       	ldi	r30, 0x56	; 86
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	84 ec       	ldi	r24, 0xC4	; 196
    2e4a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2e4c:	e6 e5       	ldi	r30, 0x56	; 86
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	88 23       	and	r24, r24
    2e54:	dc f7       	brge	.-10     	; 0x2e4c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2e56:	e3 e2       	ldi	r30, 0x23	; 35
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
}
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2e6a:	e6 e5       	ldi	r30, 0x56	; 86
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	84 e8       	ldi	r24, 0x84	; 132
    2e70:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2e72:	e6 e5       	ldi	r30, 0x56	; 86
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	88 23       	and	r24, r24
    2e7a:	dc f7       	brge	.-10     	; 0x2e72 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2e7c:	e3 e2       	ldi	r30, 0x23	; 35
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
}
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	0f 92       	push	r0
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2e92:	e1 e2       	ldi	r30, 0x21	; 33
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	88 7f       	andi	r24, 0xF8	; 248
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e9e:	0f 90       	pop	r0
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * UART_Configs_Ptr)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <UART_init+0x6>
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <UART_init+0x8>
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	9c 83       	std	Y+4, r25	; 0x04
    2eb4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2eb6:	1a 82       	std	Y+2, r1	; 0x02
    2eb8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2eba:	eb e2       	ldi	r30, 0x2B	; 43
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = Bit-2 of bit data
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2ec2:	ea e2       	ldi	r30, 0x2A	; 42
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	88 e1       	ldi	r24, 0x18	; 24
    2ec8:	80 83       	st	Z, r24
	UCSRB = (UCSRB & (0XFB)) | ((UART_Configs_Ptr -> bit_Data) & (0X04));
    2eca:	aa e2       	ldi	r26, 0x2A	; 42
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	ea e2       	ldi	r30, 0x2A	; 42
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	98 2f       	mov	r25, r24
    2ed6:	9b 7f       	andi	r25, 0xFB	; 251
    2ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eda:	fc 81       	ldd	r31, Y+4	; 0x04
    2edc:	80 81       	ld	r24, Z
    2ede:	84 70       	andi	r24, 0x04	; 4
    2ee0:	89 2b       	or	r24, r25
    2ee2:	8c 93       	st	X, r24
	 * UPM1:0  = Parity bits of configurations
	 * USBS    = Stop bit of configurations
	 * UCSZ1:0 = data bits of configurations
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL);
    2ee4:	e0 e4       	ldi	r30, 0x40	; 64
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 e8       	ldi	r24, 0x80	; 128
    2eea:	80 83       	st	Z, r24
	UCSRC = (UCSRC & (0XFC)) | (((UART_Configs_Ptr -> bit_Data) & (0XFB)) << 1);
    2eec:	a0 e4       	ldi	r26, 0x40	; 64
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	e0 e4       	ldi	r30, 0x40	; 64
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	28 2f       	mov	r18, r24
    2ef8:	2c 7f       	andi	r18, 0xFC	; 252
    2efa:	eb 81       	ldd	r30, Y+3	; 0x03
    2efc:	fc 81       	ldd	r31, Y+4	; 0x04
    2efe:	80 81       	ld	r24, Z
    2f00:	88 2f       	mov	r24, r24
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	8b 7f       	andi	r24, 0xFB	; 251
    2f06:	90 70       	andi	r25, 0x00	; 0
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	82 2b       	or	r24, r18
    2f0e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0XF7)) | ((UART_Configs_Ptr -> stop_Bit) << 3);
    2f10:	a0 e4       	ldi	r26, 0x40	; 64
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e0 e4       	ldi	r30, 0x40	; 64
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	27 7f       	andi	r18, 0xF7	; 247
    2f1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f20:	fc 81       	ldd	r31, Y+4	; 0x04
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	88 2f       	mov	r24, r24
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	82 2b       	or	r24, r18
    2f36:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0XCF)) | ((UART_Configs_Ptr -> parity) << 4);
    2f38:	a0 e4       	ldi	r26, 0x40	; 64
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e0 e4       	ldi	r30, 0x40	; 64
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	28 2f       	mov	r18, r24
    2f44:	2f 7c       	andi	r18, 0xCF	; 207
    2f46:	eb 81       	ldd	r30, Y+3	; 0x03
    2f48:	fc 81       	ldd	r31, Y+4	; 0x04
    2f4a:	81 81       	ldd	r24, Z+1	; 0x01
    2f4c:	88 2f       	mov	r24, r24
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	82 95       	swap	r24
    2f52:	92 95       	swap	r25
    2f54:	90 7f       	andi	r25, 0xF0	; 240
    2f56:	98 27       	eor	r25, r24
    2f58:	80 7f       	andi	r24, 0xF0	; 240
    2f5a:	98 27       	eor	r25, r24
    2f5c:	82 2b       	or	r24, r18
    2f5e:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Configs_Ptr -> baud_Rate) * 8UL))) - 1);
    2f60:	eb 81       	ldd	r30, Y+3	; 0x03
    2f62:	fc 81       	ldd	r31, Y+4	; 0x04
    2f64:	83 81       	ldd	r24, Z+3	; 0x03
    2f66:	94 81       	ldd	r25, Z+4	; 0x04
    2f68:	a5 81       	ldd	r26, Z+5	; 0x05
    2f6a:	b6 81       	ldd	r27, Z+6	; 0x06
    2f6c:	88 0f       	add	r24, r24
    2f6e:	99 1f       	adc	r25, r25
    2f70:	aa 1f       	adc	r26, r26
    2f72:	bb 1f       	adc	r27, r27
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	aa 1f       	adc	r26, r26
    2f7a:	bb 1f       	adc	r27, r27
    2f7c:	88 0f       	add	r24, r24
    2f7e:	99 1f       	adc	r25, r25
    2f80:	aa 1f       	adc	r26, r26
    2f82:	bb 1f       	adc	r27, r27
    2f84:	9c 01       	movw	r18, r24
    2f86:	ad 01       	movw	r20, r26
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	92 e1       	ldi	r25, 0x12	; 18
    2f8c:	aa e7       	ldi	r26, 0x7A	; 122
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 75 18 	call	0x30ea	; 0x30ea <__udivmodsi4>
    2f98:	da 01       	movw	r26, r20
    2f9a:	c9 01       	movw	r24, r18
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    2fa2:	e0 e4       	ldi	r30, 0x40	; 64
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2faa:	89 2f       	mov	r24, r25
    2fac:	99 27       	eor	r25, r25
    2fae:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2fb0:	e9 e2       	ldi	r30, 0x29	; 41
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	80 83       	st	Z, r24
}
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	0f 92       	push	r0
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2fd2:	eb e2       	ldi	r30, 0x2B	; 43
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	88 2f       	mov	r24, r24
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	80 72       	andi	r24, 0x20	; 32
    2fde:	90 70       	andi	r25, 0x00	; 0
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	b9 f3       	breq	.-18     	; 0x2fd2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2fe4:	ec e2       	ldi	r30, 0x2C	; 44
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2fec:	0f 90       	pop	r0
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ffc:	eb e2       	ldi	r30, 0x2B	; 43
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	88 23       	and	r24, r24
    3004:	dc f7       	brge	.-10     	; 0x2ffc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3006:	ec e2       	ldi	r30, 0x2C	; 44
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
}
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	00 d0       	rcall	.+0      	; 0x3018 <UART_sendString+0x6>
    3018:	0f 92       	push	r0
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
    301e:	9b 83       	std	Y+3, r25	; 0x03
    3020:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3022:	19 82       	std	Y+1, r1	; 0x01
    3024:	0e c0       	rjmp	.+28     	; 0x3042 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	9b 81       	ldd	r25, Y+3	; 0x03
    3030:	fc 01       	movw	r30, r24
    3032:	e2 0f       	add	r30, r18
    3034:	f3 1f       	adc	r31, r19
    3036:	80 81       	ld	r24, Z
    3038:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_sendByte>
		i++;
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	8f 5f       	subi	r24, 0xFF	; 255
    3040:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	9b 81       	ldd	r25, Y+3	; 0x03
    304c:	fc 01       	movw	r30, r24
    304e:	e2 0f       	add	r30, r18
    3050:	f3 1f       	adc	r31, r19
    3052:	80 81       	ld	r24, Z
    3054:	88 23       	and	r24, r24
    3056:	39 f7       	brne	.-50     	; 0x3026 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	00 d0       	rcall	.+0      	; 0x306e <UART_receiveString+0xa>
    306e:	0f 92       	push	r0
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	9b 83       	std	Y+3, r25	; 0x03
    3076:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3078:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	9b 81       	ldd	r25, Y+3	; 0x03
    3084:	8c 01       	movw	r16, r24
    3086:	02 0f       	add	r16, r18
    3088:	13 1f       	adc	r17, r19
    308a:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <UART_recieveByte>
    308e:	f8 01       	movw	r30, r16
    3090:	80 83       	st	Z, r24
    3092:	0f c0       	rjmp	.+30     	; 0x30b2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3094:	89 81       	ldd	r24, Y+1	; 0x01
    3096:	8f 5f       	subi	r24, 0xFF	; 255
    3098:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	8a 81       	ldd	r24, Y+2	; 0x02
    30a2:	9b 81       	ldd	r25, Y+3	; 0x03
    30a4:	8c 01       	movw	r16, r24
    30a6:	02 0f       	add	r16, r18
    30a8:	13 1f       	adc	r17, r19
    30aa:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <UART_recieveByte>
    30ae:	f8 01       	movw	r30, r16
    30b0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ba:	9b 81       	ldd	r25, Y+3	; 0x03
    30bc:	fc 01       	movw	r30, r24
    30be:	e2 0f       	add	r30, r18
    30c0:	f3 1f       	adc	r31, r19
    30c2:	80 81       	ld	r24, Z
    30c4:	83 32       	cpi	r24, 0x23	; 35
    30c6:	31 f7       	brne	.-52     	; 0x3094 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	fc 01       	movw	r30, r24
    30d4:	e2 0f       	add	r30, r18
    30d6:	f3 1f       	adc	r31, r19
    30d8:	10 82       	st	Z, r1
}
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	cf 91       	pop	r28
    30e2:	df 91       	pop	r29
    30e4:	1f 91       	pop	r17
    30e6:	0f 91       	pop	r16
    30e8:	08 95       	ret

000030ea <__udivmodsi4>:
    30ea:	a1 e2       	ldi	r26, 0x21	; 33
    30ec:	1a 2e       	mov	r1, r26
    30ee:	aa 1b       	sub	r26, r26
    30f0:	bb 1b       	sub	r27, r27
    30f2:	fd 01       	movw	r30, r26
    30f4:	0d c0       	rjmp	.+26     	; 0x3110 <__udivmodsi4_ep>

000030f6 <__udivmodsi4_loop>:
    30f6:	aa 1f       	adc	r26, r26
    30f8:	bb 1f       	adc	r27, r27
    30fa:	ee 1f       	adc	r30, r30
    30fc:	ff 1f       	adc	r31, r31
    30fe:	a2 17       	cp	r26, r18
    3100:	b3 07       	cpc	r27, r19
    3102:	e4 07       	cpc	r30, r20
    3104:	f5 07       	cpc	r31, r21
    3106:	20 f0       	brcs	.+8      	; 0x3110 <__udivmodsi4_ep>
    3108:	a2 1b       	sub	r26, r18
    310a:	b3 0b       	sbc	r27, r19
    310c:	e4 0b       	sbc	r30, r20
    310e:	f5 0b       	sbc	r31, r21

00003110 <__udivmodsi4_ep>:
    3110:	66 1f       	adc	r22, r22
    3112:	77 1f       	adc	r23, r23
    3114:	88 1f       	adc	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	1a 94       	dec	r1
    311a:	69 f7       	brne	.-38     	; 0x30f6 <__udivmodsi4_loop>
    311c:	60 95       	com	r22
    311e:	70 95       	com	r23
    3120:	80 95       	com	r24
    3122:	90 95       	com	r25
    3124:	9b 01       	movw	r18, r22
    3126:	ac 01       	movw	r20, r24
    3128:	bd 01       	movw	r22, r26
    312a:	cf 01       	movw	r24, r30
    312c:	08 95       	ret

0000312e <__prologue_saves__>:
    312e:	2f 92       	push	r2
    3130:	3f 92       	push	r3
    3132:	4f 92       	push	r4
    3134:	5f 92       	push	r5
    3136:	6f 92       	push	r6
    3138:	7f 92       	push	r7
    313a:	8f 92       	push	r8
    313c:	9f 92       	push	r9
    313e:	af 92       	push	r10
    3140:	bf 92       	push	r11
    3142:	cf 92       	push	r12
    3144:	df 92       	push	r13
    3146:	ef 92       	push	r14
    3148:	ff 92       	push	r15
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	cf 93       	push	r28
    3150:	df 93       	push	r29
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
    3156:	ca 1b       	sub	r28, r26
    3158:	db 0b       	sbc	r29, r27
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	09 94       	ijmp

00003166 <__epilogue_restores__>:
    3166:	2a 88       	ldd	r2, Y+18	; 0x12
    3168:	39 88       	ldd	r3, Y+17	; 0x11
    316a:	48 88       	ldd	r4, Y+16	; 0x10
    316c:	5f 84       	ldd	r5, Y+15	; 0x0f
    316e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3170:	7d 84       	ldd	r7, Y+13	; 0x0d
    3172:	8c 84       	ldd	r8, Y+12	; 0x0c
    3174:	9b 84       	ldd	r9, Y+11	; 0x0b
    3176:	aa 84       	ldd	r10, Y+10	; 0x0a
    3178:	b9 84       	ldd	r11, Y+9	; 0x09
    317a:	c8 84       	ldd	r12, Y+8	; 0x08
    317c:	df 80       	ldd	r13, Y+7	; 0x07
    317e:	ee 80       	ldd	r14, Y+6	; 0x06
    3180:	fd 80       	ldd	r15, Y+5	; 0x05
    3182:	0c 81       	ldd	r16, Y+4	; 0x04
    3184:	1b 81       	ldd	r17, Y+3	; 0x03
    3186:	aa 81       	ldd	r26, Y+2	; 0x02
    3188:	b9 81       	ldd	r27, Y+1	; 0x01
    318a:	ce 0f       	add	r28, r30
    318c:	d1 1d       	adc	r29, r1
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	ed 01       	movw	r28, r26
    319a:	08 95       	ret

0000319c <itoa>:
    319c:	fb 01       	movw	r30, r22
    319e:	9f 01       	movw	r18, r30
    31a0:	e8 94       	clt
    31a2:	42 30       	cpi	r20, 0x02	; 2
    31a4:	c4 f0       	brlt	.+48     	; 0x31d6 <itoa+0x3a>
    31a6:	45 32       	cpi	r20, 0x25	; 37
    31a8:	b4 f4       	brge	.+44     	; 0x31d6 <itoa+0x3a>
    31aa:	4a 30       	cpi	r20, 0x0A	; 10
    31ac:	29 f4       	brne	.+10     	; 0x31b8 <itoa+0x1c>
    31ae:	97 fb       	bst	r25, 7
    31b0:	1e f4       	brtc	.+6      	; 0x31b8 <itoa+0x1c>
    31b2:	90 95       	com	r25
    31b4:	81 95       	neg	r24
    31b6:	9f 4f       	sbci	r25, 0xFF	; 255
    31b8:	64 2f       	mov	r22, r20
    31ba:	77 27       	eor	r23, r23
    31bc:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__udivmodhi4>
    31c0:	80 5d       	subi	r24, 0xD0	; 208
    31c2:	8a 33       	cpi	r24, 0x3A	; 58
    31c4:	0c f0       	brlt	.+2      	; 0x31c8 <itoa+0x2c>
    31c6:	89 5d       	subi	r24, 0xD9	; 217
    31c8:	81 93       	st	Z+, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	a1 f7       	brne	.-24     	; 0x31b8 <itoa+0x1c>
    31d0:	16 f4       	brtc	.+4      	; 0x31d6 <itoa+0x3a>
    31d2:	5d e2       	ldi	r21, 0x2D	; 45
    31d4:	51 93       	st	Z+, r21
    31d6:	10 82       	st	Z, r1
    31d8:	c9 01       	movw	r24, r18
    31da:	0c 94 ef 18 	jmp	0x31de	; 0x31de <strrev>

000031de <strrev>:
    31de:	dc 01       	movw	r26, r24
    31e0:	fc 01       	movw	r30, r24
    31e2:	67 2f       	mov	r22, r23
    31e4:	71 91       	ld	r23, Z+
    31e6:	77 23       	and	r23, r23
    31e8:	e1 f7       	brne	.-8      	; 0x31e2 <strrev+0x4>
    31ea:	32 97       	sbiw	r30, 0x02	; 2
    31ec:	04 c0       	rjmp	.+8      	; 0x31f6 <strrev+0x18>
    31ee:	7c 91       	ld	r23, X
    31f0:	6d 93       	st	X+, r22
    31f2:	70 83       	st	Z, r23
    31f4:	62 91       	ld	r22, -Z
    31f6:	ae 17       	cp	r26, r30
    31f8:	bf 07       	cpc	r27, r31
    31fa:	c8 f3       	brcs	.-14     	; 0x31ee <strrev+0x10>
    31fc:	08 95       	ret

000031fe <__udivmodhi4>:
    31fe:	aa 1b       	sub	r26, r26
    3200:	bb 1b       	sub	r27, r27
    3202:	51 e1       	ldi	r21, 0x11	; 17
    3204:	07 c0       	rjmp	.+14     	; 0x3214 <__udivmodhi4_ep>

00003206 <__udivmodhi4_loop>:
    3206:	aa 1f       	adc	r26, r26
    3208:	bb 1f       	adc	r27, r27
    320a:	a6 17       	cp	r26, r22
    320c:	b7 07       	cpc	r27, r23
    320e:	10 f0       	brcs	.+4      	; 0x3214 <__udivmodhi4_ep>
    3210:	a6 1b       	sub	r26, r22
    3212:	b7 0b       	sbc	r27, r23

00003214 <__udivmodhi4_ep>:
    3214:	88 1f       	adc	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	5a 95       	dec	r21
    321a:	a9 f7       	brne	.-22     	; 0x3206 <__udivmodhi4_loop>
    321c:	80 95       	com	r24
    321e:	90 95       	com	r25
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	08 95       	ret

00003226 <_exit>:
    3226:	f8 94       	cli

00003228 <__stop_program>:
    3228:	ff cf       	rjmp	.-2      	; 0x3228 <__stop_program>
